# SPDX-License-Identifier: MIT
#
# Copyright (c) 2025 Berachain Foundation
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

name: pipeline

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
  merge_group:

concurrency:
  group: ci-${{ github.ref }}-tests
  # We don't want to cancel in progress on main. This is to allow
  # us to debug main if a bad commit is pushed.
  # Case 1: The base branch is main and the event triggered via merge group => we DO NOT want to cancel in progress
  # Case 2: The reference branch is not main => we want to cancel in progress
  cancel-in-progress: ${{ !(github.base_ref == 'refs/heads/main' && github.event_name == 'merge_group') || github.ref != 'refs/heads/main' }}

env:
  GHCR_REGISTRY: ghcr.io
  PUSH_DOCKER_IMAGE: ${{ (github.base_ref == github.head_ref && github.event_name == 'push') || github.ref == 'refs/tags/v*'}}
  VERSION: ${{ github.ref_name }}

jobs:
  # -------------------------------------------------------------------------- #
  #                                Main Pipeline                               #
  # -------------------------------------------------------------------------- #

  ci:
    strategy:
      matrix:
        args:
          - "build"
          - "lint"
          - "slither"
          - "gosec"
          - "nilaway"
          - "vulncheck"
          - "markdownlint"
          - "generate-check"
          - "tidy-sync-check"
          - "test-unit-cover"
          - "test-unit-bench"
          - "test-unit-fuzz"
          - "test-forge-cover"
          - "test-forge-fuzz"
        os:
          - ubuntu-24.04-beacon-kit
    name: ${{ matrix.args }}
    runs-on:
      labels: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: v1.3.1
        if: ${{ matrix.args == 'lint' || matrix.args == 'generate-check' || matrix.args == 'test-forge-cover' || matrix.args == 'test-forge-fuzz' }}

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.3"
          check-latest: true
          cache-dependency-path: "**/*.sum"
        if: ${{ !(matrix.args == 'test-forge-cover' || matrix.args == 'test-forge-fuzz') }}

      - name: Run ${{ matrix.args }}
        run: |
          make ${{ matrix.args }}
        env:
          GOPATH: /home/runner/go

      # If running unit test coverage, merge the two coverage files
      - name: Merge Coverage Reports for Unit Tests
        if: ${{ matrix.args == 'test-unit-cover' }}
        run: |
          # Install gocovmerge
          go install github.com/wadey/gocovmerge@latest
          # Merge the two coverage files
          gocovmerge test-unit-cover.txt test-simulated.txt > coverage-merged.txt

      # Upload merged coverage for unit tests
      - name: Upload Unit Test Coverage to Codecov
        if: ${{ matrix.args == 'test-unit-cover' }}
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage-merged.txt

  # -------------------------------------------------------------------------- #
  #                                 E2E Testing                                #
  # -------------------------------------------------------------------------- #

  ci-e2e:
    environment: 'test-e2e'
    strategy:
      matrix:
        args:
          - "test-e2e"
        os:
          - ubuntu-24.04-e2e
    name: ${{ matrix.args }}
    runs-on:
      labels: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Check if Docker Hub credentials exist
        id: check-docker-credentials
        run: |
          if [ "${{ secrets.DOCKERHUB_USERNAME }}" != "" ] && [ "${{ secrets.DOCKERHUB_TOKEN }}" != "" ]; then
            echo "has_credentials=true" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Login to Docker Hub
        uses: docker/login-action@v3.4.0
        if: steps.check-docker-credentials.outputs.has_credentials == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.3"
          check-latest: true
          cache-dependency-path: "**/*.sum"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Install Kurtosis
        run: |
          sudo apt-get install ca-certificates
          sudo apt update
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=$(go list -m -f '{{.Version}}' github.com/kurtosis-tech/kurtosis/api/golang | sed 's/^v//') -y
          docker info
          for img in kurtosistech/engine:1.4.3 timberio/vector:0.31.0-debian traefik:2.10.6 alpine:3.17; do
            docker pull $img
          done
          kurtosis engine start
        if: ${{ matrix.args == 'test-e2e' }}
      - name: Run ${{ matrix.args }}
        run: |
          make ${{ matrix.args }}
        env:
          GOPATH: /home/runner/go

  # -------------------------------------------------------------------------- #
  #                       Docker Container Build and Push                      #
  # -------------------------------------------------------------------------- #

  build-and-push-container:
    runs-on:
      labels: ubuntu-24.04-beacon-kit
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Echo GitHub Context Variables
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          GITHUB_ACTION: ${{ github.action }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_JOB: ${{ github.job }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_API_URL: ${{ github.api_url }}
          GITHUB_GRAPHQL_URL: ${{ github.graphql_url }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
          PUSH_DOCKER_IMAGE: ${{ env.PUSH_DOCKER_IMAGE }}
          VERSION: ${{ env.VERSION }}
        run: |
          echo "GitHub Actor: \"$GITHUB_ACTOR\""
          echo "GitHub Repository: \"$GITHUB_REPOSITORY\""
          echo "GitHub Event Name: \"$GITHUB_EVENT_NAME\""
          echo "GitHub SHA: \"$GITHUB_SHA\""
          echo "GitHub Ref: \"$GITHUB_REF\""
          echo "GitHub Workflow: \"$GITHUB_WORKFLOW\""
          echo "GitHub Action: \"$GITHUB_ACTION\""
          echo "GitHub Run ID: \"$GITHUB_RUN_ID\""
          echo "GitHub Run Number: \"$GITHUB_RUN_NUMBER\""
          echo "GitHub Job: \"$GITHUB_JOB\""
          echo "GitHub Server URL: \"$GITHUB_SERVER_URL\""
          echo "GitHub API URL: \"$GITHUB_API_URL\""
          echo "GitHub GraphQL URL: \"$GITHUB_GRAPHQL_URL\""
          echo "GitHub Head Ref: \"$GITHUB_HEAD_REF\""
          echo "GitHub Base Ref: \"$GITHUB_BASE_REF\""
          echo "PUSH_DOCKER_IMAGE: \"$PUSH_DOCKER_IMAGE\""
          echo "VERSION: \"$VERSION\""
      - name: Build Docker image
        run: |
          make build-docker

      - if: ${{ env.PUSH_DOCKER_IMAGE == 'true' }}
        name: Authenticate to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - if: ${{ env.PUSH_DOCKER_IMAGE == 'true' }}
        name: Push Docker image
        run: |
          make push-docker-github
