diff --git a/.mockery.yaml b/.mockery.yaml
index 606223630..e4efc43af 100644
--- a/.mockery.yaml
+++ b/.mockery.yaml
@@ -68,3 +68,8 @@ packages:
       recursive: False
       with-expecter: true
       all: True
+  github.com/berachain/beacon-kit/mod/state-transition/pkg/core:
+    config:
+      recursive: False
+      with-expecter: true
+      include-regex: ExecutionEngine
diff --git a/CODEOWNERS b/CODEOWNERS
index c3cdd0d9e..dcaabcd8f 100644
--- a/CODEOWNERS
+++ b/CODEOWNERS
@@ -1 +1 @@
-*     @itsdevbear @ocnc
\ No newline at end of file
+*     @itsdevbear @abi87
diff --git a/README.md b/README.md
index f7e630ffe..c05ca6341 100644
--- a/README.md
+++ b/README.md
@@ -19,6 +19,7 @@ _The project is still heavily under construction, see the [disclaimer below](#st
 [![CodeCov](https://codecov.io/gh/berachain/beacon-kit/graph/badge.svg?token=0l5iJ3ZbzV)](https://codecov.io/gh/berachain/beacon-kit)
 [![Telegram Chat](https://img.shields.io/endpoint?color=neon&logo=telegram&label=chat&url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fbeacon_kit)](https://t.me/beacon_kit)
 [![X Follow](https://img.shields.io/twitter/follow/berachain)](https://x.com/berachain)
+[![Discord](https://img.shields.io/discord/924442927399313448?label=discord)](https://discord.gg/berachain)
 
 </div>
 
@@ -45,7 +46,7 @@ BeaconKit is able to support all 6 major Ethereum execution clients:
 
 - [Docker](https://docs.docker.com/engine/install/)
 - [Golang 1.23.0+](https://go.dev/doc/install)
-- [Foundry](https://book.getfoundry.sh/getting-started/installation)
+- [Foundry](https://book.getfoundry.sh/)
 
 Start by opening two terminals side-by-side:
 
diff --git a/beacond/cmd/defaults.go b/beacond/cmd/defaults.go
index e4ede16b8..79e542e03 100644
--- a/beacond/cmd/defaults.go
+++ b/beacond/cmd/defaults.go
@@ -54,14 +54,12 @@ func DefaultComponents() []any {
 		components.ProvideBlsSigner,
 		components.ProvideBlobProcessor[
 			*AvailabilityStore, *BeaconBlockBody, *BeaconBlockHeader,
-			*BlobSidecar, *BlobSidecars, *Logger,
+			*ConsensusSidecars, *BlobSidecar, *BlobSidecars, *Logger,
 		],
 		components.ProvideBlobProofVerifier,
-		components.ProvideBlobVerifier[
-			*BeaconBlockHeader, *BlobSidecar, *BlobSidecars,
-		],
 		components.ProvideChainService[
-			*AvailabilityStore, *BeaconBlock, *BeaconBlockBody,
+			*AvailabilityStore,
+			*ConsensusBlock, *BeaconBlock, *BeaconBlockBody,
 			*BeaconBlockHeader, *BeaconState, *BeaconStateMarshallable,
 			*BlobSidecars, *BlockStore, *Deposit, *DepositStore,
 			*ExecutionPayload, *ExecutionPayloadHeader, *Genesis,
@@ -76,8 +74,8 @@ func DefaultComponents() []any {
 		// 	*BeaconStateMarshallable, *BlockStore, *KVStore, *StorageBackend,
 		// ],
 		components.ProvideDAService[
-			*AvailabilityStore, *BeaconBlockBody, *BlobSidecar,
-			*BlobSidecars, *Logger,
+			*AvailabilityStore, *BeaconBlockBody, *BeaconBlockHeader,
+			*ConsensusSidecars, *BlobSidecar, *BlobSidecars, *Logger,
 		],
 		components.ProvideDBManager[*AvailabilityStore, *DepositStore, *Logger],
 		components.ProvideDepositPruner[
@@ -91,7 +89,9 @@ func DefaultComponents() []any {
 		],
 		components.ProvideDepositStore[*Deposit],
 		components.ProvideDispatcher[
-			*BeaconBlock, *BlobSidecars, *Genesis, *Logger,
+			*ConsensusBlock, *BeaconBlock,
+			*ConsensusSidecars, *BlobSidecars,
+			*Genesis, *Logger,
 		],
 		components.ProvideEngineClient[
 			*ExecutionPayload, *ExecutionPayloadHeader, *Logger,
@@ -107,9 +107,11 @@ func DefaultComponents() []any {
 		components.ProvideReportingService[*Logger],
 		components.ProvideCometBFTService[*Logger],
 		components.ProvideServiceRegistry[
-			*AvailabilityStore, *BeaconBlock, *BeaconBlockBody,
+			*AvailabilityStore,
+			*ConsensusBlock, *BeaconBlock, *BeaconBlockBody,
 			*BeaconBlockHeader, *BlockStore, *BeaconState,
-			*BeaconStateMarshallable, *BlobSidecar, *BlobSidecars,
+			*BeaconStateMarshallable,
+			*ConsensusSidecars, *BlobSidecar, *BlobSidecars,
 			*Deposit, *DepositStore, *ExecutionPayload, *ExecutionPayloadHeader,
 			*Genesis, *KVStore, *Logger,
 			NodeAPIContext,
@@ -118,7 +120,7 @@ func DefaultComponents() []any {
 			*BeaconBlock, *BeaconBlockBody, *BeaconBlockHeader,
 		],
 		components.ProvideStateProcessor[
-			*BeaconBlock, *BeaconBlockBody, *BeaconBlockHeader,
+			*Logger, *BeaconBlock, *BeaconBlockBody, *BeaconBlockHeader,
 			*BeaconState, *BeaconStateMarshallable, *Deposit, *ExecutionPayload,
 			*ExecutionPayloadHeader, *KVStore,
 		],
diff --git a/beacond/cmd/types.go b/beacond/cmd/types.go
index 32f851a73..449bd573d 100644
--- a/beacond/cmd/types.go
+++ b/beacond/cmd/types.go
@@ -26,7 +26,6 @@ import (
 	"github.com/berachain/beacon-kit/mod/beacon/validator"
 	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
 	cometbft "github.com/berachain/beacon-kit/mod/consensus/pkg/cometbft/service"
-	"github.com/berachain/beacon-kit/mod/consensus/pkg/cometbft/service/middleware"
 	consruntimetypes "github.com/berachain/beacon-kit/mod/consensus/pkg/types"
 	dablob "github.com/berachain/beacon-kit/mod/da/pkg/blob"
 	"github.com/berachain/beacon-kit/mod/da/pkg/da"
@@ -63,14 +62,6 @@ import (
 /* -------------------------------------------------------------------------- */
 
 type (
-	// ABCIMiddleware is a type alias for the ABCIMiddleware.
-	ABCIMiddleware = middleware.ABCIMiddleware[
-		*BeaconBlock,
-		*BlobSidecars,
-		*Genesis,
-		*SlotData,
-	]
-
 	// AttributesFactory is a type alias for the attributes factory.
 	AttributesFactory = attributes.Factory[
 		*BeaconState,
@@ -83,13 +74,7 @@ type (
 		*AvailabilityStore,
 		*BeaconBlockBody,
 		*BeaconBlockHeader,
-		*BlobSidecar,
-		*BlobSidecars,
-	]
-
-	// BlobVerifier is a type alias for the blob verifier.
-	BlobVerifier = dablob.Verifier[
-		*BeaconBlockHeader,
+		*ConsensusSidecars,
 		*BlobSidecar,
 		*BlobSidecars,
 	]
@@ -100,6 +85,7 @@ type (
 	// ChainService is a type alias for the chain service.
 	ChainService = blockchain.Service[
 		*AvailabilityStore,
+		*ConsensusBlock,
 		*BeaconBlock,
 		*BeaconBlockBody,
 		*BeaconBlockHeader,
@@ -114,11 +100,11 @@ type (
 	// CometBFTService is a type alias for the CometBFT service.
 	CometBFTService = cometbft.Service[*Logger]
 
-	// ConsensusMiddleware is a type alias for the consensus middleware.
-	ConsensusMiddleware = cometbft.MiddlewareI
-
 	// DAService is a type alias for the DA service.
-	DAService = da.Service[*AvailabilityStore, *BlobSidecars]
+	DAService = da.Service[
+		*AvailabilityStore,
+		*ConsensusSidecars, *BlobSidecars, *BeaconBlockHeader,
+	]
 
 	// DBManager is a type alias for the database manager.
 	DBManager = manager.DBManager
@@ -245,6 +231,7 @@ type (
 	AvailabilityStore = dastore.Store[*BeaconBlockBody]
 
 	// BeaconBlock type aliases.
+	ConsensusBlock    = consruntimetypes.ConsensusBlock[*BeaconBlock]
 	BeaconBlock       = types.BeaconBlock
 	BeaconBlockBody   = types.BeaconBlockBody
 	BeaconBlockHeader = types.BeaconBlockHeader
@@ -277,10 +264,12 @@ type (
 		Validator,
 	]
 
-	// BlobSidecar is a type alias for the blob sidecar.
-	BlobSidecar = datypes.BlobSidecar
-
-	// BlobSidecars is a type alias for the blob sidecars.
+	// BlobSidecars type aliases.
+	ConsensusSidecars = consruntimetypes.ConsensusSidecars[
+		*BlobSidecars,
+		*BeaconBlockHeader,
+	]
+	BlobSidecar  = datypes.BlobSidecar
 	BlobSidecars = datypes.BlobSidecars
 
 	// BlockStore is a type alias for the block store.
diff --git a/beacond/go.mod b/beacond/go.mod
index d7015c174..8b7dd236b 100644
--- a/beacond/go.mod
+++ b/beacond/go.mod
@@ -20,21 +20,20 @@ replace (
 	github.com/berachain/beacon-kit/mod/storage => ../mod/storage
 	github.com/cometbft/cometbft => github.com/cometbft/cometbft v1.0.0-rc1.0.20240805092115-3b2c5d9e1843
 	github.com/cosmos/cosmos-sdk => github.com/berachain/cosmos-sdk v0.46.0-beta2.0.20240808182639-7bdbf06a94f2
-	github.com/ferranbt/fastssz => github.com/itsdevbear/fastssz v0.0.0-20240731164358-a354a31813e6
-	github.com/karalabe/ssz => github.com/itsdevbear/ssz v0.0.0-20240729201410-1a53beff08cb
+	github.com/karalabe/ssz => github.com/berachain/karalabe-ssz v0.3.0-alpha.0
 )
 
 require (
 	cosmossdk.io/core v1.0.0
 	github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e
-	github.com/berachain/beacon-kit/mod/cli v0.0.0-20240822173558-4e2a8018ae21
-	github.com/berachain/beacon-kit/mod/consensus v0.0.0-20240821053614-036c5d2945f0
-	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685
+	github.com/berachain/beacon-kit/mod/cli v0.0.0-20241107170417-7905e3d59a1d
+	github.com/berachain/beacon-kit/mod/consensus v0.0.0-20241107170417-7905e3d59a1d
+	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f
 	github.com/berachain/beacon-kit/mod/da v0.0.0-20240820191615-398849c34954
 	github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720
 	github.com/berachain/beacon-kit/mod/execution v0.0.0-20240820191615-398849c34954
 	github.com/berachain/beacon-kit/mod/log v0.0.0-20240821000339-4d4242ba4a50
-	github.com/berachain/beacon-kit/mod/node-api v0.0.0-20240806160829-cde2d1347e7e
+	github.com/berachain/beacon-kit/mod/node-api v0.0.0-20241107170417-7905e3d59a1d
 	github.com/berachain/beacon-kit/mod/node-api/engines v0.0.0-20240806160829-cde2d1347e7e
 	github.com/berachain/beacon-kit/mod/node-core v0.0.0-20240821225446-81f31b0aac98
 	github.com/berachain/beacon-kit/mod/payload v0.0.0-20240705193247-d464364483df
@@ -45,8 +44,6 @@ require (
 	go.uber.org/automaxprocs v1.5.3
 )
 
-require github.com/berachain/beacon-kit/mod/observability v0.0.0-00010101000000-000000000000 // indirect
-
 require (
 	buf.build/gen/go/cometbft/cometbft/protocolbuffers/go v1.34.2-20240701160653-fedbb9acfd2f.2 // indirect
 	buf.build/gen/go/cosmos/gogo-proto/protocolbuffers/go v1.34.2-20240130113600-88ef6483f90f.2 // indirect
@@ -75,9 +72,10 @@ require (
 	github.com/beorn7/perks v1.0.1 // indirect
 	github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 // indirect
 	github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df // indirect
-	github.com/berachain/beacon-kit/mod/config v0.0.0-20240705193247-d464364483df // indirect
+	github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad // indirect
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0 // indirect
 	github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e // indirect
+	github.com/berachain/beacon-kit/mod/observability v0.0.0-unpublished // indirect
 	github.com/bgentry/speakeasy v0.2.0 // indirect
 	github.com/bits-and-blooms/bitset v1.13.0 // indirect
 	github.com/btcsuite/btcd/btcec/v2 v2.3.3 // indirect
@@ -119,9 +117,9 @@ require (
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
 	github.com/fatih/color v1.17.0 // indirect
 	github.com/felixge/httpsnoop v1.0.4 // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 // indirect
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 // indirect
 	github.com/fsnotify/fsnotify v1.7.0 // indirect
-	github.com/gabriel-vasile/mimetype v1.4.4 // indirect
+	github.com/gabriel-vasile/mimetype v1.4.6 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
 	github.com/go-faster/xor v1.0.0 // indirect
 	github.com/go-kit/kit v0.13.0 // indirect
@@ -194,7 +192,7 @@ require (
 	github.com/oklog/run v1.1.0 // indirect
 	github.com/olekukonko/tablewriter v0.0.5 // indirect
 	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
-	github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/phuslu/log v1.0.110 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
@@ -211,7 +209,7 @@ require (
 	github.com/rs/zerolog v1.33.0 // indirect
 	github.com/sagikazarmark/locafero v0.6.0 // indirect
 	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
-	github.com/sasha-s/go-deadlock v0.3.1 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
 	github.com/shirou/gopsutil v3.21.11+incompatible // indirect
 	github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8 // indirect
 	github.com/spf13/afero v1.11.0 // indirect
@@ -236,19 +234,19 @@ require (
 	gitlab.com/yawning/secp256k1-voi v0.0.0-20230925100816-f2616030848b // indirect
 	gitlab.com/yawning/tuplehash v0.0.0-20230713102510-df83abbf9a02 // indirect
 	go.opencensus.io v0.24.0 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
 	golang.org/x/sync v0.8.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/term v0.23.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/term v0.25.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
 	golang.org/x/time v0.5.0 // indirect
-	google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
+	google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
 	google.golang.org/grpc v1.65.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/ini.v1 v1.67.0 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
diff --git a/beacond/go.sum b/beacond/go.sum
index 9d3518638..4acf31248 100644
--- a/beacond/go.sum
+++ b/beacond/go.sum
@@ -78,8 +78,8 @@ github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 h1:
 github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8/go.mod h1:3wR01SglBZ+HvDvhbugz/Mxem22JUThJRwo2Ec8Q0No=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df h1:mnD1LKqDQ0n+OFdDqOuvKaEiUKRJzsO4V0wyyn/gJYg=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df/go.mod h1:bTFB4Rdvm7D/WdwPYkqQ+8T0XOMBv0pzXfp1E46BFX8=
-github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685 h1:pTvESOpJ0a6oCV81+pec+zoTBmojZ8C1+7fd4HtKpbI=
-github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685/go.mod h1:jduqdSJEtO5eL43l/MpfnIK81o81m10wzt6Gb++Qi9M=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f h1:Vzglhdv60M7LBS3FBuqK0eUX8vYJBJnL/RwYpxUswpo=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f/go.mod h1:cZd8cFZ+ylhh3/NUbrdXO2ri1/7KOaYBjo1B8MgbgMM=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720 h1:rVltwwt4JAhpvqeRDZ8J07e9XM+jzfDCJEghPA4r5lg=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720/go.mod h1:kGxAesqTkt75+QYQ73O9I5PqAicSL9JGh5wypiWgb8I=
 github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0 h1:kCSrkb/uVXfMKJPKjf0c7nlJkwn5cNwMxtzRW4zNq2A=
@@ -100,6 +100,8 @@ github.com/berachain/beacon-kit/mod/state-transition v0.0.0-20240717225334-64ec6
 github.com/berachain/beacon-kit/mod/state-transition v0.0.0-20240717225334-64ec6650da31/go.mod h1:sIzib45R7B9Q99yvsYUcj2xJZPBpe3J9JbcBDMZNp7E=
 github.com/berachain/cosmos-sdk v0.46.0-beta2.0.20240808182639-7bdbf06a94f2 h1:4qwOPga+dKeDelSJ6pseasQq6fcjd7iXhah0y7enuco=
 github.com/berachain/cosmos-sdk v0.46.0-beta2.0.20240808182639-7bdbf06a94f2/go.mod h1:DUyJJMMuFJ9OZAhnFMLA0KTFGoVw61p8wnqtV3Wgx3c=
+github.com/berachain/karalabe-ssz v0.3.0-alpha.0 h1:SVMU5PSuMB2fgmFTf1rSBY9rEHpQv24DJcqxSrD7jf8=
+github.com/berachain/karalabe-ssz v0.3.0-alpha.0/go.mod h1:7BZG/jckt43eKw7sl/AF6gTcL0oxgFPme39m54v8rDI=
 github.com/bgentry/speakeasy v0.2.0 h1:tgObeVOf8WAvtuAX6DhJ4xks4CFNwPDZiqzGqIHE51E=
 github.com/bgentry/speakeasy v0.2.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=
 github.com/bits-and-blooms/bitset v1.13.0 h1:bAQ9OPNFYbGHV6Nez0tmNI0RiEu7/hxlYJRUA0wFAVE=
@@ -237,6 +239,8 @@ github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
 github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
 github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
 github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fjl/memsize v0.0.2 h1:27txuSD9or+NZlnOWdKUxeBzTAUkWCVh+4Gf2dWFOzA=
 github.com/fjl/memsize v0.0.2/go.mod h1:VvhXpOYNQvB+uIk2RvXzuaQtkQJzzIx6lSBe1xv7hi0=
 github.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=
@@ -248,8 +252,8 @@ github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
 github.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=
 github.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=
-github.com/gabriel-vasile/mimetype v1.4.4 h1:QjV6pZ7/XZ7ryI2KuyeEDE8wnh7fHP9YnQy+R0LnH8I=
-github.com/gabriel-vasile/mimetype v1.4.4/go.mod h1:JwLei5XPtWdGiMFB5Pjle1oEeoSeEuJfJE+TtfvdB/s=
+github.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=
+github.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=
 github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08 h1:f6D9Hr8xV8uYKlyuj8XIruxlh9WjVjdh1gIicAS7ays=
 github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08/go.mod h1:x7DCsMOv1taUwEWCzT4cmDeAkigA5/QCwUodaVOe8Ww=
 github.com/getsentry/sentry-go v0.28.1 h1:zzaSm/vHmGllRM6Tpx1492r0YDzauArdBfkJRtY6P5k=
@@ -302,8 +306,8 @@ github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
 github.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=
 github.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=
-github.com/golang-jwt/jwt/v4 v4.5.0 h1:7cYmW1XlMY7h7ii7UhUyChSgS5wUJEnm9uZVTGqOWzg=
-github.com/golang-jwt/jwt/v4 v4.5.0/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
+github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
+github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
 github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
 github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
@@ -418,10 +422,6 @@ github.com/iancoleman/strcase v0.3.0/go.mod h1:iwCmte+B7n89clKwxIoIXy/HfoL7AsD47
 github.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=
 github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
 github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
-github.com/itsdevbear/fastssz v0.0.0-20240731164358-a354a31813e6 h1:UZPeAqKS2AXLvFpSgPgZ2Vj3ZNl4iapFTK49wMujFMM=
-github.com/itsdevbear/fastssz v0.0.0-20240731164358-a354a31813e6/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
-github.com/itsdevbear/ssz v0.0.0-20240729201410-1a53beff08cb h1:ANOSROCqWTdb2N0/FBJ3VhpvUhs2rb4xtKJeT35jM+4=
-github.com/itsdevbear/ssz v0.0.0-20240729201410-1a53beff08cb/go.mod h1:SUFJO5R2VkUK3vT80pjfIB/g7eaQgSU2RhbuL8GOJq4=
 github.com/jackpal/go-nat-pmp v1.0.2 h1:KzKSgb7qkJvOUTqYl9/Hg/me3pWgBmERKrTGD7BdWus=
 github.com/jackpal/go-nat-pmp v1.0.2/go.mod h1:QPH045xvCAeXUZOxsnwmrtiCoxIr9eob+4orBN1SBKc=
 github.com/jhump/protoreflect v1.16.0 h1:54fZg+49widqXYQ0b+usAFHbMkBGR4PpXrsHc8+TBDg=
@@ -533,9 +533,8 @@ github.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0Mw
 github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
 github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
 github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
-github.com/petermattis/goid v0.0.0-20180202154549-b0b1615b78e5/go.mod h1:jvVRKCrJTQWu0XVbaOlby/2lO20uSCHEMzzplHXte1o=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 h1:CtBLeckhC0zAXgp5V8uR30CNYH0JgCJoxCg5+6i2zQk=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
 github.com/phuslu/log v1.0.110 h1:9WQnpL1/CBi3IwZaVadYnI/i0bgobTvit2ayXIgSg4c=
 github.com/phuslu/log v1.0.110/go.mod h1:F8osGJADo5qLK/0F88djWwdyoZZ9xDJQL1HYRHFEkS0=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
@@ -594,8 +593,8 @@ github.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3
 github.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=
 github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
 github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
-github.com/sasha-s/go-deadlock v0.3.1 h1:sqv7fDNShgjcaxkO0JNcOAlr8B9+cV5Ey/OB71efZx0=
-github.com/sasha-s/go-deadlock v0.3.1/go.mod h1:F73l+cr82YSh10GxyRI6qZiCgK64VaZjwesgfQ1/iLM=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=
 github.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
 github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
@@ -688,8 +687,8 @@ golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACk
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200728195943-123391ffb6de/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
@@ -718,8 +717,8 @@ golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96b
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -771,19 +770,19 @@ golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/sys v0.21.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.23.0 h1:F6D4vR+EHoL9/sWAWgAR1H2DcHr4PareCbAaCo1RpuU=
-golang.org/x/term v0.23.0/go.mod h1:DgV24QBUrK6jhZXl+20l6UWznPlwAHm1Q1mGHtydmSk=
+golang.org/x/term v0.25.0 h1:WtHI/ltw4NvSUig5KARz9h521QvRC8RmF/cuYqifU24=
+golang.org/x/term v0.25.0/go.mod h1:RPyXicDX+6vLxogjjRxjgD2TKtmAO6NZBsBRfrOLu7M=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
 golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -811,10 +810,10 @@ google.golang.org/genproto v0.0.0-20200423170343-7949de9c1215/go.mod h1:55QSHmfG
 google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
 google.golang.org/genproto v0.0.0-20220314164441-57ef72a4c106/go.mod h1:hAL49I2IFola2sVEjAn7MEwsja0xp51I0tlGAf9hz4E=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 h1:CUiCqkPw1nNrNQzCCG4WA65m0nAmQiwXHpub3dNyruU=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4/go.mod h1:EvuUDCulqGgV80RvP1BHuom+smhX4qtlhnNatHuroGQ=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d h1:PksQg4dV6Sem3/HkBX+Ltq8T0ke0PKIRBNBatoDTVls=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d/go.mod h1:s7iA721uChleev562UJO2OYB0PPT9CMFjV+Ce7VJH5M=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 h1:0+ozOGcrp+Y8Aq8TLNN2Aliibms5LEzsq99ZZmAGYm0=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094/go.mod h1:fJ/e3If/Q67Mj99hin0hMhiNyCRmt6BQ2aWIJshUSJw=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d h1:JU0iKnSg02Gmb5ZdV8nYsKEKsP6o/FGVWTrw4i1DA9A=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
@@ -842,8 +841,8 @@ google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp0
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
diff --git a/build/scripts/testing.mk b/build/scripts/testing.mk
index 4606bcb27..63aa55997 100644
--- a/build/scripts/testing.mk
+++ b/build/scripts/testing.mk
@@ -202,7 +202,7 @@ start-erigon: ## start an ephemeral `erigon` node
 	docker run \
     --rm -v $(PWD)/${TESTAPP_FILES_DIR}:/${TESTAPP_FILES_DIR} \
     -v $(PWD)/.tmp:/.tmp \
-    thorax/erigon:latest init \
+    erigontech/erigon:latest init \
     --datadir .tmp/erigon \
     ${ETH_GENESIS_PATH}
 
@@ -212,7 +212,7 @@ start-erigon: ## start an ephemeral `erigon` node
 	-p 8551:8551 \
 	--rm -v $(PWD)/${TESTAPP_FILES_DIR}:/${TESTAPP_FILES_DIR} \
 	-v $(PWD)/.tmp:/.tmp \
-	thorax/erigon:latest \
+	erigontech/erigon:latest \
 	--http \
 	--http.addr 0.0.0.0 \
 	--http.api eth,net \
diff --git a/build/tools/go.mod b/build/tools/go.mod
index 0d20593f0..f1fa4a059 100644
--- a/build/tools/go.mod
+++ b/build/tools/go.mod
@@ -10,7 +10,7 @@ require (
 	github.com/bufbuild/buf v1.34.0
 	github.com/cosmos/gosec/v2 v2.0.0-20230124142343-bf28a33fadf2
 	github.com/ethereum/go-ethereum v1.14.7
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81
 	github.com/fjl/gencodec v0.0.0-20230517082657-f9840df7b83e
 	github.com/golangci/golangci-lint v1.60.1
 	github.com/google/addlicense v1.1.1
@@ -42,6 +42,7 @@ require (
 	github.com/Microsoft/go-winio v0.6.2 // indirect
 	github.com/OpenPeeDeeP/depguard/v2 v2.2.0 // indirect
 	github.com/VictoriaMetrics/fastcache v1.12.2 // indirect
+	github.com/alecthomas/assert/v2 v2.3.0 // indirect
 	github.com/alecthomas/go-check-sumtype v0.1.4 // indirect
 	github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751 // indirect
 	github.com/alecthomas/units v0.0.0-20231202071711-9a357b53e9c9 // indirect
@@ -102,6 +103,7 @@ require (
 	github.com/docker/docker-credential-helpers v0.8.2 // indirect
 	github.com/docker/go-connections v0.5.0 // indirect
 	github.com/docker/go-units v0.5.0 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
 	github.com/ethereum/c-kzg-4844 v1.0.3 // indirect
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
 	github.com/ettle/strcase v0.2.0 // indirect
@@ -135,7 +137,7 @@ require (
 	github.com/gofrs/flock v0.12.1 // indirect
 	github.com/gofrs/uuid/v5 v5.2.0 // indirect
 	github.com/gogo/protobuf v1.3.2 // indirect
-	github.com/golang-jwt/jwt/v4 v4.5.0 // indirect
+	github.com/golang-jwt/jwt/v4 v4.5.1 // indirect
 	github.com/golang/protobuf v1.5.4 // indirect
 	github.com/golang/snappy v0.0.5-0.20220116011046-fa5810519dcb // indirect
 	github.com/golangci/dupl v0.0.0-20180902072040-3e9179ac440a // indirect
@@ -315,21 +317,21 @@ require (
 	go.uber.org/automaxprocs v1.5.3 // indirect
 	go.uber.org/multierr v1.11.0 // indirect
 	go.uber.org/zap v1.27.0 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
 	golang.org/x/exp/typeparams v0.0.0-20240613232115-7f521ea00fb8 // indirect
 	golang.org/x/mod v0.20.0 // indirect
-	golang.org/x/net v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
 	golang.org/x/sync v0.8.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/term v0.23.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/term v0.25.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
 	golang.org/x/time v0.5.0 // indirect
 	golang.org/x/tools v0.24.0 // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
 	google.golang.org/grpc v1.65.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/alecthomas/kingpin.v2 v2.2.6 // indirect
 	gopkg.in/ini.v1 v1.67.0 // indirect
 	gopkg.in/natefinch/lumberjack.v2 v2.2.1 // indirect
diff --git a/build/tools/go.sum b/build/tools/go.sum
index b73c1a659..f50f98b78 100644
--- a/build/tools/go.sum
+++ b/build/tools/go.sum
@@ -45,8 +45,8 @@ github.com/OpenPeeDeeP/depguard/v2 v2.2.0/go.mod h1:CIzddKRvLBC4Au5aYP/i3nyaWQ+C
 github.com/RaveNoX/go-jsoncommentstrip v1.0.0/go.mod h1:78ihd09MekBnJnxpICcwzCMzGrKSKYe4AqU6PDYYpjk=
 github.com/VictoriaMetrics/fastcache v1.12.2 h1:N0y9ASrJ0F6h0QaC3o6uJb3NIZ9VKLjCM7NQbSmF7WI=
 github.com/VictoriaMetrics/fastcache v1.12.2/go.mod h1:AmC+Nzz1+3G2eCPapF6UcsnkThDcMsQicp4xDukwJYI=
-github.com/alecthomas/assert/v2 v2.2.2 h1:Z/iVC0xZfWTaFNE6bA3z07T86hd45Xe2eLt6WVy2bbk=
-github.com/alecthomas/assert/v2 v2.2.2/go.mod h1:pXcQ2Asjp247dahGEmsZ6ru0UVwnkhktn7S0bBDLxvQ=
+github.com/alecthomas/assert/v2 v2.3.0 h1:mAsH2wmvjsuvyBvAmCtm7zFsBlb8mIHx5ySLVdDZXL0=
+github.com/alecthomas/assert/v2 v2.3.0/go.mod h1:pXcQ2Asjp247dahGEmsZ6ru0UVwnkhktn7S0bBDLxvQ=
 github.com/alecthomas/go-check-sumtype v0.1.4 h1:WCvlB3l5Vq5dZQTFmodqL2g68uHiSwwlWcT5a2FGK0c=
 github.com/alecthomas/go-check-sumtype v0.1.4/go.mod h1:WyYPfhfkdhyrdaligV6svFopZV8Lqdzn5pyVBaV6jhQ=
 github.com/alecthomas/repr v0.2.0 h1:HAzS41CIzNW5syS8Mf9UwXhNH1J9aix/BvDRf1Ml2Yk=
@@ -209,6 +209,8 @@ github.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4
 github.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
 github.com/dominikh/go-tools v0.5.1 h1:MYMGhQZWoMg9SvrKgjPq0TV5V1/7p3A3+aA1p0ImgU4=
 github.com/dominikh/go-tools v0.5.1/go.mod h1:e9irvo83WDG9/irijV44wr3tbhcFeRnfpVlRqVwpzMs=
+github.com/emicklei/dot v1.6.2 h1:08GN+DD79cy/tzN6uLCT84+2Wk9u+wvqP+Hkx/dIR8A=
+github.com/emicklei/dot v1.6.2/go.mod h1:DeV7GvQtIw4h2u73RKBkkFdvVAz0D9fzeJrgPW6gy/s=
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
 github.com/envoyproxy/protoc-gen-validate v1.0.4 h1:gVPz/FMfvh57HdSJQyvBtF00j8JU4zdyUgIUNhlgg0A=
@@ -230,8 +232,8 @@ github.com/felixge/fgprof v0.9.4 h1:ocDNwMFlnA0NU0zSB3I52xkO4sFXk80VK9lXjLClu88=
 github.com/felixge/fgprof v0.9.4/go.mod h1:yKl+ERSa++RYOs32d8K6WEXCB4uXdLls4ZaZPpayhMM=
 github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
 github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/firefart/nonamedreturns v1.0.5 h1:tM+Me2ZaXs8tfdDw3X6DOX++wMCOqzYUho6tUTYIdRA=
 github.com/firefart/nonamedreturns v1.0.5/go.mod h1:gHJjDqhGM4WyPt639SOZs+G89Ko7QKH5R5BhnO6xJhw=
 github.com/fjl/gencodec v0.0.0-20230517082657-f9840df7b83e h1:bBLctRc7kr01YGvaDfgLbTwjFNW5jdp5y5rj8XXBHfY=
@@ -309,8 +311,8 @@ github.com/gofrs/uuid/v5 v5.2.0 h1:qw1GMx6/y8vhVsx626ImfKMuS5CvJmhIKKtuyvfajMM=
 github.com/gofrs/uuid/v5 v5.2.0/go.mod h1:CDOjlDMVAtN56jqyRUZh58JT31Tiw7/oQyEXZV+9bD8=
 github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
-github.com/golang-jwt/jwt/v4 v4.5.0 h1:7cYmW1XlMY7h7ii7UhUyChSgS5wUJEnm9uZVTGqOWzg=
-github.com/golang-jwt/jwt/v4 v4.5.0/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
+github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
+github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
 github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
@@ -830,8 +832,8 @@ golang.org/x/crypto v0.14.0/go.mod h1:MVFd36DqK4CsrnJYDkBA3VC4m2GkXAM0PvzMCn4JQf
 golang.org/x/crypto v0.15.0/go.mod h1:4ChreQoLWfG3xLDer1WdlH5NdlQ3+mwnQq1YTKY+72g=
 golang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=
 golang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20231110203233-9a3e6036ecaa/go.mod h1:zk2irFbV9DP96SEBUUAy67IdHUaZuSnrz1n472HUCLE=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
@@ -886,8 +888,8 @@ golang.org/x/net v0.16.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=
 golang.org/x/net v0.18.0/go.mod h1:/czyP5RqHAH4odGYxBJ1qz0+CE5WZ+2j1YgoEo8F2jQ=
 golang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=
 golang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -946,8 +948,8 @@ golang.org/x/sys v0.13.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/telemetry v0.0.0-20240521205824-bda55230c457/go.mod h1:pRgIJT+bRLFKnoM1ldnzKoxTIn14Yxz928LQRYYgIN0=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
@@ -960,8 +962,8 @@ golang.org/x/term v0.13.0/go.mod h1:LTmsnFJwVN6bCy1rVCoS+qHT1HhALEFxKncY3WNNh4U=
 golang.org/x/term v0.14.0/go.mod h1:TySc+nGkYR6qt8km8wUhuFRTVSMIX3XPR58y2lC8vww=
 golang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=
 golang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=
-golang.org/x/term v0.23.0 h1:F6D4vR+EHoL9/sWAWgAR1H2DcHr4PareCbAaCo1RpuU=
-golang.org/x/term v0.23.0/go.mod h1:DgV24QBUrK6jhZXl+20l6UWznPlwAHm1Q1mGHtydmSk=
+golang.org/x/term v0.25.0 h1:WtHI/ltw4NvSUig5KARz9h521QvRC8RmF/cuYqifU24=
+golang.org/x/term v0.25.0/go.mod h1:RPyXicDX+6vLxogjjRxjgD2TKtmAO6NZBsBRfrOLu7M=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
@@ -974,8 +976,8 @@ golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=
 golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=
 golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
 golang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
 golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -1021,8 +1023,8 @@ google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7
 google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
 google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 h1:0+ozOGcrp+Y8Aq8TLNN2Aliibms5LEzsq99ZZmAGYm0=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094/go.mod h1:fJ/e3If/Q67Mj99hin0hMhiNyCRmt6BQ2aWIJshUSJw=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d h1:JU0iKnSg02Gmb5ZdV8nYsKEKsP6o/FGVWTrw4i1DA9A=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
@@ -1041,8 +1043,8 @@ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpAD
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6 h1:jMFz6MfLP0/4fUyZle81rXUoxOBFi19VUFKVDOQfozc=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
diff --git a/examples/berad/go.mod b/examples/berad/go.mod
index cd678ea8f..c463521c8 100644
--- a/examples/berad/go.mod
+++ b/examples/berad/go.mod
@@ -14,7 +14,7 @@ require (
 	github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240808171039-610759181f0a
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240705193247-d464364483df
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81
 	github.com/go-faster/xor v1.0.0
 	github.com/karalabe/ssz v0.2.1-0.20240724074312-3d1ff7a6f7c4
 	golang.org/x/sync v0.8.0
@@ -59,18 +59,18 @@ require (
 	github.com/mattn/go-colorable v0.1.13 // indirect
 	github.com/mattn/go-isatty v0.0.20 // indirect
 	github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a // indirect
-	github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
 	github.com/rs/zerolog v1.33.0 // indirect
-	github.com/sasha-s/go-deadlock v0.3.1 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
 	github.com/spf13/cast v1.7.0 // indirect
 	github.com/spf13/cobra v1.8.1 // indirect
 	github.com/spf13/pflag v1.0.5 // indirect
 	github.com/stretchr/testify v1.9.0 // indirect
 	github.com/tendermint/go-amino v0.16.0 // indirect
 	go.opencensus.io v0.24.0 // indirect
-	golang.org/x/net v0.28.0 // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
+	golang.org/x/net v0.30.0 // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
 	google.golang.org/grpc v1.65.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
@@ -107,6 +107,7 @@ require (
 	github.com/crate-crypto/go-kzg-4844 v1.1.0 // indirect
 	github.com/deckarep/golang-set/v2 v2.6.0 // indirect
 	github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
 	github.com/ethereum/c-kzg-4844 v1.0.3 // indirect
 	github.com/ethereum/go-ethereum v1.14.7 // indirect
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
@@ -146,11 +147,12 @@ require (
 	github.com/tklauser/numcpus v0.8.0 // indirect
 	github.com/umbracle/fastrlp v0.1.0 // indirect
 	github.com/yusufpapurcu/wmi v1.2.4 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	rsc.io/tmplfunc v0.0.3 // indirect
 )
diff --git a/examples/berad/go.sum b/examples/berad/go.sum
index 273964da4..53ea3752e 100644
--- a/examples/berad/go.sum
+++ b/examples/berad/go.sum
@@ -184,8 +184,8 @@ github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
 github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
 github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
 github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=
 github.com/fortytw2/leaktest v1.3.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=
 github.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=
@@ -406,9 +406,8 @@ github.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0Mw
 github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
 github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
 github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
-github.com/petermattis/goid v0.0.0-20180202154549-b0b1615b78e5/go.mod h1:jvVRKCrJTQWu0XVbaOlby/2lO20uSCHEMzzplHXte1o=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 h1:CtBLeckhC0zAXgp5V8uR30CNYH0JgCJoxCg5+6i2zQk=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
 github.com/pingcap/errors v0.11.4/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
@@ -459,8 +458,8 @@ github.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3
 github.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=
 github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
 github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
-github.com/sasha-s/go-deadlock v0.3.1 h1:sqv7fDNShgjcaxkO0JNcOAlr8B9+cV5Ey/OB71efZx0=
-github.com/sasha-s/go-deadlock v0.3.1/go.mod h1:F73l+cr82YSh10GxyRI6qZiCgK64VaZjwesgfQ1/iLM=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=
 github.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
 github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
@@ -528,8 +527,8 @@ golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnf
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
@@ -554,8 +553,8 @@ golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -595,18 +594,18 @@ golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.23.0 h1:F6D4vR+EHoL9/sWAWgAR1H2DcHr4PareCbAaCo1RpuU=
-golang.org/x/term v0.23.0/go.mod h1:DgV24QBUrK6jhZXl+20l6UWznPlwAHm1Q1mGHtydmSk=
+golang.org/x/term v0.25.0 h1:WtHI/ltw4NvSUig5KARz9h521QvRC8RmF/cuYqifU24=
+golang.org/x/term v0.25.0/go.mod h1:RPyXicDX+6vLxogjjRxjgD2TKtmAO6NZBsBRfrOLu7M=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
@@ -627,10 +626,10 @@ google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoA
 google.golang.org/genproto v0.0.0-20180831171423-11092d34479b/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
 google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 h1:CUiCqkPw1nNrNQzCCG4WA65m0nAmQiwXHpub3dNyruU=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4/go.mod h1:EvuUDCulqGgV80RvP1BHuom+smhX4qtlhnNatHuroGQ=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d h1:PksQg4dV6Sem3/HkBX+Ltq8T0ke0PKIRBNBatoDTVls=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d/go.mod h1:s7iA721uChleev562UJO2OYB0PPT9CMFjV+Ce7VJH5M=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 h1:0+ozOGcrp+Y8Aq8TLNN2Aliibms5LEzsq99ZZmAGYm0=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094/go.mod h1:fJ/e3If/Q67Mj99hin0hMhiNyCRmt6BQ2aWIJshUSJw=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d h1:JU0iKnSg02Gmb5ZdV8nYsKEKsP6o/FGVWTrw4i1DA9A=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
@@ -651,8 +650,8 @@ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpAD
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
diff --git a/examples/berad/pkg/consensus-types/state.go b/examples/berad/pkg/consensus-types/state.go
index 455a64a25..a55c3f4de 100644
--- a/examples/berad/pkg/consensus-types/state.go
+++ b/examples/berad/pkg/consensus-types/state.go
@@ -73,20 +73,19 @@ type BeaconState[
 // SizeSSZ returns the ssz encoded size in bytes for the BeaconState object.
 func (st *BeaconState[
 	_, _, _, _, _, _, _, _, _,
-]) SizeSSZ(fixed bool) uint32 {
+]) SizeSSZ(siz *ssz.Sizer, fixed bool) uint32 {
 	var size uint32 = 276
-
 	if fixed {
 		return size
 	}
 
 	// Dynamic size fields
-	size += ssz.SizeSliceOfStaticBytes(st.BlockRoots)
-	size += ssz.SizeSliceOfStaticBytes(st.StateRoots)
-	size += ssz.SizeDynamicObject(st.LatestExecutionPayloadHeader)
-	size += ssz.SizeSliceOfStaticObjects(st.Validators)
-	size += ssz.SizeSliceOfUint64s(st.Balances)
-	size += ssz.SizeSliceOfStaticBytes(st.RandaoMixes)
+	size += ssz.SizeSliceOfStaticBytes(siz, st.BlockRoots)
+	size += ssz.SizeSliceOfStaticBytes(siz, st.StateRoots)
+	size += ssz.SizeDynamicObject(siz, st.LatestExecutionPayloadHeader)
+	size += ssz.SizeSliceOfStaticObjects(siz, st.Validators)
+	size += ssz.SizeSliceOfUint64s(siz, st.Balances)
+	size += ssz.SizeSliceOfStaticBytes(siz, st.RandaoMixes)
 
 	return size
 }
@@ -131,7 +130,7 @@ func (st *BeaconState[
 func (st *BeaconState[
 	_, _, _, _, _, _, _, _, _,
 ]) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, st.SizeSSZ(false))
+	buf := make([]byte, ssz.Size(st))
 	return buf, ssz.EncodeToBytes(buf, st)
 }
 
diff --git a/examples/berad/pkg/consensus-types/validator.go b/examples/berad/pkg/consensus-types/validator.go
index 0dd44859a..a1c67f15b 100644
--- a/examples/berad/pkg/consensus-types/validator.go
+++ b/examples/berad/pkg/consensus-types/validator.go
@@ -96,7 +96,7 @@ func (v *Validator) New(
 const ValidatorSize = 112
 
 // SizeSSZ returns the size of the Validator object in SSZ encoding.
-func (*Validator) SizeSSZ() uint32 {
+func (*Validator) SizeSSZ(*ssz.Sizer) uint32 {
 	return ValidatorSize
 }
 
@@ -117,7 +117,7 @@ func (v *Validator) HashTreeRoot() common.Root {
 
 // MarshalSSZ marshals the Validator object to SSZ format.
 func (v *Validator) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, v.SizeSSZ())
+	buf := make([]byte, ssz.Size(v))
 	return buf, ssz.EncodeToBytes(buf, v)
 }
 
diff --git a/examples/berad/pkg/state-transition/state_processor_payload.go b/examples/berad/pkg/state-transition/state_processor_payload.go
index 0671b3628..090e1e814 100644
--- a/examples/berad/pkg/state-transition/state_processor_payload.go
+++ b/examples/berad/pkg/state-transition/state_processor_payload.go
@@ -60,10 +60,7 @@ func (sp *StateProcessor[
 	// changes.
 	g.Go(func() error {
 		var err error
-		header, err = payload.ToHeader(
-			sp.cs.MaxWithdrawalsPerPayload(),
-			sp.cs.DepositEth1ChainID(),
-		)
+		header, err = payload.ToHeader()
 		return err
 	})
 
diff --git a/examples/berad/pkg/state-transition/types.go b/examples/berad/pkg/state-transition/types.go
index df93b6875..4aaafad94 100644
--- a/examples/berad/pkg/state-transition/types.go
+++ b/examples/berad/pkg/state-transition/types.go
@@ -163,10 +163,7 @@ type ExecutionPayload[
 	GetBaseFeePerGas() *math.U256
 	GetBlobGasUsed() math.U64
 	GetExcessBlobGas() math.U64
-	ToHeader(
-		maxWithdrawalsPerPayload uint64,
-		eth1ChainID uint64,
-	) (ExecutionPayloadHeaderT, error)
+	ToHeader() (ExecutionPayloadHeaderT, error)
 }
 
 type ExecutionPayloadHeader interface {
diff --git a/kurtosis/Makefile b/kurtosis/Makefile
index b7ba0ce8f..eda0903d9 100644
--- a/kurtosis/Makefile
+++ b/kurtosis/Makefile
@@ -17,7 +17,8 @@ install-kurtosis:
 			if [ "$$ARCH" = "x86_64" ]; then ARCH="amd64"; \
 			elif [ "$$ARCH" = "arm64" ]; then ARCH="arm64"; \
 			else echo "Unsupported architecture $$ARCH for Kurtosis installation" && exit 1; fi; \
-			curl -Lo kurtosis.tar.gz "https://github.com/kurtosis-tech/kurtosis-cli/releases/latest/download/kurtosis-$$OS-$$ARCH.tar.gz"; \
+			TAG=`curl -s "https://api.github.com/repos/kurtosis-tech/kurtosis-cli-release-artifacts/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/'`; \
+			curl -Lo kurtosis.tar.gz "https://github.com/kurtosis-tech/kurtosis-cli-release-artifacts/releases/download/$TAG/kurtosis-cli_${TAG}_${OS}_${ARCH}.tar.gz"; \
 			tar -xzf kurtosis.tar.gz; \
 			rm kurtosis.tar.gz; \
 			chmod +x kurtosis; \
diff --git a/kurtosis/beaconkit-all.yaml b/kurtosis/beaconkit-all.yaml
index 51ec2c25b..83ce38a2a 100644
--- a/kurtosis/beaconkit-all.yaml
+++ b/kurtosis/beaconkit-all.yaml
@@ -93,7 +93,7 @@ node_settings:
       max_memory: 2048
     images:
       besu: hyperledger/besu:24.5.4
-      erigon: thorax/erigon:v2.60.1
+      erigon: erigontech/erigon:v2.60.9
       ethereumjs: ethpandaops/ethereumjs:stable
       geth: ethereum/client-go:latest
       nethermind: nethermind/nethermind:latest
diff --git a/kurtosis/beaconkit-base-gcp.yaml b/kurtosis/beaconkit-base-gcp.yaml
index 8fe056d0e..5692730ac 100644
--- a/kurtosis/beaconkit-base-gcp.yaml
+++ b/kurtosis/beaconkit-base-gcp.yaml
@@ -88,7 +88,7 @@ node_settings:
       max_memory: 32768
     images:
       besu: hyperledger/besu:latest
-      erigon: thorax/erigon:v2.60.1
+      erigon: erigontech/erigon:v2.60.9
       ethereumjs: ethpandaops/ethereumjs:stable
       geth: ethereum/client-go:latest
       nethermind: nethermind/nethermind:latest
diff --git a/kurtosis/src/nodes/consensus/beacond/node.star b/kurtosis/src/nodes/consensus/beacond/node.star
index c9063f7e2..882df6233 100644
--- a/kurtosis/src/nodes/consensus/beacond/node.star
+++ b/kurtosis/src/nodes/consensus/beacond/node.star
@@ -39,7 +39,7 @@ def start(persistent_peers, is_seed, validator_index, config_settings, app_setti
     --beacon-kit.kzg.implementation={} \
     --beacon-kit.engine.rpc-dial-url {} \
     --beacon-kit.block-store-service.enabled \
-    --beacon-kit.node-api.enabled --beacon-kit.node-api.logging \
+    --beacon-kit.node-api.enabled --beacon-kit.node-api.logging --beacon-kit.node-api.address 0.0.0.0:3500 \
     --pruning=nothing \
     {} {}".format(kzg_impl, "$BEACOND_ENGINE_DIAL_URL", seed_option, persistent_peers_option)
 
diff --git a/kurtosis/src/nodes/nodes.star b/kurtosis/src/nodes/nodes.star
index 705f0b233..cd2d7a07a 100644
--- a/kurtosis/src/nodes/nodes.star
+++ b/kurtosis/src/nodes/nodes.star
@@ -33,7 +33,7 @@ EXECUTION_DEFAULT_SETTINGS = {
     },
     "images": {
         "besu": "hyperledger/besu:latest",
-        "erigon": "thorax/erigon:v2.60.1",
+        "erigon": "erigontech/erigon:v2.60.9",
         "ethereumjs": "ethpandaops/ethereumjs:stable",
         "geth": "ethereum/client-go:latest",
         "nethermind": "nethermind/nethermind:latest",
diff --git a/kurtosis/src/services/blutgang/launcher.star b/kurtosis/src/services/blutgang/launcher.star
index 2689cc1bf..6247af4b8 100644
--- a/kurtosis/src/services/blutgang/launcher.star
+++ b/kurtosis/src/services/blutgang/launcher.star
@@ -14,9 +14,9 @@ BLUTGANG_CONFIG_MOUNT_DIRPATH_ON_SERVICE = "/config"
 IMAGE_NAME = "makemake1337/blutgang:latest"
 
 # The min/max CPU/memory that blutgang can use
-MIN_CPU = 1000
+MIN_CPU = 0
 MAX_CPU = 8000
-MIN_MEMORY = 1024
+MIN_MEMORY = 0
 MAX_MEMORY = 8096
 
 USED_PORTS = {
diff --git a/mod/beacon/blockchain/execution_engine.go b/mod/beacon/blockchain/execution_engine.go
index 0566490ed..9d06ddfbf 100644
--- a/mod/beacon/blockchain/execution_engine.go
+++ b/mod/beacon/blockchain/execution_engine.go
@@ -24,16 +24,18 @@ import (
 	"context"
 	"time"
 
+	payloadtime "github.com/berachain/beacon-kit/mod/beacon/payload-time"
+	"github.com/berachain/beacon-kit/mod/config/pkg/spec"
 	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
 )
 
 // sendPostBlockFCU sends a forkchoice update to the execution client.
 func (s *Service[
-	_, BeaconBlockT, _, _, BeaconStateT, _, _, _, _, _,
+	_, ConsensusBlockT, _, _, _, BeaconStateT, _, _, _, _, _,
 ]) sendPostBlockFCU(
 	ctx context.Context,
 	st BeaconStateT,
-	blk BeaconBlockT,
+	blk ConsensusBlockT,
 ) {
 	lph, err := st.GetLatestExecutionPayloadHeader()
 	if err != nil {
@@ -54,18 +56,19 @@ func (s *Service[
 // sendNextFCUWithAttributes sends a forkchoice update to the execution
 // client with attributes.
 func (s *Service[
-	_, BeaconBlockT, _, _, BeaconStateT,
+	_, ConsensusBlockT, _, _, _, BeaconStateT,
 	_, _, ExecutionPayloadHeaderT, _, _,
 ]) sendNextFCUWithAttributes(
 	ctx context.Context,
 	st BeaconStateT,
-	blk BeaconBlockT,
+	blk ConsensusBlockT,
 	lph ExecutionPayloadHeaderT,
 ) {
-	var err error
+	beaconBlk := blk.GetBeaconBlock()
+
 	stCopy := st.Copy()
-	if _, err = s.stateProcessor.ProcessSlots(
-		stCopy, blk.GetSlot()+1,
+	if _, err := s.stateProcessor.ProcessSlots(
+		stCopy, beaconBlk.GetSlot()+1,
 	); err != nil {
 		s.logger.Error(
 			"failed to process slots in non-optimistic payload",
@@ -74,12 +77,28 @@ func (s *Service[
 		return
 	}
 
-	prevBlockRoot := blk.HashTreeRoot()
-	if _, err = s.localBuilder.RequestPayloadAsync(
+	nextPayloadTime := payloadtime.Next(
+		blk.GetConsensusTime(),
+		lph.GetTimestamp(),
+		true, // buildOptimistically
+	).Unwrap()
+
+	// We set timestamp check on Bartio for backward compatibility reasons
+	// TODO: drop this we drop other Bartio special cases.
+	if s.chainSpec.DepositEth1ChainID() == spec.BartioChainID {
+		nextPayloadTime = max(
+			//#nosec:G701
+			uint64(time.Now().Unix()+1),
+			uint64((lph.GetTimestamp() + 1)),
+		)
+	}
+
+	prevBlockRoot := beaconBlk.HashTreeRoot()
+	if _, err := s.localBuilder.RequestPayloadAsync(
 		ctx,
 		stCopy,
-		blk.GetSlot()+1,
-		s.calculateNextTimestamp(blk),
+		beaconBlk.GetSlot()+1,
+		nextPayloadTime,
 		prevBlockRoot,
 		lph.GetBlockHash(),
 		lph.GetParentHash(),
@@ -95,13 +114,15 @@ func (s *Service[
 // sendNextFCUWithoutAttributes sends a forkchoice update to the
 // execution client without attributes.
 func (s *Service[
-	_, BeaconBlockT, _, _, _, _, _,
+	_, ConsensusBlockT, _, _, _, _, _, _,
 	ExecutionPayloadHeaderT, _, PayloadAttributesT,
 ]) sendNextFCUWithoutAttributes(
 	ctx context.Context,
-	blk BeaconBlockT,
+	blk ConsensusBlockT,
 	lph ExecutionPayloadHeaderT,
 ) {
+	beaconBlk := blk.GetBeaconBlock()
+
 	if _, _, err := s.executionEngine.NotifyForkchoiceUpdate(
 		ctx,
 		// TODO: Switch to New().
@@ -112,7 +133,7 @@ func (s *Service[
 				SafeBlockHash:      lph.GetParentHash(),
 				FinalizedBlockHash: lph.GetParentHash(),
 			},
-			s.chainSpec.ActiveForkVersionForSlot(blk.GetSlot()),
+			s.chainSpec.ActiveForkVersionForSlot(beaconBlk.GetSlot()),
 		),
 	); err != nil {
 		s.logger.Error(
@@ -121,18 +142,3 @@ func (s *Service[
 		)
 	}
 }
-
-// calculateNextTimestamp calculates the next timestamp for an execution
-// payload.
-//
-// TODO: This is hood and needs to be improved.
-func (s *Service[
-	_, BeaconBlockT, _, _, _, _, _, _, _, _,
-]) calculateNextTimestamp(blk BeaconBlockT) uint64 {
-	//#nosec:G701 // not an issue in practice.
-	return max(
-		uint64(time.Now().Unix()+
-			int64(s.chainSpec.TargetSecondsPerEth1Block())),
-		uint64(blk.GetBody().GetExecutionPayload().GetTimestamp()+1),
-	)
-}
diff --git a/mod/beacon/blockchain/payload.go b/mod/beacon/blockchain/payload.go
index 22d7eb1e2..2398f07a2 100644
--- a/mod/beacon/blockchain/payload.go
+++ b/mod/beacon/blockchain/payload.go
@@ -22,14 +22,13 @@ package blockchain
 
 import (
 	"context"
-	"time"
 
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 )
 
 // forceStartupHead sends a force head FCU to the execution client.
 func (s *Service[
-	_, _, _, _, BeaconStateT, _, _, _, _, _,
+	_, _, _, _, _, BeaconStateT, _, _, _, _, _,
 ]) forceStartupHead(
 	ctx context.Context,
 	st BeaconStateT,
@@ -57,17 +56,20 @@ func (s *Service[
 // handleRebuildPayloadForRejectedBlock handles the case where the incoming
 // block was rejected and we need to rebuild the payload for the current slot.
 func (s *Service[
-	_, _, _, _, BeaconStateT, _, _, _, _, _,
+	_, _, _, _, _, BeaconStateT, _, _, _, _, _,
 ]) handleRebuildPayloadForRejectedBlock(
 	ctx context.Context,
 	st BeaconStateT,
+	nextPayloadTimestamp math.U64,
 ) {
-	if pErr := s.rebuildPayloadForRejectedBlock(
-		ctx, st,
-	); pErr != nil {
+	if err := s.rebuildPayloadForRejectedBlock(
+		ctx,
+		st,
+		nextPayloadTimestamp,
+	); err != nil {
 		s.logger.Error(
 			"failed to rebuild payload for nil block",
-			"error", pErr,
+			"error", err,
 		)
 	}
 }
@@ -80,16 +82,12 @@ func (s *Service[
 // rejected the incoming block and it would be unsafe to use any
 // information from it.
 func (s *Service[
-	_, _, _, _, BeaconStateT, _, _, ExecutionPayloadHeaderT, _, _,
+	_, _, _, _, _, BeaconStateT, _, _, ExecutionPayloadHeaderT, _, _,
 ]) rebuildPayloadForRejectedBlock(
 	ctx context.Context,
 	st BeaconStateT,
+	nextPayloadTimestamp math.U64,
 ) error {
-	var (
-		lph  ExecutionPayloadHeaderT
-		slot math.Slot
-	)
-
 	s.logger.Info("Rebuilding payload for rejected block ⏳ ")
 
 	// In order to rebuild a payload for the current slot, we need to know the
@@ -111,7 +109,7 @@ func (s *Service[
 
 	// We need to get the *last* finalized execution payload, thus
 	// the BeaconState that was passed in must be `unmodified`.
-	lph, err = st.GetLatestExecutionPayloadHeader()
+	lph, err := st.GetLatestExecutionPayloadHeader()
 	if err != nil {
 		return err
 	}
@@ -122,12 +120,7 @@ func (s *Service[
 		st,
 		// We are rebuilding for the current slot.
 		stateSlot,
-		// TODO: this is hood as fuck.
-		max(
-			//#nosec:G701
-			uint64(time.Now().Unix()+1),
-			uint64((lph.GetTimestamp()+1)),
-		),
+		nextPayloadTimestamp.Unwrap(),
 		// We set the parent root to the previous block root.
 		latestHeader.HashTreeRoot(),
 		// We set the head of our chain to the previous finalized block.
@@ -137,23 +130,29 @@ func (s *Service[
 		// and possibly should be made more explicit later on.
 		lph.GetParentHash(),
 	); err != nil {
-		s.metrics.markRebuildPayloadForRejectedBlockFailure(slot, err)
+		s.metrics.markRebuildPayloadForRejectedBlockFailure(stateSlot, err)
 		return err
 	}
-	s.metrics.markRebuildPayloadForRejectedBlockSuccess(slot)
+	s.metrics.markRebuildPayloadForRejectedBlockSuccess(stateSlot)
 	return nil
 }
 
 // handleOptimisticPayloadBuild handles optimistically
 // building for the next slot.
 func (s *Service[
-	_, BeaconBlockT, _, _, BeaconStateT, _, _, _, _, _,
+	_, _, BeaconBlockT, _, _, BeaconStateT, _, _, _, _, _,
 ]) handleOptimisticPayloadBuild(
 	ctx context.Context,
 	st BeaconStateT,
 	blk BeaconBlockT,
+	nextPayloadTimestamp math.U64,
 ) {
-	if err := s.optimisticPayloadBuild(ctx, st, blk); err != nil {
+	if err := s.optimisticPayloadBuild(
+		ctx,
+		st,
+		blk,
+		nextPayloadTimestamp,
+	); err != nil {
 		s.logger.Error(
 			"Failed to build optimistic payload",
 			"for_slot", (blk.GetSlot() + 1).Base10(),
@@ -164,11 +163,12 @@ func (s *Service[
 
 // optimisticPayloadBuild builds a payload for the next slot.
 func (s *Service[
-	_, BeaconBlockT, _, _, BeaconStateT, _, _, _, _, _,
+	_, _, BeaconBlockT, _, _, BeaconStateT, _, _, _, _, _,
 ]) optimisticPayloadBuild(
 	ctx context.Context,
 	st BeaconStateT,
 	blk BeaconBlockT,
+	nextPayloadTimestamp math.U64,
 ) error {
 	// We are building for the next slot, so we increment the slot relative
 	// to the block we just processed.
@@ -180,9 +180,7 @@ func (s *Service[
 	)
 
 	// We process the slot to update any RANDAO values.
-	if _, err := s.stateProcessor.ProcessSlots(
-		st, slot,
-	); err != nil {
+	if _, err := s.stateProcessor.ProcessSlots(st, slot); err != nil {
 		return err
 	}
 
@@ -191,12 +189,7 @@ func (s *Service[
 	if _, err := s.localBuilder.RequestPayloadAsync(
 		ctx, st,
 		slot,
-		// TODO: this is hood as fuck.
-		max(
-			//#nosec:G701
-			uint64(time.Now().Unix()+int64(s.chainSpec.TargetSecondsPerEth1Block())),
-			uint64((payload.GetTimestamp()+1)),
-		),
+		nextPayloadTimestamp.Unwrap(),
 		// The previous block root is simply the root of the block we just
 		// processed.
 		blk.HashTreeRoot(),
diff --git a/mod/beacon/blockchain/process.go b/mod/beacon/blockchain/process.go
index d581f18a1..8c60e3397 100644
--- a/mod/beacon/blockchain/process.go
+++ b/mod/beacon/blockchain/process.go
@@ -31,7 +31,7 @@ import (
 // ProcessGenesisData processes the genesis state and initializes the beacon
 // state.
 func (s *Service[
-	_, _, _, _, _, _, _, _, GenesisT, _,
+	_, _, _, _, _, _, _, _, _, GenesisT, _,
 ]) ProcessGenesisData(
 	ctx context.Context,
 	genesisData GenesisT,
@@ -47,21 +47,18 @@ func (s *Service[
 // ProcessBeaconBlock receives an incoming beacon block, it first validates
 // and then processes the block.
 func (s *Service[
-	_, BeaconBlockT, _, _, _, _, _, _, _, _,
+	_, ConsensusBlockT, _, _, _, _, _, _, _, _, _,
 ]) ProcessBeaconBlock(
 	ctx context.Context,
-	blk BeaconBlockT,
+	blk ConsensusBlockT,
 ) (transition.ValidatorUpdates, error) {
+	beaconBlk := blk.GetBeaconBlock()
+
 	// If the block is nil, exit early.
-	if blk.IsNil() {
+	if beaconBlk.IsNil() {
 		return nil, ErrNilBlk
 	}
 
-	// We set `OptimisticEngine` to true since this is called during
-	// FinalizeBlock. We want to assume the payload is valid. If it
-	// ends up not being valid later, the node will simply AppHash,
-	// which is completely fine. This means we were syncing from a
-	// bad peer, and we would likely AppHash anyways.
 	st := s.storageBackend.StateFromContext(ctx)
 	valUpdates, err := s.executeStateTransition(ctx, st, blk)
 	if err != nil {
@@ -72,7 +69,7 @@ func (s *Service[
 	// return an error. It is safe to use the slot off of the beacon block
 	// since it has been verified as correct already.
 	if !s.storageBackend.AvailabilityStore().IsDataAvailable(
-		ctx, blk.GetSlot(), blk.GetBody(),
+		ctx, beaconBlk.GetSlot(), beaconBlk.GetBody(),
 	) {
 		return nil, ErrDataNotAvailable
 	}
@@ -84,7 +81,7 @@ func (s *Service[
 	// via ticker later.
 	if err = s.dispatcher.Publish(
 		async.NewEvent(
-			ctx, async.BeaconBlockFinalized, blk,
+			ctx, async.BeaconBlockFinalized, beaconBlk,
 		),
 	); err != nil {
 		return nil, err
@@ -97,18 +94,25 @@ func (s *Service[
 
 // executeStateTransition runs the stf.
 func (s *Service[
-	_, BeaconBlockT, _, _, BeaconStateT, _, _, _, _, _,
+	_, ConsensusBlockT, _, _, _, BeaconStateT, _, _, _, _, _,
 ]) executeStateTransition(
 	ctx context.Context,
 	st BeaconStateT,
-	blk BeaconBlockT,
+	blk ConsensusBlockT,
 ) (transition.ValidatorUpdates, error) {
 	startTime := time.Now()
 	defer s.metrics.measureStateTransitionDuration(startTime)
 	valUpdates, err := s.stateProcessor.Transition(
 		&transition.Context{
-			Context:          ctx,
+			Context: ctx,
+
+			// We set `OptimisticEngine` to true since this is called during
+			// FinalizeBlock. We want to assume the payload is valid. If it
+			// ends up not being valid later, the node will simply AppHash,
+			// which is completely fine. This means we were syncing from a
+			// bad peer, and we would likely AppHash anyways.
 			OptimisticEngine: true,
+
 			// When we are NOT synced to the tip, process proposal
 			// does NOT get called and thus we must ensure that
 			// NewPayload is called to get the execution
@@ -123,9 +127,12 @@ func (s *Service[
 			// the "verification aspect" of this NewPayload call is
 			// actually irrelevant at this point.
 			SkipPayloadVerification: false,
+
+			ProposerAddress: blk.GetProposerAddress(),
+			ConsensusTime:   blk.GetConsensusTime(),
 		},
 		st,
-		blk,
+		blk.GetBeaconBlock(),
 	)
 	return valUpdates, err
 }
diff --git a/mod/beacon/blockchain/receive.go b/mod/beacon/blockchain/receive.go
index 33b1f7ea1..e0b88db85 100644
--- a/mod/beacon/blockchain/receive.go
+++ b/mod/beacon/blockchain/receive.go
@@ -24,6 +24,7 @@ import (
 	"context"
 	"time"
 
+	payloadtime "github.com/berachain/beacon-kit/mod/beacon/payload-time"
 	engineerrors "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/errors"
 	"github.com/berachain/beacon-kit/mod/errors"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/transition"
@@ -32,11 +33,16 @@ import (
 // VerifyIncomingBlock verifies the state root of an incoming block
 // and logs the process.
 func (s *Service[
-	_, BeaconBlockT, _, _, _, _, _, _, _, _,
+	_, ConsensusBlockT, BeaconBlockT, _, _, _, _, _, ExecutionPayloadHeaderT, _, _,
 ]) VerifyIncomingBlock(
 	ctx context.Context,
-	blk BeaconBlockT,
+	blk ConsensusBlockT,
 ) error {
+	var (
+		beaconBlk     = blk.GetBeaconBlock()
+		consensusTime = blk.GetConsensusTime()
+	)
+
 	// Grab a copy of the state to verify the incoming block.
 	preState := s.storageBackend.StateFromContext(ctx)
 
@@ -47,7 +53,7 @@ func (s *Service[
 	s.forceStartupSyncOnce.Do(func() { s.forceStartupHead(ctx, preState) })
 
 	// If the block is nil or a nil pointer, exit early.
-	if blk.IsNil() {
+	if beaconBlk.IsNil() {
 		s.logger.Warn(
 			"Aborting block verification - beacon block not found in proposal",
 		)
@@ -56,29 +62,41 @@ func (s *Service[
 
 	s.logger.Info(
 		"Received incoming beacon block",
-		"state_root", blk.GetStateRoot(), "slot", blk.GetSlot(),
+		"state_root", beaconBlk.GetStateRoot(), "slot", beaconBlk.GetSlot(),
 	)
 
-	// We purposefully make a copy of the BeaconState in orer
+	// We purposefully make a copy of the BeaconState in order
 	// to avoid modifying the underlying state, for the event in which
 	// we have to rebuild a payload for this slot again, if we do not agree
 	// with the incoming block.
 	postState := preState.Copy()
 
 	// Verify the state root of the incoming block.
-	if err := s.verifyStateRoot(
-		ctx, postState, blk,
-	); err != nil {
+	if err := s.verifyStateRoot(ctx, postState, blk); err != nil {
 		s.logger.Error(
 			"Rejecting incoming beacon block ❌ ",
 			"state_root",
-			blk.GetStateRoot(),
+			beaconBlk.GetStateRoot(),
 			"reason",
 			err,
 		)
 
 		if s.shouldBuildOptimisticPayloads() {
-			go s.handleRebuildPayloadForRejectedBlock(ctx, preState)
+			var lph ExecutionPayloadHeaderT
+			lph, err = preState.GetLatestExecutionPayloadHeader()
+			if err != nil {
+				return err
+			}
+
+			go s.handleRebuildPayloadForRejectedBlock(
+				ctx,
+				preState,
+				payloadtime.Next(
+					consensusTime,
+					lph.GetTimestamp(),
+					true, // buildOptimistically
+				),
+			)
 		}
 
 		return err
@@ -87,11 +105,25 @@ func (s *Service[
 	s.logger.Info(
 		"State root verification succeeded - accepting incoming beacon block",
 		"state_root",
-		blk.GetStateRoot(),
+		beaconBlk.GetStateRoot(),
 	)
 
 	if s.shouldBuildOptimisticPayloads() {
-		go s.handleOptimisticPayloadBuild(ctx, postState, blk)
+		lph, err := postState.GetLatestExecutionPayloadHeader()
+		if err != nil {
+			return err
+		}
+
+		go s.handleOptimisticPayloadBuild(
+			ctx,
+			postState,
+			beaconBlk,
+			payloadtime.Next(
+				consensusTime,
+				lph.GetTimestamp(),
+				true, // buildOptimistically
+			),
+		)
 	}
 
 	return nil
@@ -99,15 +131,15 @@ func (s *Service[
 
 // verifyStateRoot verifies the state root of an incoming block.
 func (s *Service[
-	_, BeaconBlockT, _, _, BeaconStateT, _, _, _, _, _,
+	_, ConsensusBlockT, _, _, _, BeaconStateT, _, _, _, _, _,
 ]) verifyStateRoot(
 	ctx context.Context,
 	st BeaconStateT,
-	blk BeaconBlockT,
+	blk ConsensusBlockT,
 ) error {
 	startTime := time.Now()
 	defer s.metrics.measureStateRootVerificationTime(startTime)
-	if _, err := s.stateProcessor.Transition(
+	_, err := s.stateProcessor.Transition(
 		// We run with a non-optimistic engine here to ensure
 		// that the proposer does not try to push through a bad block.
 		&transition.Context{
@@ -116,26 +148,27 @@ func (s *Service[
 			SkipPayloadVerification: false,
 			SkipValidateResult:      false,
 			SkipValidateRandao:      false,
+			ProposerAddress:         blk.GetProposerAddress(),
+			ConsensusTime:           blk.GetConsensusTime(),
 		},
-		st, blk,
-	); errors.Is(err, engineerrors.ErrAcceptedPayloadStatus) {
+		st, blk.GetBeaconBlock(),
+	)
+	if errors.Is(err, engineerrors.ErrAcceptedPayloadStatus) {
 		// It is safe for the validator to ignore this error since
 		// the state transition will enforce that the block is part
 		// of the canonical chain.
 		//
 		// TODO: this is only true because we are assuming SSF.
 		return nil
-	} else if err != nil {
-		return err
 	}
 
-	return nil
+	return err
 }
 
 // shouldBuildOptimisticPayloads returns true if optimistic
 // payload builds are enabled.
 func (s *Service[
-	_, _, _, _, _, _, _, _, _, _,
+	_, _, _, _, _, _, _, _, _, _, _,
 ]) shouldBuildOptimisticPayloads() bool {
 	return s.optimisticPayloadBuilds && s.localBuilder.Enabled()
 }
diff --git a/mod/beacon/blockchain/service.go b/mod/beacon/blockchain/service.go
index f399a12b5..c340eecdf 100644
--- a/mod/beacon/blockchain/service.go
+++ b/mod/beacon/blockchain/service.go
@@ -34,6 +34,7 @@ import (
 // Service is the blockchain service.
 type Service[
 	AvailabilityStoreT AvailabilityStore[BeaconBlockBodyT],
+	ConsensusBlockT ConsensusBlock[BeaconBlockT],
 	BeaconBlockT BeaconBlock[BeaconBlockBodyT],
 	BeaconBlockBodyT BeaconBlockBody[ExecutionPayloadT],
 	BeaconBlockHeaderT BeaconBlockHeader,
@@ -81,9 +82,9 @@ type Service[
 	forceStartupSyncOnce *sync.Once
 
 	// subFinalBlkReceived is a channel holding FinalBeaconBlockReceived events.
-	subFinalBlkReceived chan async.Event[BeaconBlockT]
+	subFinalBlkReceived chan async.Event[ConsensusBlockT]
 	// subBlockReceived is a channel holding BeaconBlockReceived events.
-	subBlockReceived chan async.Event[BeaconBlockT]
+	subBlockReceived chan async.Event[ConsensusBlockT]
 	// subGenDataReceived is a channel holding GenesisDataReceived events.
 	subGenDataReceived chan async.Event[GenesisT]
 }
@@ -91,6 +92,7 @@ type Service[
 // NewService creates a new validator service.
 func NewService[
 	AvailabilityStoreT AvailabilityStore[BeaconBlockBodyT],
+	ConsensusBlockT ConsensusBlock[BeaconBlockT],
 	BeaconBlockT BeaconBlock[BeaconBlockBodyT],
 	BeaconBlockBodyT BeaconBlockBody[ExecutionPayloadT],
 	BeaconBlockHeaderT BeaconBlockHeader,
@@ -123,12 +125,14 @@ func NewService[
 	telemetrySink TelemetrySink,
 	optimisticPayloadBuilds bool,
 ) *Service[
-	AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT,
+	AvailabilityStoreT,
+	ConsensusBlockT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT,
 	BeaconStateT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT,
 	GenesisT, PayloadAttributesT,
 ] {
 	return &Service[
-		AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT,
+		AvailabilityStoreT,
+		ConsensusBlockT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT,
 		BeaconStateT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT,
 		GenesisT, PayloadAttributesT,
 	]{
@@ -142,15 +146,15 @@ func NewService[
 		metrics:                 newChainMetrics(telemetrySink),
 		optimisticPayloadBuilds: optimisticPayloadBuilds,
 		forceStartupSyncOnce:    new(sync.Once),
-		subFinalBlkReceived:     make(chan async.Event[BeaconBlockT]),
-		subBlockReceived:        make(chan async.Event[BeaconBlockT]),
+		subFinalBlkReceived:     make(chan async.Event[ConsensusBlockT]),
+		subBlockReceived:        make(chan async.Event[ConsensusBlockT]),
 		subGenDataReceived:      make(chan async.Event[GenesisT]),
 	}
 }
 
 // Name returns the name of the service.
 func (s *Service[
-	_, _, _, _, _, _, _, _, _, _,
+	_, _, _, _, _, _, _, _, _, _, _,
 ]) Name() string {
 	return "blockchain"
 }
@@ -159,7 +163,7 @@ func (s *Service[
 // BeaconBlockReceived, and FinalBeaconBlockReceived events, and begins
 // the main event loop to handle them accordingly.
 func (s *Service[
-	_, _, _, _, _, _, _, _, _, _,
+	_, _, _, _, _, _, _, _, _, _, _,
 ]) Start(ctx context.Context) error {
 	if err := s.dispatcher.Subscribe(
 		async.GenesisDataReceived, s.subGenDataReceived,
@@ -186,7 +190,7 @@ func (s *Service[
 
 // eventLoop listens for events and handles them accordingly.
 func (s *Service[
-	_, BeaconBlockT, _, _, _, _, _, _, GenesisT, _,
+	_, _, _, _, _, _, _, _, _, _, _,
 ]) eventLoop(ctx context.Context) {
 	for {
 		select {
@@ -209,7 +213,7 @@ func (s *Service[
 // handleGenDataReceived processes the genesis data received and emits a
 // GenesisDataProcessed event containing the resulting validator updates.
 func (s *Service[
-	_, _, _, _, _, _, _, _, GenesisT, _,
+	_, _, _, _, _, _, _, _, _, GenesisT, _,
 ]) handleGenDataReceived(msg async.Event[GenesisT]) {
 	var (
 		valUpdates transition.ValidatorUpdates
@@ -245,9 +249,9 @@ func (s *Service[
 // handleBeaconBlockReceived emits a BeaconBlockVerified event with the error
 // result from VerifyIncomingBlock.
 func (s *Service[
-	_, BeaconBlockT, _, _, _, _, _, _, _, _,
+	_, ConsensusBlockT, _, _, _, _, _, _, _, _, _,
 ]) handleBeaconBlockReceived(
-	msg async.Event[BeaconBlockT],
+	msg async.Event[ConsensusBlockT],
 ) {
 	// If the block is nil, exit early.
 	if msg.Error() != nil {
@@ -255,13 +259,13 @@ func (s *Service[
 		return
 	}
 
-	// emit a BeaconBlockVerified event with the error result from \
-	// VerifyIncomingBlock
+	// emit a BeaconBlockVerified event with
+	// the error result from VerifyIncomingBlock
 	if err := s.dispatcher.Publish(
 		async.NewEvent(
 			msg.Context(),
 			async.BeaconBlockVerified,
-			msg.Data(),
+			msg.Data().GetBeaconBlock(),
 			s.VerifyIncomingBlock(msg.Context(), msg.Data()),
 		),
 	); err != nil {
@@ -276,9 +280,9 @@ func (s *Service[
 // a FinalValidatorUpdatesProcessed event containing the resulting validator
 // updates.
 func (s *Service[
-	_, BeaconBlockT, _, _, _, _, _, _, _, _,
+	_, ConsensusBlockT, _, _, _, _, _, _, _, _, _,
 ]) handleBeaconBlockFinalization(
-	msg async.Event[BeaconBlockT],
+	msg async.Event[ConsensusBlockT],
 ) {
 	var (
 		valUpdates  transition.ValidatorUpdates
diff --git a/mod/beacon/blockchain/types.go b/mod/beacon/blockchain/types.go
index 3a5003301..0338c68f7 100644
--- a/mod/beacon/blockchain/types.go
+++ b/mod/beacon/blockchain/types.go
@@ -42,6 +42,18 @@ type AvailabilityStore[BeaconBlockBodyT any] interface {
 	) bool
 }
 
+type ConsensusBlock[BeaconBlockT any] interface {
+	GetBeaconBlock() BeaconBlockT
+
+	// GetProposerAddress returns the address of the validator
+	// selected by consensus to propose the block
+	GetProposerAddress() []byte
+
+	// GetConsensusTime returns the timestamp of current consensus request.
+	// It is used to build next payload and to validate currentpayload.
+	GetConsensusTime() math.U64
+}
+
 // BeaconBlock represents a beacon block interface.
 type BeaconBlock[BeaconBlockBodyT any] interface {
 	constraints.SSZMarshallableRootable
diff --git a/mod/beacon/go.mod b/mod/beacon/go.mod
index ac060feb4..cdd58bade 100644
--- a/mod/beacon/go.mod
+++ b/mod/beacon/go.mod
@@ -2,12 +2,16 @@ module github.com/berachain/beacon-kit/mod/beacon
 
 go 1.23.0
 
+replace google.golang.org/genproto => google.golang.org/genproto v0.0.0-20240711142825-46eb208f015d
+
 require (
-	github.com/berachain/beacon-kit/mod/async v0.0.0-20240816230528-f52c938c20cc
+	github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8
+	github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad
 	github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0
 	github.com/berachain/beacon-kit/mod/log v0.0.0-20240809202957-3e3f169ad720
-	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240820191615-398849c34954
+	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570
+	github.com/stretchr/testify v1.9.0
 	golang.org/x/sync v0.8.0
 )
 
@@ -16,7 +20,7 @@ require (
 	github.com/Microsoft/go-winio v0.6.2 // indirect
 	github.com/VictoriaMetrics/fastcache v1.12.2 // indirect
 	github.com/beorn7/perks v1.0.1 // indirect
-	github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240703145037-b5612ab256db // indirect
+	github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df // indirect
 	github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e // indirect
 	github.com/bits-and-blooms/bitset v1.13.0 // indirect
 	github.com/btcsuite/btcd/btcec/v2 v2.3.3 // indirect
@@ -27,21 +31,31 @@ require (
 	github.com/cockroachdb/pebble v1.1.1 // indirect
 	github.com/cockroachdb/redact v1.1.5 // indirect
 	github.com/cockroachdb/tokenbucket v0.0.0-20230807174530-cc333fc44b06 // indirect
+	github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4 // indirect
+	github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 // indirect
 	github.com/consensys/bavard v0.1.13 // indirect
 	github.com/consensys/gnark-crypto v0.13.0 // indirect
+	github.com/cosmos/gogoproto v1.7.0 // indirect
 	github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a // indirect
 	github.com/crate-crypto/go-kzg-4844 v1.1.0 // indirect
+	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
 	github.com/deckarep/golang-set/v2 v2.6.0 // indirect
 	github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
 	github.com/ethereum/c-kzg-4844 v1.0.3 // indirect
 	github.com/ethereum/go-ethereum v1.14.7 // indirect
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 // indirect
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
+	github.com/go-kit/log v0.2.1 // indirect
+	github.com/go-logfmt/logfmt v0.6.0 // indirect
 	github.com/go-ole/go-ole v1.3.0 // indirect
+	github.com/goccy/go-json v0.10.3 // indirect
 	github.com/gofrs/flock v0.12.1 // indirect
 	github.com/gogo/protobuf v1.3.2 // indirect
+	github.com/golang/protobuf v1.5.4 // indirect
 	github.com/golang/snappy v0.0.5-0.20220116011046-fa5810519dcb // indirect
+	github.com/google/go-cmp v0.6.0 // indirect
 	github.com/google/gofuzz v1.2.0 // indirect
 	github.com/gorilla/websocket v1.5.3 // indirect
 	github.com/holiman/bloomfilter/v2 v2.0.3 // indirect
@@ -56,8 +70,11 @@ require (
 	github.com/mitchellh/mapstructure v1.5.0 // indirect
 	github.com/mmcloughlin/addchain v0.4.0 // indirect
 	github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect
+	github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a // indirect
 	github.com/olekukonko/tablewriter v0.0.5 // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
+	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
 	github.com/prometheus/client_golang v1.20.1 // indirect
 	github.com/prometheus/client_model v0.6.1 // indirect
 	github.com/prometheus/common v0.55.0 // indirect
@@ -66,6 +83,7 @@ require (
 	github.com/prysmaticlabs/gohashtree v0.0.4-beta.0.20240624100937-73632381301b // indirect
 	github.com/rivo/uniseg v0.4.7 // indirect
 	github.com/rogpeppe/go-internal v1.12.0 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
 	github.com/shirou/gopsutil v3.21.11+incompatible // indirect
 	github.com/supranational/blst v0.3.13 // indirect
 	github.com/syndtr/goleveldb v1.0.1-0.20220721030215-126854af5e6d // indirect
@@ -73,12 +91,15 @@ require (
 	github.com/tklauser/numcpus v0.8.0 // indirect
 	github.com/umbracle/fastrlp v0.1.0 // indirect
 	github.com/yusufpapurcu/wmi v1.2.4 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	golang.org/x/net v0.30.0 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
+	google.golang.org/grpc v1.65.0 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
+	gopkg.in/yaml.v3 v3.0.1 // indirect
 	rsc.io/tmplfunc v0.0.3 // indirect
 )
diff --git a/mod/beacon/go.sum b/mod/beacon/go.sum
index 5764a1a9d..9e9ff02d8 100644
--- a/mod/beacon/go.sum
+++ b/mod/beacon/go.sum
@@ -8,10 +8,12 @@ github.com/allegro/bigcache v1.2.1-0.20190218064605-e24eb225f156 h1:eMwmnE/GDgah
 github.com/allegro/bigcache v1.2.1-0.20190218064605-e24eb225f156/go.mod h1:Cb/ax3seSYIx7SuZdm2G2xzfwmv3TPSk2ucNfQESPXM=
 github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=
 github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=
-github.com/berachain/beacon-kit/mod/async v0.0.0-20240816230528-f52c938c20cc h1:wImM7/CL8FOZp9O7Q104rgJjchyZ9VSyCx6c2YhXRs0=
-github.com/berachain/beacon-kit/mod/async v0.0.0-20240816230528-f52c938c20cc/go.mod h1:CEFntRxY0/vpr5Rt/++/EfkwPaFWfOr677fjFDO8dqA=
-github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240703145037-b5612ab256db h1:vGczI1vJ6s86tSDS4tsllzlWZUVZ42xZ710GoHMd4to=
-github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240703145037-b5612ab256db/go.mod h1:rbvfJqTKUIckels2AlWy+XuG+UGnegoFQuHC+TUg+zA=
+github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 h1:04G7REWDoTzty7rWlTBrmdmcFALoKYluUhz5NXeqaiM=
+github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8/go.mod h1:3wR01SglBZ+HvDvhbugz/Mxem22JUThJRwo2Ec8Q0No=
+github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df h1:mnD1LKqDQ0n+OFdDqOuvKaEiUKRJzsO4V0wyyn/gJYg=
+github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df/go.mod h1:bTFB4Rdvm7D/WdwPYkqQ+8T0XOMBv0pzXfp1E46BFX8=
+github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad h1:A71t/ENiUmIAbeosMeoV2Re1cSG1OJHwsDlRGjmRGy8=
+github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad/go.mod h1:sWT7sNyE7fyNtn0EwxBHRNsEy6NlaGFDbPpQUkbrGvY=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720 h1:rVltwwt4JAhpvqeRDZ8J07e9XM+jzfDCJEghPA4r5lg=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720/go.mod h1:kGxAesqTkt75+QYQ73O9I5PqAicSL9JGh5wypiWgb8I=
 github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0 h1:kCSrkb/uVXfMKJPKjf0c7nlJkwn5cNwMxtzRW4zNq2A=
@@ -20,12 +22,14 @@ github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1
 github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e/go.mod h1:7/SXz8S5VpFl2thcKuBdu1OId+SgI1o4N+S1FB92Zw8=
 github.com/berachain/beacon-kit/mod/log v0.0.0-20240809202957-3e3f169ad720 h1:qfFjDx7w3uU+zMw5HrghiKPZunxapgCiNHI1XqqtgmA=
 github.com/berachain/beacon-kit/mod/log v0.0.0-20240809202957-3e3f169ad720/go.mod h1:BilVBmqKhC4GXYCaIs8QnKaR14kpn3YmF5uYBdayF9I=
-github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240820191615-398849c34954 h1:uNBQB9BcCdLrUA337DJHucrx97KobLsdWNkMA6QFcCg=
-github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240820191615-398849c34954/go.mod h1:Mrq1qol8vbkgZp2IMPFwngg75qE3k9IvT2MouBEhuus=
+github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570 h1:w0Gkg31VQRFDv0EJjYgVtlpza7kSaJq7U28zxZjfZeE=
+github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570/go.mod h1:Mrq1qol8vbkgZp2IMPFwngg75qE3k9IvT2MouBEhuus=
 github.com/bits-and-blooms/bitset v1.13.0 h1:bAQ9OPNFYbGHV6Nez0tmNI0RiEu7/hxlYJRUA0wFAVE=
 github.com/bits-and-blooms/bitset v1.13.0/go.mod h1:7hO7Gc7Pp1vODcmWvKMRA9BNmbv6a/7QIWpPxHddWR8=
 github.com/btcsuite/btcd/btcec/v2 v2.3.3 h1:6+iXlDKE8RMtKsvK0gshlXIuPbyWM/h84Ensb7o3sC0=
 github.com/btcsuite/btcd/btcec/v2 v2.3.3/go.mod h1:zYzJ8etWJQIv1Ogk7OzpWjowwOdXY1W/17j2MW85J04=
+github.com/btcsuite/btcd/btcutil v1.1.5 h1:+wER79R5670vs/ZusMTF1yTcRYE5GUsFbdjdisflzM8=
+github.com/btcsuite/btcd/btcutil v1.1.5/go.mod h1:PSZZ4UitpLBWzxGd5VGOrLnmOjtPP/a6HaFo12zMs00=
 github.com/btcsuite/btcd/chaincfg/chainhash v1.1.0 h1:59Kx4K6lzOW5w6nFlA0v5+lk/6sjybR934QNHSJZPTQ=
 github.com/btcsuite/btcd/chaincfg/chainhash v1.1.0/go.mod h1:7SFka0XMvUgj3hfZtydOrQY2mwhPclbT2snogU7SQQc=
 github.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
@@ -48,10 +52,16 @@ github.com/cockroachdb/redact v1.1.5 h1:u1PMllDkdFfPWaNGMyLD1+so+aq3uUItthCFqzwP
 github.com/cockroachdb/redact v1.1.5/go.mod h1:BVNblN9mBWFyMyqK1k3AAiSxhvhfK2oOZZ2lK+dpvRg=
 github.com/cockroachdb/tokenbucket v0.0.0-20230807174530-cc333fc44b06 h1:zuQyyAKVxetITBuuhv3BI9cMrmStnpT18zmgmTxunpo=
 github.com/cockroachdb/tokenbucket v0.0.0-20230807174530-cc333fc44b06/go.mod h1:7nc4anLGjupUW/PeY5qiNYsdNXj7zopG+eqsS7To5IQ=
+github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4 h1:LyYO/PPHwQsnGhTNJzWfCi9xg7EEyuMORRqrQZJQjYc=
+github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4/go.mod h1:gYT9oZe8H3xTWgocfjbnOV4v7IjzaEWqM+JJO3Z3R60=
+github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 h1:dEOaTNsJrOTOSysBgAE9pK6zeNASUR6gsFW8s0zcRRU=
+github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4/go.mod h1:NDFKiBBD8HJC6QQLAoUI99YhsiRZtg2+FJWfk6A6m6o=
 github.com/consensys/bavard v0.1.13 h1:oLhMLOFGTLdlda/kma4VOJazblc7IM5y5QPd2A/YjhQ=
 github.com/consensys/bavard v0.1.13/go.mod h1:9ItSMtA/dXMAiL7BG6bqW2m3NdSEObYWoH223nGHukI=
 github.com/consensys/gnark-crypto v0.13.0 h1:VPULb/v6bbYELAPTDFINEVaMTTybV5GLxDdcjnS+4oc=
 github.com/consensys/gnark-crypto v0.13.0/go.mod h1:wKqwsieaKPThcFkHe0d0zMsbHEUWFmZcG7KBCse210o=
+github.com/cosmos/gogoproto v1.7.0 h1:79USr0oyXAbxg3rspGh/m4SWNyoz/GLaAh0QlCe2fro=
+github.com/cosmos/gogoproto v1.7.0/go.mod h1:yWChEv5IUEYURQasfyBW5ffkMHR/90hiHgbNgrtp4j0=
 github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a h1:W8mUrRp6NOVl3J+MYp5kPMoUZPp7aOYHtaua31lwRHg=
 github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a/go.mod h1:sTwzHBvIzm2RfVCGNEBZgRyjwK40bVoun3ZnGOCafNM=
 github.com/crate-crypto/go-kzg-4844 v1.1.0 h1:EN/u9k2TF6OWSHrCCDBBU6GLNMq88OspHHlMnHfoyU4=
@@ -67,14 +77,16 @@ github.com/decred/dcrd/crypto/blake256 v1.0.1 h1:7PltbUIQB7u/FfZ39+DGa/ShuMyJ5il
 github.com/decred/dcrd/crypto/blake256 v1.0.1/go.mod h1:2OfgNZ5wDpcsFmHmCK5gZTPcCXqlm2ArzUIkw9czNJo=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 h1:rpfIENRNNilwHwZeG5+P150SMrnNEcHYvcCuK6dPZSg=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0/go.mod h1:v57UDF4pDQJcEfFUCRop3lJL149eHGSe9Jvczhzjo/0=
+github.com/emicklei/dot v1.6.2 h1:08GN+DD79cy/tzN6uLCT84+2Wk9u+wvqP+Hkx/dIR8A=
+github.com/emicklei/dot v1.6.2/go.mod h1:DeV7GvQtIw4h2u73RKBkkFdvVAz0D9fzeJrgPW6gy/s=
 github.com/ethereum/c-kzg-4844 v1.0.3 h1:IEnbOHwjixW2cTvKRUlAAUOeleV7nNM/umJR+qy4WDs=
 github.com/ethereum/c-kzg-4844 v1.0.3/go.mod h1:VewdlzQmpT5QSrVhbBuGoCdFJkpaJlO1aQputP83wc0=
 github.com/ethereum/go-ethereum v1.14.7 h1:EHpv3dE8evQmpVEQ/Ne2ahB06n2mQptdwqaMNhAT29g=
 github.com/ethereum/go-ethereum v1.14.7/go.mod h1:Mq0biU2jbdmKSZoqOj29017ygFrMnB5/Rifwp980W4o=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 h1:KrE8I4reeVvf7C1tm8elRjj4BdscTYzz/WAbYyf/JI4=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0/go.mod h1:D9AJLVXSyZQXJQVk8oh1EwjISE+sJTn2duYIZC0dy3w=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
 github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
@@ -84,6 +96,10 @@ github.com/getsentry/sentry-go v0.28.1 h1:zzaSm/vHmGllRM6Tpx1492r0YDzauArdBfkJRt
 github.com/getsentry/sentry-go v0.28.1/go.mod h1:1fQZ+7l7eeJ3wYi82q5Hg8GqAPgefRq+FP/QhafYVgg=
 github.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=
 github.com/go-errors/errors v1.4.2/go.mod h1:sIVyrIiJhuEF+Pj9Ebtd6P/rEYROXFi3BopGUQ5a5Og=
+github.com/go-kit/log v0.2.1 h1:MRVx0/zhvdseW+Gza6N9rVzU/IVzaeE1SFI4raAhmBU=
+github.com/go-kit/log v0.2.1/go.mod h1:NwTd00d/i8cPZ3xOwwiv2PO5MOcx78fFErGNcVmBjv0=
+github.com/go-logfmt/logfmt v0.6.0 h1:wGYYu3uicYdqXVgoYbvnkrPVXkuLM1p1ifugDMEdRi4=
+github.com/go-logfmt/logfmt v0.6.0/go.mod h1:WYhtIu8zTZfxdn5+rREduYbwxfcBr/Vr6KEVveWlfTs=
 github.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=
 github.com/go-ole/go-ole v1.3.0 h1:Dt6ye7+vXGIKZ7Xtk4s6/xVdGDQynvom7xCFEdWr6uE=
 github.com/go-ole/go-ole v1.3.0/go.mod h1:5LS6F96DhAwUc7C+1HLexzMXY1xGRSryjyPPKW6zv78=
@@ -103,6 +119,8 @@ github.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvq
 github.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
 github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
 github.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
+github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=
+github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
 github.com/golang/snappy v0.0.4/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
 github.com/golang/snappy v0.0.5-0.20220116011046-fa5810519dcb h1:PBC98N2aIaM3XXiurYmW7fx4GZkL8feAMVq7nEjURHk=
 github.com/golang/snappy v0.0.5-0.20220116011046-fa5810519dcb/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
@@ -156,6 +174,8 @@ github.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI
 github.com/nxadm/tail v1.4.8/go.mod h1:+ncqLTQzXmGhMZNUePPaPqPvBxHAIsmXswZKocGu+AU=
 github.com/nxadm/tail v1.4.11 h1:8feyoE3OzPrcshW5/MJ4sGESc5cqmGkGCWlco4l0bqY=
 github.com/nxadm/tail v1.4.11/go.mod h1:OTaG3NK980DZzxbRq6lEuzgU+mug70nY11sMd4JXXHc=
+github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a h1:dlRvE5fWabOchtH7znfiFCcOvmIYgOeAS5ifBXBlh9Q=
+github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a/go.mod h1:hVoHR2EVESiICEMbg137etN/Lx+lSrHPTD39Z/uE+2s=
 github.com/olekukonko/tablewriter v0.0.5 h1:P2Ga83D34wi1o9J6Wh1mRuqd4mF/x/lgBS7N7AbDhec=
 github.com/olekukonko/tablewriter v0.0.5/go.mod h1:hPp6KlRPjbx+hW8ykQs1w3UBbZlj6HuIJcUGPhkA7kY=
 github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
@@ -170,6 +190,8 @@ github.com/onsi/gomega v1.17.0/go.mod h1:HnhC7FXeEQY45zxNK3PPoIUhzk/80Xly9PcubAl
 github.com/onsi/gomega v1.19.0/go.mod h1:LY+I3pBVzYsTBU1AnDwOSxaYi9WoWiqgwooUqq9yPro=
 github.com/onsi/gomega v1.33.1 h1:dsYjIxxSR755MDmKVsaFQTE22ChNBcuuTWgkUDSubOk=
 github.com/onsi/gomega v1.33.1/go.mod h1:U4R44UsT+9eLIaYRB2a5qajjtQYn0hauxvRm16AVYg0=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
 github.com/pingcap/errors v0.11.4/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
@@ -196,6 +218,8 @@ github.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUc
 github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
 github.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=
 github.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=
 github.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
@@ -223,8 +247,8 @@ github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQ
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
@@ -238,8 +262,8 @@ golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -266,16 +290,16 @@ golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
@@ -286,6 +310,10 @@ golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8T
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20220517211312-f3a8303e98df/go.mod h1:K8+ghG5WaK9qNqU5K3HdILfMLy1f3aNYFI/wnl100a8=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d h1:JU0iKnSg02Gmb5ZdV8nYsKEKsP6o/FGVWTrw4i1DA9A=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
+google.golang.org/grpc v1.65.0 h1:bs/cUb4lp1G5iImFFd3u5ixQzweKizoZJAwBNLR42lc=
+google.golang.org/grpc v1.65.0/go.mod h1:WgYC2ypjlB0EiQi6wdKixMqukr6lBc0Vo+oOgjrM5ZQ=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
 google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
@@ -294,8 +322,8 @@ google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzi
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
diff --git a/mod/beacon/payload-time/time.go b/mod/beacon/payload-time/time.go
new file mode 100644
index 000000000..737871768
--- /dev/null
+++ b/mod/beacon/payload-time/time.go
@@ -0,0 +1,72 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package payloadtime
+
+import (
+	"errors"
+	"fmt"
+
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+)
+
+// ErrTooFarInTheFuture is returned when the payload timestamp
+// in a block exceeds the time bound.
+var ErrTooFarInTheFuture = errors.New("timestamp too far in the future")
+
+func Verify(
+	consensusTime,
+	parentPayloadTimestamp,
+	payloadTimestamp math.U64,
+) error {
+	bound := max(
+		consensusTime+1,
+		parentPayloadTimestamp+1,
+	)
+	if payloadTimestamp > bound {
+		return fmt.Errorf(
+			"%w: timestamp bound: %d, got: %d",
+			ErrTooFarInTheFuture,
+			bound, payloadTimestamp,
+		)
+	}
+	return nil
+}
+
+func Next(
+	consensusTime,
+	parentPayloadTimestamp math.U64,
+	buildOptimistically bool,
+) math.U64 {
+	delta := math.U64(0)
+	if buildOptimistically {
+		// we're building a payload to be included into next block.
+		// We estimate it to be included next second. If this estimate
+		// turns out wrong (cause consensus block are finalized faster or
+		// slower than consensusTime+1 sec), we're still fine as long as
+		// Verify pass which should always to since:
+		// Next.consensusTime <= Verify.consensusTime
+		delta = 1
+	}
+	return max(
+		consensusTime+delta,
+		parentPayloadTimestamp+1,
+	)
+}
diff --git a/mod/beacon/payload-time/time_test.go b/mod/beacon/payload-time/time_test.go
new file mode 100644
index 000000000..38ffd8e5f
--- /dev/null
+++ b/mod/beacon/payload-time/time_test.go
@@ -0,0 +1,110 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package payloadtime_test
+
+import (
+	"testing"
+	"time"
+
+	payloadtime "github.com/berachain/beacon-kit/mod/beacon/payload-time"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	"github.com/stretchr/testify/require"
+)
+
+// TestNextTimestampVerifies checks that next payload timestamp
+// built via payloadtime.Next always pass payloadtime.Verify.
+func TestNextTimestampVerifies(t *testing.T) {
+	tests := []struct {
+		name        string
+		times       func() (time.Time, time.Time)
+		expectedErr error
+	}{
+		{
+			name: "Payload timestamp < consensus timestamp",
+			times: func() (time.Time, time.Time) {
+				consensusTime := time.Now().Truncate(time.Second)
+				parentPayloadTimestamp := consensusTime.Add(-10 * time.Second)
+				return consensusTime, parentPayloadTimestamp
+			},
+			expectedErr: nil,
+		},
+		{
+			name: "Payload timestamp == consensus timestamp",
+			times: func() (time.Time, time.Time) {
+				consensusTime := time.Now().Truncate(time.Second)
+				parentPayloadTimestamp := consensusTime
+				return consensusTime, parentPayloadTimestamp
+			},
+			expectedErr: nil,
+		},
+		{
+			name: "Payload timestamp > consensus timestamp",
+			times: func() (time.Time, time.Time) {
+				consensusTime := time.Now().Truncate(time.Second)
+				parentPayloadTimestamp := consensusTime.Add(10 * time.Second)
+				return consensusTime, parentPayloadTimestamp
+			},
+			expectedErr: nil,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			consensusTime, parentPayloadTimestamp := tt.times()
+
+			// Optimistic build case
+			nextPayload := payloadtime.Next(
+				math.U64(consensusTime.Unix()),
+				math.U64(parentPayloadTimestamp.Unix()),
+				true, // buildOptimistically
+			)
+
+			gotErr := payloadtime.Verify(
+				math.U64(consensusTime.Unix()),
+				math.U64(parentPayloadTimestamp.Unix()),
+				nextPayload,
+			)
+			if tt.expectedErr == nil {
+				require.NoError(t, gotErr)
+			} else {
+				require.ErrorIs(t, tt.expectedErr, gotErr)
+			}
+
+			// Just in time build case
+			nextPayload = payloadtime.Next(
+				math.U64(consensusTime.Unix()),
+				math.U64(parentPayloadTimestamp.Unix()),
+				false, // buildOptimistically
+			)
+
+			gotErr = payloadtime.Verify(
+				math.U64(consensusTime.Unix()),
+				math.U64(parentPayloadTimestamp.Unix()),
+				nextPayload,
+			)
+			if tt.expectedErr == nil {
+				require.NoError(t, gotErr)
+			} else {
+				require.ErrorIs(t, tt.expectedErr, gotErr)
+			}
+		})
+	}
+}
diff --git a/mod/beacon/validator/block_builder.go b/mod/beacon/validator/block_builder.go
index 6fe82bd7a..adf6a01f8 100644
--- a/mod/beacon/validator/block_builder.go
+++ b/mod/beacon/validator/block_builder.go
@@ -22,8 +22,10 @@ package validator
 
 import (
 	"context"
+	"fmt"
 	"time"
 
+	payloadtime "github.com/berachain/beacon-kit/mod/beacon/payload-time"
 	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
@@ -74,18 +76,17 @@ func (s *Service[
 	}
 
 	// Create a new empty block from the current state.
-	blk, err = s.getEmptyBeaconBlockForSlot(
-		st, slotData.GetSlot(),
-	)
+	blk, err = s.getEmptyBeaconBlockForSlot(st, slotData.GetSlot())
 	if err != nil {
 		return blk, sidecars, err
 	}
 
 	// Get the payload for the block.
-	envelope, err := s.retrieveExecutionPayload(ctx, st, blk)
+	envelope, err := s.retrieveExecutionPayload(ctx, st, blk, slotData)
 	if err != nil {
 		return blk, sidecars, err
-	} else if envelope == nil {
+	}
+	if envelope == nil {
 		return blk, sidecars, ErrNilPayload
 	}
 
@@ -112,7 +113,13 @@ func (s *Service[
 
 	// Compute the state root for the block.
 	g.Go(func() error {
-		return s.computeAndSetStateRoot(ctx, st, blk)
+		return s.computeAndSetStateRoot(
+			ctx,
+			slotData.GetProposerAddress(),
+			slotData.GetConsensusTime(),
+			st,
+			blk,
+		)
 	})
 
 	// Wait for all the goroutines to finish.
@@ -193,9 +200,12 @@ func (s *Service[
 // retrieveExecutionPayload retrieves the execution payload for the block.
 func (s *Service[
 	_, BeaconBlockT, _, BeaconStateT, _, _, _, _,
-	ExecutionPayloadT, ExecutionPayloadHeaderT, _, _, _,
+	ExecutionPayloadT, ExecutionPayloadHeaderT, _, _, SlotDataT,
 ]) retrieveExecutionPayload(
-	ctx context.Context, st BeaconStateT, blk BeaconBlockT,
+	ctx context.Context,
+	st BeaconStateT,
+	blk BeaconBlockT,
+	slotData SlotDataT,
 ) (engineprimitives.BuiltExecutionPayloadEnv[ExecutionPayloadT], error) {
 	//
 	// TODO: Add external block builders to this flow.
@@ -207,44 +217,45 @@ func (s *Service[
 			blk.GetSlot(),
 			blk.GetParentBlockRoot(),
 		)
-	if err != nil {
-		s.metrics.failedToRetrievePayload(
-			blk.GetSlot(),
-			err,
-		)
+	if err == nil {
+		return envelope, nil
+	}
 
-		// The latest execution payload header will be from the previous block
-		// during the block building phase.
-		var lph ExecutionPayloadHeaderT
-		lph, err = st.GetLatestExecutionPayloadHeader()
-		if err != nil {
-			return nil, err
-		}
-
-		// If we failed to retrieve the payload, request a synchrnous payload.
-		//
-		// NOTE: The state here is properly configured by the
-		// prepareStateForBuilding
-		//
-		// call that needs to be called before requesting the Payload.
-		// TODO: We should decouple the PayloadBuilder from BeaconState to make
-		// this less confusing.
-		return s.localPayloadBuilder.RequestPayloadSync(
-			ctx,
-			st,
-			blk.GetSlot(),
-			// TODO: this is hood.
-			max(
-				//#nosec:G701
-				uint64(time.Now().Unix()+1),
-				uint64((lph.GetTimestamp()+1)),
-			),
-			blk.GetParentBlockRoot(),
-			lph.GetBlockHash(),
-			lph.GetParentHash(),
-		)
+	// If we failed to retrieve the payload, request a synchronous payload.
+	//
+	// NOTE: The state here is properly configured by the
+	// prepareStateForBuilding
+	//
+	// call that needs to be called before requesting the Payload.
+	// TODO: We should decouple the PayloadBuilder from BeaconState to make
+	// this less confusing.
+
+	s.metrics.failedToRetrievePayload(
+		blk.GetSlot(),
+		err,
+	)
+
+	// The latest execution payload header will be from the previous block
+	// during the block building phase.
+	var lph ExecutionPayloadHeaderT
+	lph, err = st.GetLatestExecutionPayloadHeader()
+	if err != nil {
+		return nil, err
 	}
-	return envelope, nil
+
+	return s.localPayloadBuilder.RequestPayloadSync(
+		ctx,
+		st,
+		blk.GetSlot(),
+		payloadtime.Next(
+			slotData.GetConsensusTime(),
+			lph.GetTimestamp(),
+			false, // buildOptimistically
+		).Unwrap(),
+		blk.GetParentBlockRoot(),
+		lph.GetBlockHash(),
+		lph.GetParentHash(),
+	)
 }
 
 // BuildBlockBody assembles the block body with necessary components.
@@ -303,7 +314,12 @@ func (s *Service[
 	))
 
 	// Set the graffiti on the block body.
-	body.SetGraffiti(bytes.ToBytes32([]byte(s.cfg.Graffiti)))
+	sizedGraffiti := bytes.ExtendToSize([]byte(s.cfg.Graffiti), bytes.B32Size)
+	graffiti, err := bytes.ToBytes32(sizedGraffiti)
+	if err != nil {
+		return fmt.Errorf("failed processing graffiti: %w", err)
+	}
+	body.SetGraffiti(graffiti)
 
 	// Get the epoch to find the active fork version.
 	epoch := s.chainSpec.SlotToEpoch(blk.GetSlot())
@@ -328,10 +344,18 @@ func (s *Service[
 	_, BeaconBlockT, _, BeaconStateT, _, _, _, _, _, _, _, _, _,
 ]) computeAndSetStateRoot(
 	ctx context.Context,
+	proposerAddress []byte,
+	consensusTime math.U64,
 	st BeaconStateT,
 	blk BeaconBlockT,
 ) error {
-	stateRoot, err := s.computeStateRoot(ctx, st, blk)
+	stateRoot, err := s.computeStateRoot(
+		ctx,
+		proposerAddress,
+		consensusTime,
+		st,
+		blk,
+	)
 	if err != nil {
 		s.logger.Error(
 			"failed to compute state root while building block ❗️ ",
@@ -349,6 +373,8 @@ func (s *Service[
 	_, BeaconBlockT, _, BeaconStateT, _, _, _, _, _, _, _, _, _,
 ]) computeStateRoot(
 	ctx context.Context,
+	proposerAddress []byte,
+	consensusTime math.U64,
 	st BeaconStateT,
 	blk BeaconBlockT,
 ) (common.Root, error) {
@@ -364,6 +390,8 @@ func (s *Service[
 			SkipPayloadVerification: true,
 			SkipValidateResult:      true,
 			SkipValidateRandao:      true,
+			ProposerAddress:         proposerAddress,
+			ConsensusTime:           consensusTime,
 		},
 		st, blk,
 	); err != nil {
diff --git a/mod/beacon/validator/types.go b/mod/beacon/validator/types.go
index 16711f08e..33bce5597 100644
--- a/mod/beacon/validator/types.go
+++ b/mod/beacon/validator/types.go
@@ -190,6 +190,12 @@ type SlotData[AttestationDataT, SlashingInfoT any] interface {
 	GetAttestationData() []AttestationDataT
 	// GetSlashingInfo returns the slashing info of the incoming slot.
 	GetSlashingInfo() []SlashingInfoT
+	// GetProposerAddress returns the address of the validator
+	// selected by consensus to propose the block
+	GetProposerAddress() []byte
+	// GetConsensusTime returns the timestamp of current consensus request.
+	// It is used to build next payload and to validate currentpayload.
+	GetConsensusTime() math.U64
 }
 
 // StateProcessor defines the interface for processing the state.
diff --git a/mod/cli/go.mod b/mod/cli/go.mod
index bed60d46e..99e6f7539 100644
--- a/mod/cli/go.mod
+++ b/mod/cli/go.mod
@@ -23,9 +23,9 @@ replace (
 require (
 	cosmossdk.io/depinject v1.0.0
 	cosmossdk.io/log v1.4.1
-	github.com/berachain/beacon-kit/mod/config v0.0.0-20240705193247-d464364483df
-	github.com/berachain/beacon-kit/mod/consensus v0.0.0-20240821053614-036c5d2945f0
-	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685
+	github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad
+	github.com/berachain/beacon-kit/mod/consensus v0.0.0-20241107170417-7905e3d59a1d
+	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f
 	github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0
 	github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e
@@ -34,7 +34,7 @@ require (
 	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570
 	github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4
 	github.com/cosmos/cosmos-sdk v0.53.0
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81
 	github.com/spf13/afero v1.11.0
 	github.com/spf13/cobra v1.8.1
 	github.com/spf13/viper v1.19.0
@@ -43,22 +43,24 @@ require (
 
 require (
 	cosmossdk.io/core v1.0.0 // indirect
+	cosmossdk.io/core/testing v0.0.0-unpublished // indirect
 	cosmossdk.io/errors/v2 v2.0.0-20240731132947-df72853b3ca5 // indirect
 	cosmossdk.io/schema v0.1.1 // indirect
 	github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e // indirect
 	github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df // indirect
-	github.com/berachain/beacon-kit/mod/node-api v0.0.0-20240806160829-cde2d1347e7e // indirect
+	github.com/berachain/beacon-kit/mod/node-api v0.0.0-20241107170417-7905e3d59a1d // indirect
 	github.com/berachain/beacon-kit/mod/node-api/engines v0.0.0-20240806160829-cde2d1347e7e // indirect
-	github.com/berachain/beacon-kit/mod/observability v0.0.0-00010101000000-000000000000 // indirect
+	github.com/berachain/beacon-kit/mod/observability v0.0.0-unpublished // indirect
 	github.com/cockroachdb/fifo v0.0.0-20240616162244-4768e80dfb9a // indirect
 	github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 // indirect
 	github.com/ethereum/go-ethereum v1.14.7 // indirect
-	github.com/gabriel-vasile/mimetype v1.4.4 // indirect
+	github.com/gabriel-vasile/mimetype v1.4.6 // indirect
 	github.com/go-playground/locales v0.14.1 // indirect
 	github.com/go-playground/universal-translator v0.18.1 // indirect
 	github.com/go-playground/validator/v10 v10.22.0 // indirect
 	github.com/goccy/go-json v0.10.3 // indirect
 	github.com/golang-jwt/jwt v3.2.2+incompatible // indirect
+	github.com/golang-jwt/jwt/v4 v4.5.1 // indirect
 	github.com/google/gofuzz v1.2.0 // indirect
 	github.com/karalabe/ssz v0.2.1-0.20240724074312-3d1ff7a6f7c4 // indirect
 	github.com/labstack/echo/v4 v4.12.0 // indirect
@@ -204,7 +206,7 @@ require (
 	github.com/oklog/run v1.1.0 // indirect
 	github.com/olekukonko/tablewriter v0.0.5 // indirect
 	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
-	github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
 	github.com/prometheus/client_golang v1.20.1 // indirect
@@ -218,7 +220,7 @@ require (
 	github.com/rs/cors v1.11.0 // indirect
 	github.com/sagikazarmark/locafero v0.6.0 // indirect
 	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
-	github.com/sasha-s/go-deadlock v0.3.1 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
 	github.com/shirou/gopsutil v3.21.11+incompatible // indirect
 	github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8 // indirect
 	github.com/spf13/cast v1.7.0
@@ -236,17 +238,17 @@ require (
 	gitlab.com/yawning/secp256k1-voi v0.0.0-20230925100816-f2616030848b // indirect
 	gitlab.com/yawning/tuplehash v0.0.0-20230713102510-df83abbf9a02 // indirect
 	go.opencensus.io v0.24.0 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/term v0.23.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
+	golang.org/x/net v0.30.0 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/term v0.25.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
 	google.golang.org/grpc v1.65.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/ini.v1 v1.67.0 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
diff --git a/mod/cli/go.sum b/mod/cli/go.sum
index e5f192698..36ba25ec8 100644
--- a/mod/cli/go.sum
+++ b/mod/cli/go.sum
@@ -78,8 +78,8 @@ github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 h1:
 github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8/go.mod h1:3wR01SglBZ+HvDvhbugz/Mxem22JUThJRwo2Ec8Q0No=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df h1:mnD1LKqDQ0n+OFdDqOuvKaEiUKRJzsO4V0wyyn/gJYg=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df/go.mod h1:bTFB4Rdvm7D/WdwPYkqQ+8T0XOMBv0pzXfp1E46BFX8=
-github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685 h1:pTvESOpJ0a6oCV81+pec+zoTBmojZ8C1+7fd4HtKpbI=
-github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685/go.mod h1:jduqdSJEtO5eL43l/MpfnIK81o81m10wzt6Gb++Qi9M=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f h1:Vzglhdv60M7LBS3FBuqK0eUX8vYJBJnL/RwYpxUswpo=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f/go.mod h1:cZd8cFZ+ylhh3/NUbrdXO2ri1/7KOaYBjo1B8MgbgMM=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720 h1:rVltwwt4JAhpvqeRDZ8J07e9XM+jzfDCJEghPA4r5lg=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720/go.mod h1:kGxAesqTkt75+QYQ73O9I5PqAicSL9JGh5wypiWgb8I=
 github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0 h1:kCSrkb/uVXfMKJPKjf0c7nlJkwn5cNwMxtzRW4zNq2A=
@@ -239,8 +239,8 @@ github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
 github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
 github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
 github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fjl/memsize v0.0.2 h1:27txuSD9or+NZlnOWdKUxeBzTAUkWCVh+4Gf2dWFOzA=
 github.com/fjl/memsize v0.0.2/go.mod h1:VvhXpOYNQvB+uIk2RvXzuaQtkQJzzIx6lSBe1xv7hi0=
 github.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=
@@ -252,8 +252,8 @@ github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
 github.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=
 github.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=
-github.com/gabriel-vasile/mimetype v1.4.4 h1:QjV6pZ7/XZ7ryI2KuyeEDE8wnh7fHP9YnQy+R0LnH8I=
-github.com/gabriel-vasile/mimetype v1.4.4/go.mod h1:JwLei5XPtWdGiMFB5Pjle1oEeoSeEuJfJE+TtfvdB/s=
+github.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=
+github.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=
 github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08 h1:f6D9Hr8xV8uYKlyuj8XIruxlh9WjVjdh1gIicAS7ays=
 github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08/go.mod h1:x7DCsMOv1taUwEWCzT4cmDeAkigA5/QCwUodaVOe8Ww=
 github.com/getsentry/sentry-go v0.28.1 h1:zzaSm/vHmGllRM6Tpx1492r0YDzauArdBfkJRtY6P5k=
@@ -306,8 +306,8 @@ github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
 github.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=
 github.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=
-github.com/golang-jwt/jwt/v4 v4.5.0 h1:7cYmW1XlMY7h7ii7UhUyChSgS5wUJEnm9uZVTGqOWzg=
-github.com/golang-jwt/jwt/v4 v4.5.0/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
+github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
+github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
 github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
 github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
@@ -535,9 +535,8 @@ github.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0Mw
 github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
 github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
 github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
-github.com/petermattis/goid v0.0.0-20180202154549-b0b1615b78e5/go.mod h1:jvVRKCrJTQWu0XVbaOlby/2lO20uSCHEMzzplHXte1o=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 h1:CtBLeckhC0zAXgp5V8uR30CNYH0JgCJoxCg5+6i2zQk=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
 github.com/phuslu/log v1.0.110 h1:9WQnpL1/CBi3IwZaVadYnI/i0bgobTvit2ayXIgSg4c=
 github.com/phuslu/log v1.0.110/go.mod h1:F8osGJADo5qLK/0F88djWwdyoZZ9xDJQL1HYRHFEkS0=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
@@ -594,8 +593,8 @@ github.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3
 github.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=
 github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
 github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
-github.com/sasha-s/go-deadlock v0.3.1 h1:sqv7fDNShgjcaxkO0JNcOAlr8B9+cV5Ey/OB71efZx0=
-github.com/sasha-s/go-deadlock v0.3.1/go.mod h1:F73l+cr82YSh10GxyRI6qZiCgK64VaZjwesgfQ1/iLM=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=
 github.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
 github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
@@ -686,8 +685,8 @@ golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACk
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200728195943-123391ffb6de/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
@@ -716,8 +715,8 @@ golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96b
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -769,19 +768,19 @@ golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/sys v0.21.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.23.0 h1:F6D4vR+EHoL9/sWAWgAR1H2DcHr4PareCbAaCo1RpuU=
-golang.org/x/term v0.23.0/go.mod h1:DgV24QBUrK6jhZXl+20l6UWznPlwAHm1Q1mGHtydmSk=
+golang.org/x/term v0.25.0 h1:WtHI/ltw4NvSUig5KARz9h521QvRC8RmF/cuYqifU24=
+golang.org/x/term v0.25.0/go.mod h1:RPyXicDX+6vLxogjjRxjgD2TKtmAO6NZBsBRfrOLu7M=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
 golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -809,10 +808,10 @@ google.golang.org/genproto v0.0.0-20200423170343-7949de9c1215/go.mod h1:55QSHmfG
 google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
 google.golang.org/genproto v0.0.0-20220314164441-57ef72a4c106/go.mod h1:hAL49I2IFola2sVEjAn7MEwsja0xp51I0tlGAf9hz4E=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 h1:CUiCqkPw1nNrNQzCCG4WA65m0nAmQiwXHpub3dNyruU=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4/go.mod h1:EvuUDCulqGgV80RvP1BHuom+smhX4qtlhnNatHuroGQ=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d h1:PksQg4dV6Sem3/HkBX+Ltq8T0ke0PKIRBNBatoDTVls=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d/go.mod h1:s7iA721uChleev562UJO2OYB0PPT9CMFjV+Ce7VJH5M=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 h1:0+ozOGcrp+Y8Aq8TLNN2Aliibms5LEzsq99ZZmAGYm0=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094/go.mod h1:fJ/e3If/Q67Mj99hin0hMhiNyCRmt6BQ2aWIJshUSJw=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d h1:JU0iKnSg02Gmb5ZdV8nYsKEKsP6o/FGVWTrw4i1DA9A=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
@@ -840,8 +839,8 @@ google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp0
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
diff --git a/mod/cli/pkg/commands/deposit/create.go b/mod/cli/pkg/commands/deposit/create.go
index a2ac8cd30..048bb7faa 100644
--- a/mod/cli/pkg/commands/deposit/create.go
+++ b/mod/cli/pkg/commands/deposit/create.go
@@ -24,6 +24,7 @@ import (
 	"os"
 
 	"cosmossdk.io/log"
+	clicontext "github.com/berachain/beacon-kit/mod/cli/pkg/context"
 	"github.com/berachain/beacon-kit/mod/cli/pkg/utils/parser"
 	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
 	"github.com/berachain/beacon-kit/mod/node-core/pkg/components"
@@ -31,7 +32,6 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/constraints"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
-	"github.com/cosmos/cosmos-sdk/client"
 	"github.com/spf13/cobra"
 )
 
@@ -164,7 +164,7 @@ func getBLSSigner(
 
 	return components.ProvideBlsSigner(
 		components.BlsSignerInput{
-			AppOpts: client.GetViperFromCmd(cmd),
+			AppOpts: clicontext.GetViperFromCmd(cmd),
 			PrivKey: legacyKey,
 		},
 	)
diff --git a/mod/cli/pkg/commands/genesis/payload.go b/mod/cli/pkg/commands/genesis/payload.go
index deccc019a..32caa6cde 100644
--- a/mod/cli/pkg/commands/genesis/payload.go
+++ b/mod/cli/pkg/commands/genesis/payload.go
@@ -21,6 +21,7 @@
 package genesis
 
 import (
+	"fmt"
 	"unsafe"
 
 	"github.com/berachain/beacon-kit/mod/cli/pkg/context"
@@ -93,11 +94,15 @@ func AddExecutionPayloadCmd(chainSpec common.ChainSpec) *cobra.Command {
 			}
 
 			// Inject the execution payload.
-			genesisInfo.ExecutionPayloadHeader = executableDataToExecutionPayloadHeader(
-				version.ToUint32(genesisInfo.ForkVersion),
-				payload,
-				chainSpec.MaxWithdrawalsPerPayload(),
-			)
+			genesisInfo.ExecutionPayloadHeader, err =
+				executableDataToExecutionPayloadHeader(
+					version.ToUint32(genesisInfo.ForkVersion),
+					payload,
+					chainSpec.MaxWithdrawalsPerPayload(),
+				)
+			if err != nil {
+				return errors.Wrap(err, "failed to unmarshal beacon state")
+			}
 
 			appGenesisState["beacon"], err = json.Marshal(genesisInfo)
 			if err != nil {
@@ -124,7 +129,7 @@ func executableDataToExecutionPayloadHeader(
 	data *gethprimitives.ExecutableData,
 	// todo: re-enable when codec supports.
 	_ uint64,
-) *types.ExecutionPayloadHeader {
+) (*types.ExecutionPayloadHeader, error) {
 	var executionPayloadHeader *types.ExecutionPayloadHeader
 	switch forkVersion {
 	case version.Deneb, version.DenebPlus:
@@ -155,6 +160,11 @@ func executableDataToExecutionPayloadHeader(
 			excessBlobGas = *data.ExcessBlobGas
 		}
 
+		baseFeePerGas, err := math.NewU256FromBigInt(data.BaseFeePerGas)
+		if err != nil {
+			return nil, fmt.Errorf("failed baseFeePerGas conversion: %w", err)
+		}
+
 		executionPayloadHeader = &types.ExecutionPayloadHeader{
 			ParentHash:    common.ExecutionHash(data.ParentHash),
 			FeeRecipient:  common.ExecutionAddress(data.FeeRecipient),
@@ -167,21 +177,20 @@ func executableDataToExecutionPayloadHeader(
 			GasUsed:       math.U64(data.GasUsed),
 			Timestamp:     math.U64(data.Timestamp),
 			ExtraData:     data.ExtraData,
-			BaseFeePerGas: math.NewU256FromBigInt(data.BaseFeePerGas),
+			BaseFeePerGas: baseFeePerGas,
 			BlockHash:     common.ExecutionHash(data.BlockHash),
-			// TODO: Decouple from broken bArtio.
-			TransactionsRoot: engineprimitives.
-				BartioTransactions(
-					data.Transactions,
-				).HashTreeRoot(),
-			WithdrawalsRoot: engineprimitives.Withdrawals(withdrawals).
-				HashTreeRoot(),
+			TransactionsRoot: engineprimitives.Transactions(
+				data.Transactions,
+			).HashTreeRoot(),
+			WithdrawalsRoot: engineprimitives.Withdrawals(
+				withdrawals,
+			).HashTreeRoot(),
 			BlobGasUsed:   math.U64(blobGasUsed),
 			ExcessBlobGas: math.U64(excessBlobGas),
 		}
 	default:
-		panic("unsupported fork version")
+		return nil, types.ErrForkVersionNotSupported
 	}
 
-	return executionPayloadHeader
+	return executionPayloadHeader, nil
 }
diff --git a/mod/cli/pkg/utils/parser/validator.go b/mod/cli/pkg/utils/parser/validator.go
index 604eb71d5..49cd6266c 100644
--- a/mod/cli/pkg/utils/parser/validator.go
+++ b/mod/cli/pkg/utils/parser/validator.go
@@ -68,7 +68,7 @@ func ConvertWithdrawalCredentials(credentials string) (
 func ConvertAmount(amount string) (math.Gwei, error) {
 	// Convert the amount to a Gwei.
 	amountBigInt, ok := new(big.Int).SetString(amount, 10)
-	if !ok {
+	if !ok || !amountBigInt.IsUint64() {
 		return 0, ErrInvalidAmount
 	}
 	return math.Gwei(amountBigInt.Uint64()), nil
diff --git a/mod/config/go.mod b/mod/config/go.mod
index 5cd315ed9..c5a7ed302 100644
--- a/mod/config/go.mod
+++ b/mod/config/go.mod
@@ -39,7 +39,7 @@ require (
 	github.com/VictoriaMetrics/fastcache v1.12.2 // indirect
 	github.com/beorn7/perks v1.0.1 // indirect
 	github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 // indirect
-	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240806160829-cde2d1347e7e // indirect
+	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f // indirect
 	github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720 // indirect
 	github.com/bits-and-blooms/bitset v1.13.0 // indirect
 	github.com/btcsuite/btcd/btcec/v2 v2.3.3 // indirect
diff --git a/mod/config/go.sum b/mod/config/go.sum
index fae052b79..b38bcbfa7 100644
--- a/mod/config/go.sum
+++ b/mod/config/go.sum
@@ -24,8 +24,8 @@ github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e h1
 github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e/go.mod h1:hyB6jdTwCalJ6IMwCtYOXjXrqIg3T1QruIzs4NPrNkw=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df h1:mnD1LKqDQ0n+OFdDqOuvKaEiUKRJzsO4V0wyyn/gJYg=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df/go.mod h1:bTFB4Rdvm7D/WdwPYkqQ+8T0XOMBv0pzXfp1E46BFX8=
-github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240806160829-cde2d1347e7e h1:GTeZshNZaH5MnVhSSGj//vxJfv1kM9d6w2CA7O64gJk=
-github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240806160829-cde2d1347e7e/go.mod h1:ZU1bq1BMt6b0kPRAw+A3kP7FlSd5DSQNYePD5qL9zfQ=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f h1:Vzglhdv60M7LBS3FBuqK0eUX8vYJBJnL/RwYpxUswpo=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f/go.mod h1:cZd8cFZ+ylhh3/NUbrdXO2ri1/7KOaYBjo1B8MgbgMM=
 github.com/berachain/beacon-kit/mod/da v0.0.0-20240610210054-bfdc14c4013c h1:WKjF2xYQ3jwTNauJbs34bTzCgf49uHYy7/f+z1DfmyI=
 github.com/berachain/beacon-kit/mod/da v0.0.0-20240610210054-bfdc14c4013c/go.mod h1:4hmlXJkl1cwCnZvEISy4K2x9Z7O3Pgtijz1HS/P/uY8=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720 h1:rVltwwt4JAhpvqeRDZ8J07e9XM+jzfDCJEghPA4r5lg=
diff --git a/mod/primitives/pkg/net/jwt/sign.go b/mod/config/pkg/spec/boonet.go
similarity index 69%
rename from mod/primitives/pkg/net/jwt/sign.go
rename to mod/config/pkg/spec/boonet.go
index f08cb152a..83213baba 100644
--- a/mod/primitives/pkg/net/jwt/sign.go
+++ b/mod/config/pkg/spec/boonet.go
@@ -18,23 +18,23 @@
 // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
 // TITLE.
 
-package jwt
+package spec
 
 import (
-	"time"
-
-	"github.com/berachain/beacon-kit/mod/errors"
-	gjwt "github.com/golang-jwt/jwt/v5"
+	"github.com/berachain/beacon-kit/mod/chain-spec/pkg/chain"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 )
 
-// BuildSignedJWT builds a signed JWT from the provided JWT secret.
-func BuildSignedJWT(s *Secret) (string, error) {
-	token := gjwt.NewWithClaims(gjwt.SigningMethodHS256, gjwt.MapClaims{
-		"iat": &gjwt.NumericDate{Time: time.Now()},
-	})
-	str, err := token.SignedString(s[:])
-	if err != nil {
-		return "", errors.Wrapf(ErrCreateJWT, "%w", err)
-	}
-	return str, nil
+// BoonetChainSpec is the ChainSpec for the localnet.
+func BoonetChainSpec() chain.Spec[
+	common.DomainType,
+	math.Epoch,
+	common.ExecutionAddress,
+	math.Slot,
+	any,
+] {
+	testnetSpec := BaseSpec()
+	testnetSpec.DepositEth1ChainID = BoonetEth1ChainID
+	return chain.NewChainSpec(testnetSpec)
 }
diff --git a/mod/config/pkg/spec/constants.go b/mod/config/pkg/spec/constants.go
index eabd98375..2b0cea554 100644
--- a/mod/config/pkg/spec/constants.go
+++ b/mod/config/pkg/spec/constants.go
@@ -22,6 +22,9 @@ package spec
 
 const (
 
+	// BoonetEth1ChainID is the chain ID for the local devnet.
+	BoonetEth1ChainID uint64 = 80000
+
 	// BetnetEth1ChainID is the chain ID for the local devnet.
 	BetnetEth1ChainID uint64 = 80088
 
diff --git a/mod/primitives/pkg/encoding/hex/json.go b/mod/config/pkg/spec/special_cases.go
similarity index 68%
rename from mod/primitives/pkg/encoding/hex/json.go
rename to mod/config/pkg/spec/special_cases.go
index 9e62350ae..5407715bc 100644
--- a/mod/primitives/pkg/encoding/hex/json.go
+++ b/mod/config/pkg/spec/special_cases.go
@@ -18,20 +18,13 @@
 // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
 // TITLE.
 
-package hex
+package spec
 
-import (
-	"encoding"
-)
+// Special cased Bartio for some ad-hoc handling due to the way
+// some bugs were handled on Bartio. To be removed.
+const (
+	BartioChainID uint64 = 80084
 
-// UnmarshalJSONText unmarshals a JSON string with a 0x prefix into a given
-// TextUnmarshaler. It validates the input and then removes the surrounding
-// quotes before passing the inner content to the UnmarshalText method.
-func UnmarshalJSONText(input []byte,
-	u encoding.TextUnmarshaler,
-) error {
-	if err := ValidateUnmarshalInput(input); err != nil {
-		return err
-	}
-	return u.UnmarshalText(input[1 : len(input)-1])
-}
+	//nolint:lll // temporary.
+	BArtioValRoot = "0x9147586693b6e8faa837715c0f3071c2000045b54233901c2e7871b15872bc43"
+)
diff --git a/mod/consensus-types/go.mod b/mod/consensus-types/go.mod
index e271d2a9f..4ec270ee8 100644
--- a/mod/consensus-types/go.mod
+++ b/mod/consensus-types/go.mod
@@ -6,7 +6,7 @@ require (
 	github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240808194557-e72e74f58197
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240705193247-d464364483df
 	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81
 	github.com/holiman/uint256 v1.3.1
 	github.com/karalabe/ssz v0.2.1-0.20240724074312-3d1ff7a6f7c4
 	github.com/stretchr/testify v1.9.0
@@ -15,9 +15,10 @@ require (
 
 require (
 	github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
 	github.com/google/gofuzz v1.2.0 // indirect
 	github.com/umbracle/fastrlp v0.1.0 // indirect
-	golang.org/x/net v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
 )
 
 require (
@@ -81,12 +82,12 @@ require (
 	github.com/tklauser/go-sysconf v0.3.14 // indirect
 	github.com/tklauser/numcpus v0.8.0 // indirect
 	github.com/yusufpapurcu/wmi v1.2.4 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
 	golang.org/x/sync v0.8.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 	rsc.io/tmplfunc v0.0.3 // indirect
diff --git a/mod/consensus-types/go.sum b/mod/consensus-types/go.sum
index f0261566a..c8f4bf881 100644
--- a/mod/consensus-types/go.sum
+++ b/mod/consensus-types/go.sum
@@ -63,14 +63,16 @@ github.com/decred/dcrd/crypto/blake256 v1.0.1 h1:7PltbUIQB7u/FfZ39+DGa/ShuMyJ5il
 github.com/decred/dcrd/crypto/blake256 v1.0.1/go.mod h1:2OfgNZ5wDpcsFmHmCK5gZTPcCXqlm2ArzUIkw9czNJo=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 h1:rpfIENRNNilwHwZeG5+P150SMrnNEcHYvcCuK6dPZSg=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0/go.mod h1:v57UDF4pDQJcEfFUCRop3lJL149eHGSe9Jvczhzjo/0=
+github.com/emicklei/dot v1.6.2 h1:08GN+DD79cy/tzN6uLCT84+2Wk9u+wvqP+Hkx/dIR8A=
+github.com/emicklei/dot v1.6.2/go.mod h1:DeV7GvQtIw4h2u73RKBkkFdvVAz0D9fzeJrgPW6gy/s=
 github.com/ethereum/c-kzg-4844 v1.0.3 h1:IEnbOHwjixW2cTvKRUlAAUOeleV7nNM/umJR+qy4WDs=
 github.com/ethereum/c-kzg-4844 v1.0.3/go.mod h1:VewdlzQmpT5QSrVhbBuGoCdFJkpaJlO1aQputP83wc0=
 github.com/ethereum/go-ethereum v1.14.7 h1:EHpv3dE8evQmpVEQ/Ne2ahB06n2mQptdwqaMNhAT29g=
 github.com/ethereum/go-ethereum v1.14.7/go.mod h1:Mq0biU2jbdmKSZoqOj29017ygFrMnB5/Rifwp980W4o=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 h1:KrE8I4reeVvf7C1tm8elRjj4BdscTYzz/WAbYyf/JI4=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0/go.mod h1:D9AJLVXSyZQXJQVk8oh1EwjISE+sJTn2duYIZC0dy3w=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
 github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
@@ -219,8 +221,8 @@ github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQ
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
@@ -234,8 +236,8 @@ golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -262,16 +264,16 @@ golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
@@ -290,8 +292,8 @@ google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzi
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
diff --git a/mod/consensus-types/pkg/types/attestation_data.go b/mod/consensus-types/pkg/types/attestation_data.go
index 37b6ec14c..10ca6d4c5 100644
--- a/mod/consensus-types/pkg/types/attestation_data.go
+++ b/mod/consensus-types/pkg/types/attestation_data.go
@@ -75,7 +75,7 @@ func (a *AttestationData) New(
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the AttestationData object in SSZ encoding.
-func (*AttestationData) SizeSSZ() uint32 {
+func (*AttestationData) SizeSSZ(*ssz.Sizer) uint32 {
 	return AttestationDataSize
 }
 
@@ -93,7 +93,7 @@ func (a *AttestationData) HashTreeRoot() common.Root {
 
 // MarshalSSZ marshals the AttestationData object to SSZ format.
 func (a *AttestationData) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, a.SizeSSZ())
+	buf := make([]byte, ssz.Size(a))
 	return buf, ssz.EncodeToBytes(buf, a)
 }
 
diff --git a/mod/consensus-types/pkg/types/block.go b/mod/consensus-types/pkg/types/block.go
index 5a6b10131..80e1577d4 100644
--- a/mod/consensus-types/pkg/types/block.go
+++ b/mod/consensus-types/pkg/types/block.go
@@ -21,6 +21,9 @@
 package types
 
 import (
+	"fmt"
+
+	"github.com/berachain/beacon-kit/mod/errors"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/version"
@@ -34,7 +37,7 @@ type BeaconBlock struct {
 	// Slot represents the position of the block in the chain.
 	Slot math.Slot `json:"slot"`
 	// ProposerIndex is the index of the validator who proposed the block.
-	ProposerIndex math.Slot `json:"proposer_index"`
+	ProposerIndex math.ValidatorIndex `json:"proposer_index"`
 	// ParentRoot is the hash of the parent block
 	ParentRoot common.Root `json:"parent_root"`
 	// StateRoot is the hash of the state at the block.
@@ -56,24 +59,20 @@ func (b *BeaconBlock) NewWithVersion(
 	parentBlockRoot common.Root,
 	forkVersion uint32,
 ) (*BeaconBlock, error) {
-	var (
-		block *BeaconBlock
-	)
-
-	switch forkVersion {
-	case version.Deneb:
-		block = &BeaconBlock{
+	if forkVersion == version.Deneb {
+		return &BeaconBlock{
 			Slot:          slot,
 			ProposerIndex: proposerIndex,
 			ParentRoot:    parentBlockRoot,
 			StateRoot:     common.Root{},
 			Body:          &BeaconBlockBody{},
-		}
-	default:
-		return &BeaconBlock{}, ErrForkVersionNotSupported
+		}, nil
 	}
 
-	return block, nil
+	return nil, errors.Wrap(
+		ErrForkVersionNotSupported,
+		fmt.Sprintf("fork %d", forkVersion),
+	)
 }
 
 // NewFromSSZ creates a new beacon block from the given SSZ bytes.
@@ -81,17 +80,15 @@ func (b *BeaconBlock) NewFromSSZ(
 	bz []byte,
 	forkVersion uint32,
 ) (*BeaconBlock, error) {
-	var block = new(BeaconBlock)
-	switch forkVersion {
-	case version.Deneb:
-		block = &BeaconBlock{}
-	case version.DenebPlus:
-		panic("unsupported fork version")
-	default:
-		return block, ErrForkVersionNotSupported
+	if forkVersion == version.Deneb {
+		block := &BeaconBlock{}
+		return block, block.UnmarshalSSZ(bz)
 	}
 
-	return block, block.UnmarshalSSZ(bz)
+	return nil, errors.Wrap(
+		ErrForkVersionNotSupported,
+		fmt.Sprintf("fork %d", forkVersion),
+	)
 }
 
 /* -------------------------------------------------------------------------- */
@@ -99,13 +96,13 @@ func (b *BeaconBlock) NewFromSSZ(
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the BeaconBlock object in SSZ encoding.
-func (b *BeaconBlock) SizeSSZ(fixed bool) uint32 {
+func (b *BeaconBlock) SizeSSZ(siz *ssz.Sizer, fixed bool) uint32 {
 	//nolint:mnd // todo fix.
 	var size = uint32(8 + 8 + 32 + 32 + 4)
 	if fixed {
 		return size
 	}
-	size += ssz.SizeDynamicObject(b.Body)
+	size += ssz.SizeDynamicObject(siz, b.Body)
 	return size
 }
 
@@ -124,7 +121,7 @@ func (b *BeaconBlock) DefineSSZ(codec *ssz.Codec) {
 
 // MarshalSSZ marshals the BeaconBlock object to SSZ format.
 func (b *BeaconBlock) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, b.SizeSSZ(false))
+	buf := make([]byte, ssz.Size(b))
 	return buf, ssz.EncodeToBytes(buf, b)
 }
 
@@ -193,7 +190,7 @@ func (b *BeaconBlock) GetSlot() math.Slot {
 	return b.Slot
 }
 
-// GetSlot retrieves the slot of the BeaconBlockBase.
+// GetProposerIndex retrieves the proposer index.
 func (b *BeaconBlock) GetProposerIndex() math.ValidatorIndex {
 	return b.ProposerIndex
 }
@@ -234,8 +231,8 @@ func (b *BeaconBlock) GetHeader() *BeaconBlockHeader {
 	}
 }
 
-// GetExecutionNumber retrieves the execution number of the BeaconBlock from
+// GetTimestamp retrieves the timestamp of the BeaconBlock from
 // the ExecutionPayload.
-func (b *BeaconBlock) GetExecutionNumber() math.U64 {
-	return b.Body.ExecutionPayload.Number
+func (b *BeaconBlock) GetTimestamp() math.U64 {
+	return b.Body.ExecutionPayload.Timestamp
 }
diff --git a/mod/consensus-types/pkg/types/block_test.go b/mod/consensus-types/pkg/types/block_test.go
index 8d2a2b927..ad4ba20ad 100644
--- a/mod/consensus-types/pkg/types/block_test.go
+++ b/mod/consensus-types/pkg/types/block_test.go
@@ -42,7 +42,7 @@ func generateValidBeaconBlock() *types.BeaconBlock {
 		StateRoot:     common.Root{5, 4, 3, 2, 1},
 		Body: &types.BeaconBlockBody{
 			ExecutionPayload: &types.ExecutionPayload{
-				Number:    10,
+				Timestamp: 10,
 				ExtraData: []byte("dummy extra data for testing"),
 				Transactions: [][]byte{
 					[]byte("tx1"),
@@ -101,7 +101,7 @@ func TestBeaconBlock(t *testing.T) {
 	block := generateValidBeaconBlock()
 
 	require.NotNil(t, block.Body)
-	require.Equal(t, math.U64(10), block.GetExecutionNumber())
+	require.Equal(t, math.U64(10), block.GetTimestamp())
 	require.Equal(t, version.Deneb, block.Version())
 	require.False(t, block.IsNil())
 
diff --git a/mod/consensus-types/pkg/types/body.go b/mod/consensus-types/pkg/types/body.go
index 456108eba..fd35dd85d 100644
--- a/mod/consensus-types/pkg/types/body.go
+++ b/mod/consensus-types/pkg/types/body.go
@@ -63,7 +63,7 @@ func (b *BeaconBlockBody) Empty(forkVersion uint32) *BeaconBlockBody {
 			},
 		}
 	default:
-		panic("unsupported fork version")
+		panic(ErrForkVersionNotSupported)
 	}
 }
 
@@ -78,7 +78,7 @@ func BlockBodyKZGOffset(
 	case version.Deneb:
 		return KZGMerkleIndexDeneb * cs.MaxBlobCommitmentsPerBlock()
 	default:
-		panic("unsupported fork version")
+		panic(ErrForkVersionNotSupported)
 	}
 }
 
@@ -104,15 +104,15 @@ type BeaconBlockBody struct {
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the BeaconBlockBody in SSZ.
-func (b *BeaconBlockBody) SizeSSZ(fixed bool) uint32 {
+func (b *BeaconBlockBody) SizeSSZ(siz *ssz.Sizer, fixed bool) uint32 {
 	var size uint32 = 96 + 72 + 32 + 4 + 4 + 4
 	if fixed {
 		return size
 	}
 
-	size += ssz.SizeSliceOfStaticObjects(b.Deposits)
-	size += ssz.SizeDynamicObject(b.ExecutionPayload)
-	size += ssz.SizeSliceOfStaticBytes(b.BlobKzgCommitments)
+	size += ssz.SizeSliceOfStaticObjects(siz, b.Deposits)
+	size += ssz.SizeDynamicObject(siz, b.ExecutionPayload)
+	size += ssz.SizeSliceOfStaticBytes(siz, b.BlobKzgCommitments)
 	return size
 }
 
@@ -136,7 +136,7 @@ func (b *BeaconBlockBody) DefineSSZ(codec *ssz.Codec) {
 
 // MarshalSSZ serializes the BeaconBlockBody to SSZ-encoded bytes.
 func (b *BeaconBlockBody) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, b.SizeSSZ(false))
+	buf := make([]byte, ssz.Size(b))
 	return buf, ssz.EncodeToBytes(buf, b)
 }
 
diff --git a/mod/consensus-types/pkg/types/deposit.go b/mod/consensus-types/pkg/types/deposit.go
index a205abdf6..971cc2d66 100644
--- a/mod/consensus-types/pkg/types/deposit.go
+++ b/mod/consensus-types/pkg/types/deposit.go
@@ -122,7 +122,7 @@ func (d *Deposit) DefineSSZ(c *ssz.Codec) {
 
 // MarshalSSZ marshals the Deposit object to SSZ format.
 func (d *Deposit) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, d.SizeSSZ())
+	buf := make([]byte, ssz.Size(d))
 	return buf, ssz.EncodeToBytes(buf, d)
 }
 
@@ -132,7 +132,7 @@ func (d *Deposit) UnmarshalSSZ(buf []byte) error {
 }
 
 // SizeSSZ returns the SSZ encoded size of the Deposit object.
-func (d *Deposit) SizeSSZ() uint32 {
+func (d *Deposit) SizeSSZ(*ssz.Sizer) uint32 {
 	return DepositSize
 }
 
diff --git a/mod/consensus-types/pkg/types/deposit_message.go b/mod/consensus-types/pkg/types/deposit_message.go
index 5dae4c5c7..f4c9c49cc 100644
--- a/mod/consensus-types/pkg/types/deposit_message.go
+++ b/mod/consensus-types/pkg/types/deposit_message.go
@@ -85,7 +85,7 @@ func (dm *DepositMessage) New(
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the DepositMessage object in SSZ encoding.
-func (*DepositMessage) SizeSSZ() uint32 {
+func (*DepositMessage) SizeSSZ(*ssz.Sizer) uint32 {
 	//nolint:mnd // 48 + 32 + 8 = 88.
 	return 88
 }
@@ -111,7 +111,7 @@ func (dm *DepositMessage) MarshalSSZTo(buf []byte) ([]byte, error) {
 
 // MarshalSSZ marshals the DepositMessage object to SSZ format.
 func (dm *DepositMessage) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, dm.SizeSSZ())
+	buf := make([]byte, ssz.Size(dm))
 	return dm.MarshalSSZTo(buf)
 }
 
diff --git a/mod/consensus-types/pkg/types/deposit_message_test.go b/mod/consensus-types/pkg/types/deposit_message_test.go
index 66e4f89a3..4f95c1bda 100644
--- a/mod/consensus-types/pkg/types/deposit_message_test.go
+++ b/mod/consensus-types/pkg/types/deposit_message_test.go
@@ -30,6 +30,7 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto/mocks"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	karalabessz "github.com/karalabe/ssz"
 	"github.com/stretchr/testify/mock"
 	"github.com/stretchr/testify/require"
 )
@@ -94,7 +95,7 @@ func TestDepositMessage_MarshalSSZTo(t *testing.T) {
 		Amount:      math.Gwei(1000),
 	}
 
-	buf := make([]byte, original.SizeSSZ())
+	buf := make([]byte, karalabessz.Size(original))
 	data, err := original.MarshalSSZTo(buf)
 	require.NoError(t, err)
 
diff --git a/mod/consensus-types/pkg/types/deposit_test.go b/mod/consensus-types/pkg/types/deposit_test.go
index 5e9fb5b47..2a8880605 100644
--- a/mod/consensus-types/pkg/types/deposit_test.go
+++ b/mod/consensus-types/pkg/types/deposit_test.go
@@ -29,6 +29,7 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 	ssz "github.com/ferranbt/fastssz"
+	karalabessz "github.com/karalabe/ssz"
 	"github.com/stretchr/testify/require"
 )
 
@@ -78,7 +79,7 @@ func TestDeposit_MarshalUnmarshalSSZ(t *testing.T) {
 
 func TestDeposit_MarshalSSZTo(t *testing.T) {
 	deposit := generateValidDeposit()
-	buf := make([]byte, deposit.SizeSSZ())
+	buf := make([]byte, karalabessz.Size(deposit))
 	target, err := deposit.MarshalSSZTo(buf)
 	require.NoError(t, err)
 	require.NotNil(t, target)
@@ -94,7 +95,7 @@ func TestDeposit_HashTreeRoot(t *testing.T) {
 func TestDeposit_SizeSSZ(t *testing.T) {
 	deposit := generateValidDeposit()
 
-	require.Equal(t, uint32(192), deposit.SizeSSZ())
+	require.Equal(t, uint32(192), karalabessz.Size(deposit))
 }
 
 func TestDeposit_HashTreeRootWith(t *testing.T) {
diff --git a/mod/consensus-types/pkg/types/deposits.go b/mod/consensus-types/pkg/types/deposits.go
index fa01d881e..a4f5302f6 100644
--- a/mod/consensus-types/pkg/types/deposits.go
+++ b/mod/consensus-types/pkg/types/deposits.go
@@ -34,8 +34,8 @@ type Deposits []*Deposit
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the SSZ encoded size in bytes for the Deposits.
-func (ds Deposits) SizeSSZ(bool) uint32 {
-	return ssz.SizeSliceOfStaticObjects(([]*Deposit)(ds))
+func (ds Deposits) SizeSSZ(siz *ssz.Sizer, _ bool) uint32 {
+	return ssz.SizeSliceOfStaticObjects(siz, ([]*Deposit)(ds))
 }
 
 // DefineSSZ defines the SSZ encoding for the Deposits object.
diff --git a/mod/consensus-types/pkg/types/eth1data.go b/mod/consensus-types/pkg/types/eth1data.go
index b5849067d..38613854a 100644
--- a/mod/consensus-types/pkg/types/eth1data.go
+++ b/mod/consensus-types/pkg/types/eth1data.go
@@ -74,7 +74,7 @@ func (e *Eth1Data) New(
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the Eth1Data object in SSZ encoding.
-func (*Eth1Data) SizeSSZ() uint32 {
+func (*Eth1Data) SizeSSZ(*ssz.Sizer) uint32 {
 	return Eth1DataSize
 }
 
@@ -92,7 +92,7 @@ func (e *Eth1Data) HashTreeRoot() common.Root {
 
 // MarshalSSZ marshals the Eth1Data object to SSZ format.
 func (e *Eth1Data) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, e.SizeSSZ())
+	buf := make([]byte, ssz.Size(e))
 	return buf, ssz.EncodeToBytes(buf, e)
 }
 
diff --git a/mod/consensus-types/pkg/types/eth1data_test.go b/mod/consensus-types/pkg/types/eth1data_test.go
index 54df9231a..7171e159b 100644
--- a/mod/consensus-types/pkg/types/eth1data_test.go
+++ b/mod/consensus-types/pkg/types/eth1data_test.go
@@ -26,6 +26,7 @@ import (
 
 	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	karalabessz "github.com/karalabe/ssz"
 	"github.com/stretchr/testify/require"
 )
 
@@ -66,7 +67,7 @@ func TestEth1Data_SizeSSZ(t *testing.T) {
 		common.ExecutionHash{},
 	)
 
-	size := eth1Data.SizeSSZ()
+	size := karalabessz.Size(eth1Data)
 	require.Equal(t, uint32(72), size)
 }
 
diff --git a/mod/consensus-types/pkg/types/fork.go b/mod/consensus-types/pkg/types/fork.go
index 2f0bc087b..224172807 100644
--- a/mod/consensus-types/pkg/types/fork.go
+++ b/mod/consensus-types/pkg/types/fork.go
@@ -77,7 +77,7 @@ func (f *Fork) New(
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the SSZ encoded size of the Fork object in bytes.
-func (f *Fork) SizeSSZ() uint32 {
+func (f *Fork) SizeSSZ(*ssz.Sizer) uint32 {
 	return ForkSize
 }
 
@@ -90,7 +90,7 @@ func (f *Fork) DefineSSZ(codec *ssz.Codec) {
 
 // MarshalSSZ marshals the Fork object to SSZ format.
 func (f *Fork) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, f.SizeSSZ())
+	buf := make([]byte, ssz.Size(f))
 	return buf, ssz.EncodeToBytes(buf, f)
 }
 
diff --git a/mod/consensus-types/pkg/types/fork_data.go b/mod/consensus-types/pkg/types/fork_data.go
index 75d34a8c9..07e21253a 100644
--- a/mod/consensus-types/pkg/types/fork_data.go
+++ b/mod/consensus-types/pkg/types/fork_data.go
@@ -59,7 +59,7 @@ func (fd *ForkData) New(
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the SigningData object in SSZ encoding.
-func (*ForkData) SizeSSZ() uint32 {
+func (*ForkData) SizeSSZ(*ssz.Sizer) uint32 {
 	//nolint:mnd // 32+4 = 36.
 	return 36
 }
@@ -83,7 +83,7 @@ func (fd *ForkData) MarshalSSZTo(buf []byte) ([]byte, error) {
 
 // MarshalSSZ marshals the ForkData object to SSZ format.
 func (fd *ForkData) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, fd.SizeSSZ())
+	buf := make([]byte, ssz.Size(fd))
 	return fd.MarshalSSZTo(buf)
 }
 
diff --git a/mod/consensus-types/pkg/types/fork_data_test.go b/mod/consensus-types/pkg/types/fork_data_test.go
index 22e94e11f..7ba4e355b 100644
--- a/mod/consensus-types/pkg/types/fork_data_test.go
+++ b/mod/consensus-types/pkg/types/fork_data_test.go
@@ -27,6 +27,7 @@ import (
 	types "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	karalabessz "github.com/karalabe/ssz"
 	"github.com/stretchr/testify/require"
 )
 
@@ -59,8 +60,7 @@ func TestForkData_SizeSSZ(t *testing.T) {
 		GenesisValidatorsRoot: common.Root{},
 	}
 
-	size := forkData.SizeSSZ()
-
+	size := karalabessz.Size(forkData)
 	require.Equal(t, uint32(36), size)
 }
 
diff --git a/mod/consensus-types/pkg/types/fork_test.go b/mod/consensus-types/pkg/types/fork_test.go
index 83f5acc89..2662679ad 100644
--- a/mod/consensus-types/pkg/types/fork_test.go
+++ b/mod/consensus-types/pkg/types/fork_test.go
@@ -27,6 +27,7 @@ import (
 	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	karalabessz "github.com/karalabe/ssz"
 	"github.com/stretchr/testify/require"
 )
 
@@ -61,7 +62,7 @@ func TestFork_SizeSSZ(t *testing.T) {
 		Epoch:           math.Epoch(1000),
 	}
 
-	size := fork.SizeSSZ()
+	size := karalabessz.Size(fork)
 	require.Equal(t, uint32(16), size)
 }
 
diff --git a/mod/consensus-types/pkg/types/genesis.go b/mod/consensus-types/pkg/types/genesis.go
index 6dc80054e..813209187 100644
--- a/mod/consensus-types/pkg/types/genesis.go
+++ b/mod/consensus-types/pkg/types/genesis.go
@@ -21,6 +21,7 @@
 package types
 
 import (
+	"fmt"
 	"math/big"
 
 	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
@@ -33,6 +34,11 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/version"
 )
 
+const (
+	defaultGasLimit      = math.U64(30000000)
+	defaultBaseFeePerGas = int64(3906250)
+)
+
 // Genesis is a struct that contains the genesis information
 // need to start the beacon chain.
 //
@@ -131,33 +137,48 @@ func DefaultGenesisDeneb() *Genesis[
 func DefaultGenesisExecutionPayloadHeaderDeneb() (
 	*ExecutionPayloadHeader, error,
 ) {
-	return &ExecutionPayloadHeader{
-		ParentHash:   common.ExecutionHash{},
-		FeeRecipient: common.ExecutionAddress{},
-		StateRoot: byteslib.ToBytes32(
-			hex.MustToBytes(
-				"0x12965ab9cbe2d2203f61d23636eb7e998f167cb79d02e452f532535641e35bcc",
-			),
+	stateRoot, err := byteslib.ToBytes32(
+		hex.MustToBytes(
+			"0x12965ab9cbe2d2203f61d23636eb7e998f167cb79d02e452f532535641e35bcc",
 		),
-		ReceiptsRoot: byteslib.ToBytes32(
-			hex.MustToBytes(
-				"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
-			),
+	)
+	if err != nil {
+		return nil, fmt.Errorf("failed generating state root: %w", err)
+	}
+
+	receiptsRoot, err := byteslib.ToBytes32(
+		hex.MustToBytes(
+			"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
 		),
-		LogsBloom: [256]byte{},
-		Random:    common.Bytes32{},
-		Number:    0,
-		//nolint:mnd // default value.
-		GasLimit:  math.U64(30000000),
-		GasUsed:   0,
-		Timestamp: 0,
-		ExtraData: make([]byte, constants.ExtraDataLength),
-		//nolint:mnd // default value.
-		BaseFeePerGas: math.NewU256FromBigInt(big.NewInt(3906250)),
+	)
+	if err != nil {
+		return nil, fmt.Errorf("failed generating receipts root: %w", err)
+	}
+
+	baseFeePerGas, err := math.NewU256FromBigInt(
+		big.NewInt(defaultBaseFeePerGas),
+	)
+	if err != nil {
+		return nil, fmt.Errorf("failed setting base fee per gas: %w", err)
+	}
+
+	return &ExecutionPayloadHeader{
+		ParentHash:    common.ExecutionHash{},
+		FeeRecipient:  common.ExecutionAddress{},
+		StateRoot:     stateRoot,
+		ReceiptsRoot:  receiptsRoot,
+		LogsBloom:     [256]byte{},
+		Random:        common.Bytes32{},
+		Number:        0,
+		GasLimit:      defaultGasLimit,
+		GasUsed:       0,
+		Timestamp:     0,
+		ExtraData:     make([]byte, constants.ExtraDataLength),
+		BaseFeePerGas: baseFeePerGas,
 		BlockHash: common.NewExecutionHashFromHex(
 			"0xcfff92cd918a186029a847b59aca4f83d3941df5946b06bca8de0861fc5d0850",
 		),
-		TransactionsRoot: engineprimitives.BartioTransactions(nil).
+		TransactionsRoot: engineprimitives.Transactions(nil).
 			HashTreeRoot(),
 		WithdrawalsRoot: engineprimitives.Withdrawals(nil).HashTreeRoot(),
 		BlobGasUsed:     0,
diff --git a/mod/consensus-types/pkg/types/header.go b/mod/consensus-types/pkg/types/header.go
index f1a91e432..8ba0807bd 100644
--- a/mod/consensus-types/pkg/types/header.go
+++ b/mod/consensus-types/pkg/types/header.go
@@ -42,15 +42,15 @@ var (
 // BeaconBlockHeader represents the base of a beacon block header.
 type BeaconBlockHeader struct {
 	// Slot represents the position of the block in the chain.
-	Slot math.Slot
+	Slot math.Slot `json:"slot"`
 	// ProposerIndex is the index of the validator who proposed the block.
-	ProposerIndex math.ValidatorIndex
+	ProposerIndex math.ValidatorIndex `json:"proposer_index"`
 	// ParentBlockRoot is the hash of the parent block
-	ParentBlockRoot common.Root
+	ParentBlockRoot common.Root `json:"parent_block_root"`
 	// StateRoot is the hash of the state at the block.
-	StateRoot common.Root
+	StateRoot common.Root `json:"state_root"`
 	// BodyRoot is the root of the block body.
-	BodyRoot common.Root
+	BodyRoot common.Root `json:"body_root"`
 }
 
 /* -------------------------------------------------------------------------- */
@@ -97,7 +97,7 @@ func (b *BeaconBlockHeader) New(
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the BeaconBlockHeader object in SSZ encoding.
-func (b *BeaconBlockHeader) SizeSSZ() uint32 {
+func (b *BeaconBlockHeader) SizeSSZ(*ssz.Sizer) uint32 {
 	return BeaconBlockHeaderSize
 }
 
@@ -112,7 +112,7 @@ func (b *BeaconBlockHeader) DefineSSZ(codec *ssz.Codec) {
 
 // MarshalSSZ marshals the BeaconBlockBody object to SSZ format.
 func (b *BeaconBlockHeader) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, b.SizeSSZ())
+	buf := make([]byte, ssz.Size(b))
 	return buf, ssz.EncodeToBytes(buf, b)
 }
 
@@ -174,6 +174,22 @@ func (b *BeaconBlockHeader) GetTree() (*fastssz.Node, error) {
 /*                            Getters and Setters                             */
 /* -------------------------------------------------------------------------- */
 
+// Equals returns true if the Withdrawal is equal to the other.
+func (b *BeaconBlockHeader) Equals(rhs *BeaconBlockHeader) bool {
+	switch {
+	case b == nil && rhs == nil:
+		return true
+	case b != nil && rhs != nil:
+		return b.Slot == rhs.Slot &&
+			b.ProposerIndex == rhs.ProposerIndex &&
+			b.ParentBlockRoot == rhs.ParentBlockRoot &&
+			b.StateRoot == rhs.StateRoot &&
+			b.BodyRoot == rhs.BodyRoot
+	default:
+		return false
+	}
+}
+
 // GetSlot retrieves the slot of the BeaconBlockHeader.
 func (b *BeaconBlockHeader) GetSlot() math.Slot {
 	return b.Slot
diff --git a/mod/consensus-types/pkg/types/header_test.go b/mod/consensus-types/pkg/types/header_test.go
index f04ab2c3c..7c7382aed 100644
--- a/mod/consensus-types/pkg/types/header_test.go
+++ b/mod/consensus-types/pkg/types/header_test.go
@@ -27,9 +27,90 @@ import (
 	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	karalabessz "github.com/karalabe/ssz"
 	"github.com/stretchr/testify/require"
 )
 
+func TestBeaconBlockHeader_Equals(t *testing.T) {
+	var (
+		slot            = math.Slot(100)
+		valIdx          = math.ValidatorIndex(200)
+		parentBlockRoot = common.Root{1}
+		stateRoot       = common.Root{2}
+		bodyRoot        = common.Root{3}
+
+		lhs = types.NewBeaconBlockHeader(
+			slot, valIdx, parentBlockRoot, stateRoot, bodyRoot,
+		)
+	)
+
+	tests := []struct {
+		name string
+		rhs  *types.BeaconBlockHeader
+		want bool
+	}{
+		{
+			name: "equal",
+			rhs: types.NewBeaconBlockHeader(
+				slot, valIdx, parentBlockRoot, stateRoot, bodyRoot,
+			),
+			want: true,
+		},
+		{
+			name: "slot differs",
+			rhs: types.NewBeaconBlockHeader(
+				2*slot, valIdx, parentBlockRoot, stateRoot, bodyRoot,
+			),
+			want: false,
+		},
+		{
+			name: "validator index differs",
+			rhs: types.NewBeaconBlockHeader(
+				slot, 2*valIdx, parentBlockRoot, stateRoot, bodyRoot,
+			),
+			want: false,
+		},
+		{
+			name: "parent block root differs",
+			rhs: types.NewBeaconBlockHeader(
+				slot, valIdx, common.Root{0xff}, stateRoot, bodyRoot,
+			),
+			want: false,
+		},
+		{
+			name: "state root differs",
+			rhs: types.NewBeaconBlockHeader(
+				slot, valIdx, parentBlockRoot, common.Root{0xff}, bodyRoot,
+			),
+			want: false,
+		},
+		{
+			name: "body root differs",
+			rhs: types.NewBeaconBlockHeader(
+				slot, valIdx, parentBlockRoot, stateRoot, common.Root{0xff},
+			),
+			want: false,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got1 := lhs.Equals(tt.rhs)
+			require.Equal(t, tt.want, got1)
+
+			// check commutativity as well
+			got2 := tt.rhs.Equals(lhs)
+			require.Equal(t, got1, got2)
+
+			// copies stays equal/disequal
+			rhsCopy := &types.BeaconBlockHeader{}
+			*rhsCopy = *tt.rhs
+			got3 := rhsCopy.Equals(lhs)
+			require.Equal(t, got1, got3)
+		})
+	}
+}
+
 func TestBeaconBlockHeader_Serialization(t *testing.T) {
 	original := types.NewBeaconBlockHeader(
 		math.Slot(100),
@@ -64,7 +145,7 @@ func TestBeaconBlockHeader_SizeSSZ(t *testing.T) {
 		common.Root{},
 	)
 
-	size := header.SizeSSZ()
+	size := karalabessz.Size(header)
 	require.Equal(t, uint32(112), size)
 }
 
diff --git a/mod/consensus-types/pkg/types/payload.go b/mod/consensus-types/pkg/types/payload.go
index 83cb2a3ec..68a88c431 100644
--- a/mod/consensus-types/pkg/types/payload.go
+++ b/mod/consensus-types/pkg/types/payload.go
@@ -80,14 +80,14 @@ type ExecutionPayload struct {
 
 // SizeSSZ returns either the static size of the object if fixed == true, or
 // the total size otherwise.
-func (p *ExecutionPayload) SizeSSZ(fixed bool) uint32 {
+func (p *ExecutionPayload) SizeSSZ(siz *ssz.Sizer, fixed bool) uint32 {
 	var size = ExecutionPayloadStaticSize
 	if fixed {
 		return size
 	}
-	size += ssz.SizeDynamicBytes(p.ExtraData)
-	size += ssz.SizeSliceOfDynamicBytes(p.Transactions)
-	size += ssz.SizeSliceOfStaticObjects(p.Withdrawals)
+	size += ssz.SizeDynamicBytes(siz, p.ExtraData)
+	size += ssz.SizeSliceOfDynamicBytes(siz, p.Transactions)
+	size += ssz.SizeSliceOfStaticObjects(siz, p.Withdrawals)
 	return size
 }
 
@@ -128,11 +128,21 @@ func (p *ExecutionPayload) DefineSSZ(codec *ssz.Codec) {
 		constants.MaxBytesPerTx,
 	)
 	ssz.DefineSliceOfStaticObjectsContent(codec, &p.Withdrawals, 16)
+
+	// Post Shangai an EL explicitly check that Withdrawals are not nil
+	// (instead empty slices are fine). Currently BeaconKit duly builds
+	// a block with Withdrawals set to empty slice if there are no
+	// withdrawals) but as soon as the block is returned by CometBFT
+	// for verification, the SSZ decoding sets the empty slice to nil.
+	// This code change solves the issue.
+	if p.Withdrawals == nil {
+		p.Withdrawals = make([]*engineprimitives.Withdrawal, 0)
+	}
 }
 
 // MarshalSSZ serializes the ExecutionPayload object into a slice of bytes.
 func (p *ExecutionPayload) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, p.SizeSSZ(false))
+	buf := make([]byte, ssz.Size(p))
 	return buf, ssz.EncodeToBytes(buf, p)
 }
 
@@ -273,7 +283,7 @@ func (p *ExecutionPayload) GetTree() (*fastssz.Node, error) {
 /* -------------------------------------------------------------------------- */
 
 // MarshalJSON marshals as JSON.
-func (p *ExecutionPayload) MarshalJSON() ([]byte, error) {
+func (p ExecutionPayload) MarshalJSON() ([]byte, error) {
 	type ExecutionPayload struct {
 		ParentHash    common.ExecutionHash           `json:"parentHash"`
 		FeeRecipient  common.ExecutionAddress        `json:"feeRecipient"`
@@ -551,22 +561,11 @@ func (p *ExecutionPayload) GetExcessBlobGas() math.U64 {
 }
 
 // ToHeader converts the ExecutionPayload to an ExecutionPayloadHeader.
-func (p *ExecutionPayload) ToHeader(
-	_ uint64,
-	eth1ChainID uint64,
-) (*ExecutionPayloadHeader, error) {
-	var txsRoot common.Root
-
-	// TODO: This is live on bArtio with a bug and needs to be hardforked
-	// off of. This is a temporary solution to avoid breaking changes.
-	//nolint:mnd // don't want the circular dep.
-	if eth1ChainID == 80084 {
-		txsRoot = engineprimitives.BartioTransactions(
-			p.GetTransactions(),
-		).HashTreeRoot()
-	} else {
-		txsRoot = p.GetTransactions().HashTreeRoot()
-	}
+func (p *ExecutionPayload) ToHeader() (
+	*ExecutionPayloadHeader,
+	error,
+) {
+	txsRoot := p.GetTransactions().HashTreeRoot()
 
 	switch p.Version() {
 	case version.Deneb, version.DenebPlus:
diff --git a/mod/consensus-types/pkg/types/payload_header.go b/mod/consensus-types/pkg/types/payload_header.go
index a2c046cb5..65b89983c 100644
--- a/mod/consensus-types/pkg/types/payload_header.go
+++ b/mod/consensus-types/pkg/types/payload_header.go
@@ -82,7 +82,9 @@ type ExecutionPayloadHeader struct {
 
 // Empty returns an empty ExecutionPayload for the given fork version.
 func (h *ExecutionPayloadHeader) Empty() *ExecutionPayloadHeader {
-	return &ExecutionPayloadHeader{}
+	return &ExecutionPayloadHeader{
+		BaseFeePerGas: &uint256.Int{},
+	}
 }
 
 // NewFromSSZ returns a new ExecutionPayloadHeader from the given SSZ bytes.
@@ -107,13 +109,13 @@ func (h *ExecutionPayloadHeader) NewFromJSON(
 
 // SizeSSZ returns either the static size of the object if fixed == true, or
 // the total size otherwise.
-func (h *ExecutionPayloadHeader) SizeSSZ(fixed bool) uint32 {
+func (h *ExecutionPayloadHeader) SizeSSZ(siz *ssz.Sizer, fixed bool) uint32 {
 	//nolint:mnd // todo fix.
 	var size = uint32(584)
 	if fixed {
 		return size
 	}
-	size += ssz.SizeDynamicBytes(h.ExtraData)
+	size += ssz.SizeDynamicBytes(siz, h.ExtraData)
 
 	return size
 }
@@ -148,7 +150,7 @@ func (h *ExecutionPayloadHeader) DefineSSZ(codec *ssz.Codec) {
 // MarshalSSZ serializes the ExecutionPayloadHeader object into a slice of
 // bytes.
 func (h *ExecutionPayloadHeader) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, h.SizeSSZ(false))
+	buf := make([]byte, ssz.Size(h))
 	return buf, ssz.EncodeToBytes(buf, h)
 }
 
diff --git a/mod/consensus-types/pkg/types/payload_header_test.go b/mod/consensus-types/pkg/types/payload_header_test.go
index 091ef0981..18b960759 100644
--- a/mod/consensus-types/pkg/types/payload_header_test.go
+++ b/mod/consensus-types/pkg/types/payload_header_test.go
@@ -32,6 +32,7 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/version"
 	ssz "github.com/ferranbt/fastssz"
+	karalabessz "github.com/karalabe/ssz"
 	"github.com/stretchr/testify/require"
 )
 
@@ -229,7 +230,7 @@ func TestExecutionPayloadHeader_UnmarshalSSZ_EmptyBuf(t *testing.T) {
 
 func TestExecutionPayloadHeader_SizeSSZ(t *testing.T) {
 	header := generateExecutionPayloadHeader()
-	size := header.SizeSSZ(true)
+	size := karalabessz.Size(header)
 	require.Equal(t, uint32(584), size)
 }
 
diff --git a/mod/consensus-types/pkg/types/payload_test.go b/mod/consensus-types/pkg/types/payload_test.go
index c88dd9da5..3bee02117 100644
--- a/mod/consensus-types/pkg/types/payload_test.go
+++ b/mod/consensus-types/pkg/types/payload_test.go
@@ -31,6 +31,7 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/json"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/version"
+	karalabessz "github.com/karalabe/ssz"
 	"github.com/stretchr/testify/require"
 )
 
@@ -87,7 +88,7 @@ func TestExecutionPayload_Serialization(t *testing.T) {
 
 func TestExecutionPayload_SizeSSZ(t *testing.T) {
 	payload := generateExecutionPayload()
-	size := payload.SizeSSZ(false)
+	size := karalabessz.Size(payload)
 	require.Equal(t, uint32(578), size)
 
 	state := &types.ExecutionPayload{}
@@ -159,6 +160,20 @@ func TestExecutionPayload_MarshalJSON(t *testing.T) {
 	require.Equal(t, payload, &unmarshalled)
 }
 
+func TestExecutionPayload_MarshalJSON_ValueAndPointer(t *testing.T) {
+	val := types.ExecutionPayload{}
+
+	// Marshal on raw val uses default json marshal
+	valSerialized, err := json.Marshal(val)
+	require.NoError(t, err)
+
+	// Marshal on ptr val uses implemented MarshalJSON
+	ptrSerialized, err := json.Marshal(&val)
+	require.NoError(t, err)
+
+	require.Equal(t, valSerialized, ptrSerialized)
+}
+
 func TestExecutionPayload_IsNil(t *testing.T) {
 	var payload *types.ExecutionPayload
 	require.True(t, payload.IsNil())
@@ -200,15 +215,13 @@ func TestExecutionPayload_ToHeader(t *testing.T) {
 		ExtraData:     []byte{},
 		BaseFeePerGas: &math.U256{},
 		BlockHash:     common.ExecutionHash{},
-		Transactions:  [][]byte{[]byte{0x01}},
+		Transactions:  [][]byte{{0x01}},
 		Withdrawals:   []*engineprimitives.Withdrawal{},
 		BlobGasUsed:   math.U64(0),
 		ExcessBlobGas: math.U64(0),
 	}
 
-	header, err := payload.ToHeader(
-		uint64(16), uint64(80087),
-	)
+	header, err := payload.ToHeader()
 	require.NoError(t, err)
 	require.NotNil(t, header)
 
diff --git a/mod/consensus-types/pkg/types/signing_data.go b/mod/consensus-types/pkg/types/signing_data.go
index 5cb37855c..15b023cc4 100644
--- a/mod/consensus-types/pkg/types/signing_data.go
+++ b/mod/consensus-types/pkg/types/signing_data.go
@@ -44,7 +44,7 @@ type SigningData struct {
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the SigningData object in SSZ encoding.
-func (*SigningData) SizeSSZ() uint32 {
+func (*SigningData) SizeSSZ(_ *ssz.Sizer) uint32 {
 	//nolint:mnd // 32*2 = 64.
 	return 64
 }
@@ -68,7 +68,7 @@ func (s *SigningData) MarshalSSZTo(buf []byte) ([]byte, error) {
 
 // MarshalSSZ marshals the SigningData object to SSZ format.
 func (s *SigningData) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, s.SizeSSZ())
+	buf := make([]byte, ssz.Size(s))
 	return s.MarshalSSZTo(buf)
 }
 
diff --git a/mod/consensus-types/pkg/types/slashing_info.go b/mod/consensus-types/pkg/types/slashing_info.go
index d57790c33..e8ec194ff 100644
--- a/mod/consensus-types/pkg/types/slashing_info.go
+++ b/mod/consensus-types/pkg/types/slashing_info.go
@@ -72,7 +72,7 @@ func (s *SlashingInfo) New(slot, index math.U64) *SlashingInfo {
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the SlashingInfo object in SSZ encoding.
-func (*SlashingInfo) SizeSSZ() uint32 {
+func (*SlashingInfo) SizeSSZ(*ssz.Sizer) uint32 {
 	return SlashingInfoSize
 }
 
@@ -89,7 +89,7 @@ func (s *SlashingInfo) HashTreeRoot() common.Root {
 
 // MarshalSSZ marshals the SlashingInfo object to SSZ format.
 func (s *SlashingInfo) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, s.SizeSSZ())
+	buf := make([]byte, ssz.Size(s))
 	return buf, ssz.EncodeToBytes(buf, s)
 }
 
diff --git a/mod/consensus-types/pkg/types/state.go b/mod/consensus-types/pkg/types/state.go
index d48f36a8c..c9dfd3975 100644
--- a/mod/consensus-types/pkg/types/state.go
+++ b/mod/consensus-types/pkg/types/state.go
@@ -69,7 +69,7 @@ type BeaconState[
 	NextWithdrawalValidatorIndex math.ValidatorIndex
 
 	// Slashing
-	Slashings     []uint64
+	Slashings     []math.Gwei
 	TotalSlashing math.Gwei
 }
 
@@ -97,7 +97,7 @@ func (st *BeaconState[
 	randaoMixes []common.Bytes32,
 	nextWithdrawalIndex uint64,
 	nextWithdrawalValidatorIndex math.ValidatorIndex,
-	slashings []uint64,
+	slashings []math.Gwei,
 	totalSlashing math.Gwei,
 ) (*BeaconState[
 	BeaconBlockHeaderT,
@@ -141,7 +141,7 @@ func (st *BeaconState[
 // SizeSSZ returns the ssz encoded size in bytes for the BeaconState object.
 func (st *BeaconState[
 	_, _, _, _, _, _, _, _, _, _,
-]) SizeSSZ(fixed bool) uint32 {
+]) SizeSSZ(siz *ssz.Sizer, fixed bool) uint32 {
 	var size uint32 = 300
 
 	if fixed {
@@ -149,13 +149,13 @@ func (st *BeaconState[
 	}
 
 	// Dynamic size fields
-	size += ssz.SizeSliceOfStaticBytes(st.BlockRoots)
-	size += ssz.SizeSliceOfStaticBytes(st.StateRoots)
-	size += ssz.SizeDynamicObject(st.LatestExecutionPayloadHeader)
-	size += ssz.SizeSliceOfStaticObjects(st.Validators)
-	size += ssz.SizeSliceOfUint64s(st.Balances)
-	size += ssz.SizeSliceOfStaticBytes(st.RandaoMixes)
-	size += ssz.SizeSliceOfUint64s(st.Slashings)
+	size += ssz.SizeSliceOfStaticBytes(siz, st.BlockRoots)
+	size += ssz.SizeSliceOfStaticBytes(siz, st.StateRoots)
+	size += ssz.SizeDynamicObject(siz, st.LatestExecutionPayloadHeader)
+	size += ssz.SizeSliceOfStaticObjects(siz, st.Validators)
+	size += ssz.SizeSliceOfUint64s(siz, st.Balances)
+	size += ssz.SizeSliceOfStaticBytes(siz, st.RandaoMixes)
+	size += ssz.SizeSliceOfUint64s(siz, st.Slashings)
 
 	return size
 }
@@ -210,7 +210,7 @@ func (st *BeaconState[
 func (st *BeaconState[
 	_, _, _, _, _, _, _, _, _, _,
 ]) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, st.SizeSSZ(false))
+	buf := make([]byte, ssz.Size(st))
 	return buf, ssz.EncodeToBytes(buf, st)
 }
 
@@ -378,7 +378,7 @@ func (st *BeaconState[
 	}
 	subIndx = hh.Index()
 	for _, i := range st.Slashings {
-		hh.AppendUint64(i)
+		hh.AppendUint64(uint64(i))
 	}
 	hh.FillUpTo32()
 	numItems = uint64(len(st.Slashings))
diff --git a/mod/consensus-types/pkg/types/state_test.go b/mod/consensus-types/pkg/types/state_test.go
index a5c34606a..c4ef1ab19 100644
--- a/mod/consensus-types/pkg/types/state_test.go
+++ b/mod/consensus-types/pkg/types/state_test.go
@@ -100,7 +100,7 @@ func generateValidBeaconState() *types.BeaconState[
 		},
 		Balances:                     []uint64{32000000000, 31000000000},
 		RandaoMixes:                  generateRandomBytes32(65536),
-		Slashings:                    []uint64{1000000000, 2000000000},
+		Slashings:                    []math.Gwei{1000000000, 2000000000},
 		NextWithdrawalIndex:          7,
 		NextWithdrawalValidatorIndex: 8,
 		TotalSlashing:                3000000000,
@@ -174,7 +174,7 @@ func TestBeaconStateMarshalUnmarshalSSZ(t *testing.T) {
 	require.EqualValues(t, genState, newState)
 
 	// Check if the state size is greater than 0
-	require.Positive(t, genState.SizeSSZ(false))
+	require.Positive(t, karalabessz.Size(genState))
 }
 
 func TestHashTreeRoot(t *testing.T) {
diff --git a/mod/consensus-types/pkg/types/validator.go b/mod/consensus-types/pkg/types/validator.go
index 21c25287a..0b5454ae0 100644
--- a/mod/consensus-types/pkg/types/validator.go
+++ b/mod/consensus-types/pkg/types/validator.go
@@ -84,8 +84,9 @@ func NewValidatorFromDeposit(
 	return &Validator{
 		Pubkey:                pubkey,
 		WithdrawalCredentials: withdrawalCredentials,
-		EffectiveBalance: min(
-			amount-amount%effectiveBalanceIncrement,
+		EffectiveBalance: ComputeEffectiveBalance(
+			amount,
+			effectiveBalanceIncrement,
 			maxEffectiveBalance,
 		),
 		Slashed:                    false,
@@ -96,6 +97,17 @@ func NewValidatorFromDeposit(
 	}
 }
 
+func ComputeEffectiveBalance(
+	amount math.Gwei,
+	effectiveBalanceIncrement math.Gwei,
+	maxEffectiveBalance math.Gwei,
+) math.Gwei {
+	return min(
+		amount-amount%effectiveBalanceIncrement,
+		maxEffectiveBalance,
+	)
+}
+
 // Empty creates an empty Validator.
 func (*Validator) Empty() *Validator {
 	return &Validator{}
@@ -124,7 +136,7 @@ func (v *Validator) New(
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the Validator object in SSZ encoding.
-func (*Validator) SizeSSZ() uint32 {
+func (*Validator) SizeSSZ(*ssz.Sizer) uint32 {
 	return ValidatorSize
 }
 
@@ -147,7 +159,7 @@ func (v *Validator) HashTreeRoot() common.Root {
 
 // MarshalSSZ marshals the Validator object to SSZ format.
 func (v *Validator) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, v.SizeSSZ())
+	buf := make([]byte, ssz.Size(v))
 	return buf, ssz.EncodeToBytes(buf, v)
 }
 
diff --git a/mod/consensus-types/pkg/types/validators.go b/mod/consensus-types/pkg/types/validators.go
index 017eb9b0e..5ef3b7547 100644
--- a/mod/consensus-types/pkg/types/validators.go
+++ b/mod/consensus-types/pkg/types/validators.go
@@ -30,8 +30,8 @@ const MaxValidators = 1099511627776
 type Validators []*Validator
 
 // SizeSSZ returns the SSZ encoded size in bytes for the Validators.
-func (vs Validators) SizeSSZ(bool) uint32 {
-	return ssz.SizeSliceOfStaticObjects(([]*Validator)(vs))
+func (vs Validators) SizeSSZ(siz *ssz.Sizer, _ bool) uint32 {
+	return ssz.SizeSliceOfStaticObjects(siz, ([]*Validator)(vs))
 }
 
 // DefineSSZ defines the SSZ encoding for the Validators object.
diff --git a/mod/consensus-types/pkg/types/withdrawal_credentials.go b/mod/consensus-types/pkg/types/withdrawal_credentials.go
index 9f0f25d99..1956de94c 100644
--- a/mod/consensus-types/pkg/types/withdrawal_credentials.go
+++ b/mod/consensus-types/pkg/types/withdrawal_credentials.go
@@ -42,7 +42,7 @@ func NewCredentialsFromExecutionAddress(
 	address common.ExecutionAddress,
 ) WithdrawalCredentials {
 	credentials := WithdrawalCredentials{}
-	credentials[0] = 0x01
+	credentials[0] = EthSecp256k1CredentialPrefix
 	copy(credentials[12:], address[:])
 	return credentials
 }
diff --git a/mod/consensus/go.mod b/mod/consensus/go.mod
index 2ebd673de..c54fae65a 100644
--- a/mod/consensus/go.mod
+++ b/mod/consensus/go.mod
@@ -18,8 +18,8 @@ require (
 	cosmossdk.io/log v1.4.1
 	cosmossdk.io/store v1.1.1-0.20240418092142-896cdf1971bc
 	github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8
-	github.com/berachain/beacon-kit/mod/cli v0.0.0-00010101000000-000000000000
-	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685
+	github.com/berachain/beacon-kit/mod/cli v0.0.0-20241107170417-7905e3d59a1d
+	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0
 	github.com/berachain/beacon-kit/mod/log v0.0.0-20240821000339-4d4242ba4a50
 	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570
@@ -99,7 +99,7 @@ require (
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
 	github.com/fatih/color v1.17.0 // indirect
 	github.com/felixge/httpsnoop v1.0.4 // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 // indirect
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 // indirect
 	github.com/fsnotify/fsnotify v1.7.0 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
 	github.com/go-kit/kit v0.13.0 // indirect
@@ -165,7 +165,7 @@ require (
 	github.com/olekukonko/tablewriter v0.0.5 // indirect
 	github.com/opencontainers/image-spec v1.1.0 // indirect
 	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
-	github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/phuslu/log v1.0.110 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
@@ -182,7 +182,7 @@ require (
 	github.com/rs/zerolog v1.33.0 // indirect
 	github.com/sagikazarmark/locafero v0.6.0 // indirect
 	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
-	github.com/sasha-s/go-deadlock v0.3.1 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
 	github.com/shirou/gopsutil v3.21.11+incompatible // indirect
 	github.com/spf13/afero v1.11.0 // indirect
 	github.com/spf13/cast v1.7.0 // indirect
@@ -203,18 +203,18 @@ require (
 	gitlab.com/yawning/secp256k1-voi v0.0.0-20230925100816-f2616030848b // indirect
 	gitlab.com/yawning/tuplehash v0.0.0-20230713102510-df83abbf9a02 // indirect
 	go.opencensus.io v0.24.0 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
 	golang.org/x/sync v0.8.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/term v0.23.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/term v0.25.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
 	google.golang.org/grpc v1.65.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/ini.v1 v1.67.0 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
diff --git a/mod/consensus/go.sum b/mod/consensus/go.sum
index 6c6bbab6c..17410374c 100644
--- a/mod/consensus/go.sum
+++ b/mod/consensus/go.sum
@@ -74,8 +74,8 @@ github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 h1:
 github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8/go.mod h1:3wR01SglBZ+HvDvhbugz/Mxem22JUThJRwo2Ec8Q0No=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df h1:mnD1LKqDQ0n+OFdDqOuvKaEiUKRJzsO4V0wyyn/gJYg=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df/go.mod h1:bTFB4Rdvm7D/WdwPYkqQ+8T0XOMBv0pzXfp1E46BFX8=
-github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685 h1:pTvESOpJ0a6oCV81+pec+zoTBmojZ8C1+7fd4HtKpbI=
-github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685/go.mod h1:jduqdSJEtO5eL43l/MpfnIK81o81m10wzt6Gb++Qi9M=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f h1:Vzglhdv60M7LBS3FBuqK0eUX8vYJBJnL/RwYpxUswpo=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f/go.mod h1:cZd8cFZ+ylhh3/NUbrdXO2ri1/7KOaYBjo1B8MgbgMM=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720 h1:rVltwwt4JAhpvqeRDZ8J07e9XM+jzfDCJEghPA4r5lg=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720/go.mod h1:kGxAesqTkt75+QYQ73O9I5PqAicSL9JGh5wypiWgb8I=
 github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0 h1:kCSrkb/uVXfMKJPKjf0c7nlJkwn5cNwMxtzRW4zNq2A=
@@ -222,8 +222,8 @@ github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
 github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
 github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
 github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=
 github.com/fortytw2/leaktest v1.3.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=
 github.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=
@@ -478,9 +478,8 @@ github.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0Mw
 github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
 github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
 github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
-github.com/petermattis/goid v0.0.0-20180202154549-b0b1615b78e5/go.mod h1:jvVRKCrJTQWu0XVbaOlby/2lO20uSCHEMzzplHXte1o=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 h1:CtBLeckhC0zAXgp5V8uR30CNYH0JgCJoxCg5+6i2zQk=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
 github.com/phuslu/log v1.0.110 h1:9WQnpL1/CBi3IwZaVadYnI/i0bgobTvit2ayXIgSg4c=
 github.com/phuslu/log v1.0.110/go.mod h1:F8osGJADo5qLK/0F88djWwdyoZZ9xDJQL1HYRHFEkS0=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
@@ -536,8 +535,8 @@ github.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3
 github.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=
 github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
 github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
-github.com/sasha-s/go-deadlock v0.3.1 h1:sqv7fDNShgjcaxkO0JNcOAlr8B9+cV5Ey/OB71efZx0=
-github.com/sasha-s/go-deadlock v0.3.1/go.mod h1:F73l+cr82YSh10GxyRI6qZiCgK64VaZjwesgfQ1/iLM=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=
 github.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
 github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
@@ -616,8 +615,8 @@ golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACk
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200728195943-123391ffb6de/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
@@ -646,8 +645,8 @@ golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96b
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -699,19 +698,19 @@ golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/sys v0.21.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.23.0 h1:F6D4vR+EHoL9/sWAWgAR1H2DcHr4PareCbAaCo1RpuU=
-golang.org/x/term v0.23.0/go.mod h1:DgV24QBUrK6jhZXl+20l6UWznPlwAHm1Q1mGHtydmSk=
+golang.org/x/term v0.25.0 h1:WtHI/ltw4NvSUig5KARz9h521QvRC8RmF/cuYqifU24=
+golang.org/x/term v0.25.0/go.mod h1:RPyXicDX+6vLxogjjRxjgD2TKtmAO6NZBsBRfrOLu7M=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -737,10 +736,10 @@ google.golang.org/genproto v0.0.0-20200423170343-7949de9c1215/go.mod h1:55QSHmfG
 google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
 google.golang.org/genproto v0.0.0-20220314164441-57ef72a4c106/go.mod h1:hAL49I2IFola2sVEjAn7MEwsja0xp51I0tlGAf9hz4E=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 h1:CUiCqkPw1nNrNQzCCG4WA65m0nAmQiwXHpub3dNyruU=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4/go.mod h1:EvuUDCulqGgV80RvP1BHuom+smhX4qtlhnNatHuroGQ=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d h1:PksQg4dV6Sem3/HkBX+Ltq8T0ke0PKIRBNBatoDTVls=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d/go.mod h1:s7iA721uChleev562UJO2OYB0PPT9CMFjV+Ce7VJH5M=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 h1:0+ozOGcrp+Y8Aq8TLNN2Aliibms5LEzsq99ZZmAGYm0=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094/go.mod h1:fJ/e3If/Q67Mj99hin0hMhiNyCRmt6BQ2aWIJshUSJw=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d h1:JU0iKnSg02Gmb5ZdV8nYsKEKsP6o/FGVWTrw4i1DA9A=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
@@ -768,8 +767,8 @@ google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp0
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
diff --git a/mod/consensus/pkg/cometbft/service/abci.go b/mod/consensus/pkg/cometbft/service/abci.go
index 35428068e..9e65a59e9 100644
--- a/mod/consensus/pkg/cometbft/service/abci.go
+++ b/mod/consensus/pkg/cometbft/service/abci.go
@@ -18,7 +18,7 @@
 // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
 // TITLE.
 //
-//nolint:contextcheck // its fine.
+
 package cometbft
 
 import (
@@ -36,13 +36,17 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/json"
 	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 	cmtabci "github.com/cometbft/cometbft/abci/types"
-	cmtproto "github.com/cometbft/cometbft/api/cometbft/types/v1"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
+	sdkversion "github.com/cosmos/cosmos-sdk/version"
 	"github.com/sourcegraph/conc/iter"
 )
 
-//nolint:gocognit // todo fix.
+var (
+	errInvalidHeight         = errors.New("invalid height")
+	errNilFinalizeBlockState = errors.New("finalizeBlockState is nil")
+)
+
 func (s *Service[LoggerT]) InitChain(
 	_ context.Context,
 	req *cmtabci.InitChainRequest,
@@ -55,9 +59,6 @@ func (s *Service[LoggerT]) InitChain(
 		)
 	}
 
-	// On a new chain, we consider the init chain block height as 0, even though
-	// req.InitialHeight is 1 by default.
-	initHeader := cmtproto.Header{ChainID: req.ChainId, Time: req.Time}
 	s.logger.Info(
 		"InitChain",
 		"initialHeight",
@@ -70,78 +71,53 @@ func (s *Service[LoggerT]) InitChain(
 	// proposing
 	// or processing the first block or not.
 	s.initialHeight = req.InitialHeight
-	if s.initialHeight == 0 { // If initial height is 0, set it to 1
+	if s.initialHeight == 0 {
 		s.initialHeight = 1
 	}
 
 	// if req.InitialHeight is > 1, then we set the initial version on all
 	// stores
 	if req.InitialHeight > 1 {
-		initHeader.Height = req.InitialHeight
 		if err := s.sm.CommitMultiStore().
 			SetInitialVersion(req.InitialHeight); err != nil {
 			return nil, err
 		}
 	}
 
-	s.setState(execModeFinalize)
-
-	defer func() {
-		// InitChain represents the state of the application BEFORE the first
-		// block, i.e. the genesis block. This means that when processing the
-		// app's InitChain handler, the block height is zero by default.
-		// However, after Commit is called
-		// the height needs to reflect the true block height.
-		initHeader.Height = req.InitialHeight
-		s.finalizeBlockState.SetContext(
-			s.finalizeBlockState.Context().WithBlockHeader(initHeader),
-		)
-	}()
-
-	if s.finalizeBlockState == nil {
-		return nil, errors.New("finalizeBlockState is nil")
-	}
+	s.finalizeBlockState = s.resetState()
 
-	// add block gas meter for any genesis transactions (allow infinite gas)
-	s.finalizeBlockState.SetContext(
+	resValidators, err := s.initChainer(
 		s.finalizeBlockState.Context(),
+		req.AppStateBytes,
 	)
-
-	res, err := s.initChainer(s.finalizeBlockState.Context(), req)
 	if err != nil {
 		return nil, err
 	}
 
-	if res == nil {
-		return nil, errors.New(
-			"application init chain handler returned a nil response",
-		)
-	}
-
+	// check validators
 	if len(req.Validators) > 0 {
-		if len(req.Validators) != len(res.Validators) {
+		if len(req.Validators) != len(resValidators) {
 			return nil, fmt.Errorf(
 				"len(RequestInitChain.Validators) != len(GenesisValidators) (%d != %d)",
 				len(req.Validators),
-				len(res.Validators),
+				len(resValidators),
 			)
 		}
 
 		sort.Sort(cmtabci.ValidatorUpdates(req.Validators))
 
-		for i := range res.Validators {
-			if req.Validators[i].Power != res.Validators[i].Power {
+		for i := range resValidators {
+			if req.Validators[i].Power != resValidators[i].Power {
 				return nil, errors.New("mismatched power")
 			}
 			if !bytes.Equal(
-				req.Validators[i].PubKeyBytes, res.Validators[i].
+				req.Validators[i].PubKeyBytes, resValidators[i].
 					PubKeyBytes) {
 				return nil, errors.New("mismatched pubkey bytes")
 			}
 
-			if req.
-				Validators[i].PubKeyType != res.
-				Validators[i].PubKeyType {
+			if req.Validators[i].PubKeyType !=
+				resValidators[i].PubKeyType {
 				return nil, errors.New("mismatched pubkey types")
 			}
 		}
@@ -151,8 +127,8 @@ func (s *Service[LoggerT]) InitChain(
 	// from
 	// this FinalizeBlockState.
 	return &cmtabci.InitChainResponse{
-		ConsensusParams: res.ConsensusParams,
-		Validators:      res.Validators,
+		ConsensusParams: req.ConsensusParams,
+		Validators:      resValidators,
 		AppHash:         s.sm.CommitMultiStore().LastCommitID().Hash,
 	}, nil
 }
@@ -160,10 +136,10 @@ func (s *Service[LoggerT]) InitChain(
 // InitChainer initializes the chain.
 func (s *Service[LoggerT]) initChainer(
 	ctx sdk.Context,
-	req *cmtabci.InitChainRequest,
-) (*cmtabci.InitChainResponse, error) {
+	appStateBytes []byte,
+) ([]cmtabci.ValidatorUpdate, error) {
 	var genesisState map[string]json.RawMessage
-	if err := json.Unmarshal(req.AppStateBytes, &genesisState); err != nil {
+	if err := json.Unmarshal(appStateBytes, &genesisState); err != nil {
 		return nil, err
 	}
 	valUpdates, err := s.Middleware.InitGenesis(
@@ -174,17 +150,10 @@ func (s *Service[LoggerT]) initChainer(
 		return nil, err
 	}
 
-	convertedValUpdates, err := iter.MapErr(
+	return iter.MapErr(
 		valUpdates,
 		convertValidatorUpdate[cmtabci.ValidatorUpdate],
 	)
-	if err != nil {
-		return nil, err
-	}
-
-	return &cmtabci.InitChainResponse{
-		Validators: convertedValUpdates,
-	}, nil
 }
 
 func (s *Service[LoggerT]) Info(
@@ -192,21 +161,18 @@ func (s *Service[LoggerT]) Info(
 	*cmtabci.InfoRequest,
 ) (*cmtabci.InfoResponse, error) {
 	lastCommitID := s.sm.CommitMultiStore().LastCommitID()
-	appVersion := InitialAppVersion
+	appVersion := initialAppVersion
 	if lastCommitID.Version > 0 {
-		ctx, err := s.CreateQueryContext(lastCommitID.Version, false)
-		if err != nil {
-			return nil, fmt.Errorf("failed creating query context: %w", err)
-		}
-		appVersion, err = s.AppVersion(ctx)
+		var err error
+		appVersion, err = s.appVersion()
 		if err != nil {
 			return nil, fmt.Errorf("failed getting app version: %w", err)
 		}
 	}
 
 	return &cmtabci.InfoResponse{
-		Data:             s.name,
-		Version:          s.version,
+		Data:             appName,
+		Version:          sdkversion.Version,
 		AppVersion:       appVersion,
 		LastBlockHeight:  lastCommitID.Version,
 		LastBlockAppHash: lastCommitID.Hash,
@@ -219,13 +185,18 @@ func (s *Service[LoggerT]) PrepareProposal(
 	_ context.Context,
 	req *cmtabci.PrepareProposalRequest,
 ) (*cmtabci.PrepareProposalResponse, error) {
-	s.setState(execModePrepareProposal)
-
 	// CometBFT must never call PrepareProposal with a height of 0.
 	if req.Height < 1 {
-		return nil, errors.New("PrepareProposal called with invalid height")
+		return nil, fmt.Errorf(
+			"prepareProposal at height %v: %w",
+			req.Height,
+			errInvalidHeight,
+		)
 	}
 
+	// Always reset state given that PrepareProposal can timeout
+	// and be called again in a subsequent round.
+	s.prepareProposalState = s.resetState()
 	s.prepareProposalState.SetContext(
 		s.getContextForProposal(
 			s.prepareProposalState.Context(),
@@ -233,15 +204,20 @@ func (s *Service[LoggerT]) PrepareProposal(
 		),
 	)
 
-	s.prepareProposalState.SetContext(s.prepareProposalState.Context())
-
+	var slotData *types.SlotData[
+		*ctypes.AttestationData,
+		*ctypes.SlashingInfo,
+	]
+	slotData = slotData.New(
+		math.Slot(req.GetHeight()),
+		nil,
+		nil,
+		req.GetProposerAddress(),
+		req.GetTime(),
+	)
 	blkBz, sidecarsBz, err := s.Middleware.PrepareProposal(
-		s.prepareProposalState.Context(), &types.SlotData[
-			*ctypes.AttestationData,
-			*ctypes.SlashingInfo,
-		]{
-			Slot: math.Slot(req.Height),
-		},
+		s.prepareProposalState.Context(),
+		slotData,
 	)
 	if err != nil {
 		s.logger.Error(
@@ -269,11 +245,13 @@ func (s *Service[LoggerT]) ProcessProposal(
 ) (*cmtabci.ProcessProposalResponse, error) {
 	// CometBFT must never call ProcessProposal with a height of 0.
 	if req.Height < 1 {
-		return nil, errors.New("ProcessProposal called with invalid height")
+		return nil, fmt.Errorf(
+			"processProposal at height %v: %w",
+			req.Height,
+			errInvalidHeight,
+		)
 	}
 
-	s.setState(execModeProcessProposal)
-
 	// Since the application can get access to FinalizeBlock state and write to
 	// it, we must be sure to reset it in case ProcessProposal timeouts and is
 	// called
@@ -281,8 +259,9 @@ func (s *Service[LoggerT]) ProcessProposal(
 	// processed the first block, as we want to avoid overwriting the
 	// finalizeState
 	// after state changes during InitChain.
+	s.processProposalState = s.resetState()
 	if req.Height > s.initialHeight {
-		s.setState(execModeFinalize)
+		s.finalizeBlockState = s.resetState()
 	}
 
 	s.processProposalState.SetContext(
@@ -317,34 +296,20 @@ func (s *Service[LoggerT]) ProcessProposal(
 }
 
 func (s *Service[LoggerT]) internalFinalizeBlock(
-	ctx context.Context,
 	req *cmtabci.FinalizeBlockRequest,
 ) (*cmtabci.FinalizeBlockResponse, error) {
 	if err := s.validateFinalizeBlockHeight(req); err != nil {
 		return nil, err
 	}
 
+	// finalizeBlockState should be set on InitChain or ProcessProposal. If it
+	// is nil, it means we are replaying this block and we need to set the state
+	// here given that during block replay ProcessProposal is not executed by
+	// CometBFT.
 	if s.finalizeBlockState == nil {
-		s.setState(execModeFinalize)
-	}
-	if s.finalizeBlockState == nil {
-		return nil, errors.New("finalizeBlockState is nil")
-	}
-	s.finalizeBlockState.SetContext(s.finalizeBlockState.Context())
-
-	// First check for an abort signal after beginBlock, as it's the first place
-	// we spend any significant amount of time.
-	select {
-	case <-ctx.Done():
-		return nil, ctx.Err()
-	default:
-		// continue
+		s.finalizeBlockState = s.resetState()
 	}
 
-	s.finalizeBlockState.SetContext(
-		s.finalizeBlockState.Context(),
-	)
-
 	// Iterate over all raw transactions in the proposal and attempt to execute
 	// them, gathering the execution results.
 	//
@@ -352,14 +317,6 @@ func (s *Service[LoggerT]) internalFinalizeBlock(
 	// vote extensions, so skip those.
 	txResults := make([]*cmtabci.ExecTxResult, 0, len(req.Txs))
 	for range req.Txs {
-		// check after every tx if we should abort
-		select {
-		case <-ctx.Done():
-			return nil, ctx.Err()
-		default:
-			// continue
-		}
-
 		//nolint:mnd // its okay for now.
 		txResults = append(txResults, &cmtabci.ExecTxResult{
 			Codespace: "sdk",
@@ -386,15 +343,6 @@ func (s *Service[LoggerT]) internalFinalizeBlock(
 		return nil, err
 	}
 
-	// check after finalizeBlock if we should abort, to avoid propagating the
-	// result
-	select {
-	case <-ctx.Done():
-		return nil, ctx.Err()
-	default:
-		// continue
-	}
-
 	return &cmtabci.FinalizeBlockResponse{
 		TxResults:             txResults,
 		ValidatorUpdates:      valUpdates,
@@ -406,7 +354,11 @@ func (s *Service[_]) validateFinalizeBlockHeight(
 	req *cmtabci.FinalizeBlockRequest,
 ) error {
 	if req.Height < 1 {
-		return fmt.Errorf("invalid height: %d", req.Height)
+		return fmt.Errorf(
+			"finalizeBlock at height %v: %w",
+			req.Height,
+			errInvalidHeight,
+		)
 	}
 
 	lastBlockHeight := s.LastBlockHeight()
@@ -442,7 +394,7 @@ func (s *Service[_]) FinalizeBlock(
 	_ context.Context,
 	req *cmtabci.FinalizeBlockRequest,
 ) (*cmtabci.FinalizeBlockResponse, error) {
-	res, err := s.internalFinalizeBlock(context.Background(), req)
+	res, err := s.internalFinalizeBlock(req)
 	if res != nil {
 		res.AppHash = s.workingHash()
 	}
@@ -461,7 +413,9 @@ func (s *Service[LoggerT]) Commit(
 	context.Context, *cmtabci.CommitRequest,
 ) (*cmtabci.CommitResponse, error) {
 	if s.finalizeBlockState == nil {
-		return nil, errors.New("finalizeBlockState is nil")
+		// This is unexpected since CometBFT should call Commit only
+		// after FinalizeBlock has been called. Panic appeases nilaway.
+		panic(fmt.Errorf("commit: %w", errNilFinalizeBlockState))
 	}
 	header := s.finalizeBlockState.Context().BlockHeader()
 	retainHeight := s.GetBlockRetentionHeight(header.Height)
@@ -470,16 +424,13 @@ func (s *Service[LoggerT]) Commit(
 	if ok {
 		rms.SetCommitHeader(header)
 	}
-
 	s.sm.CommitMultiStore().Commit()
 
-	resp := &cmtabci.CommitResponse{
-		RetainHeight: retainHeight,
-	}
-
 	s.finalizeBlockState = nil
 
-	return resp, nil
+	return &cmtabci.CommitResponse{
+		RetainHeight: retainHeight,
+	}, nil
 }
 
 // workingHash gets the apphash that will be finalized in commit.
@@ -492,11 +443,12 @@ func (s *Service[LoggerT]) Commit(
 func (s *Service[LoggerT]) workingHash() []byte {
 	// Write the FinalizeBlock state into branched storage and commit the
 	// MultiStore. The write to the FinalizeBlock state writes all state
-	// transitions to the root
-	// MultiStore (s.sm.CommitMultiStore()) so when Commit() is called it
-	// persists those values.
+	// transitions to the root MultiStore (s.sm.CommitMultiStore())
+	// so when Commit() is called it persists those values.
 	if s.finalizeBlockState == nil {
-		panic("workingHash() called before FinalizeBlock()")
+		// this is unexpected since workingHash is called only after
+		// internalFinalizeBlock. Panic appeases nilaway.
+		panic(fmt.Errorf("workingHash: %w", errNilFinalizeBlockState))
 	}
 	s.finalizeBlockState.ms.Write()
 
@@ -519,14 +471,16 @@ func (s *Service[LoggerT]) getContextForProposal(
 	ctx sdk.Context,
 	height int64,
 ) sdk.Context {
-	if height == s.initialHeight {
-		if s.finalizeBlockState == nil {
-			return ctx
-		}
-		ctx, _ = s.finalizeBlockState.Context().CacheContext()
+	if height != s.initialHeight {
 		return ctx
 	}
 
+	if s.finalizeBlockState == nil {
+		// this is unexpected since cometBFT won't call PrepareProposal
+		// on initialHeight. Panic appeases nilaway.
+		panic(fmt.Errorf("getContextForProposal: %w", errNilFinalizeBlockState))
+	}
+	ctx, _ = s.finalizeBlockState.Context().CacheContext()
 	return ctx
 }
 
@@ -542,7 +496,7 @@ func (s *Service[LoggerT]) CreateQueryContext(
 		return sdk.Context{}, errorsmod.Wrapf(
 			sdkerrors.ErrInvalidHeight,
 			"%s is not ready; please wait for first block",
-			s.name,
+			appName,
 		)
 	}
 
diff --git a/mod/consensus/pkg/cometbft/service/helpers.go b/mod/consensus/pkg/cometbft/service/helpers.go
deleted file mode 100644
index bd25e3887..000000000
--- a/mod/consensus/pkg/cometbft/service/helpers.go
+++ /dev/null
@@ -1,135 +0,0 @@
-// SPDX-License-Identifier: BUSL-1.1
-//
-// Copyright (C) 2024, Berachain Foundation. All rights reserved.
-// Use of this software is governed by the Business Source License included
-// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
-//
-// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
-// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
-// VERSIONS OF THE LICENSED WORK.
-//
-// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
-// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
-// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
-//
-// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
-// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
-// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
-// TITLE.
-package cometbft
-
-// package cometbft
-
-// import (
-// 	"sort"
-
-// 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
-// 	cmtabci "github.com/cometbft/cometbft/abci/types"
-// 	v1 "github.com/cometbft/cometbft/api/cometbft/abci/v1"
-// 	sdk "github.com/cosmos/cosmos-sdk/types"
-// )
-
-// // convertPrepareProposalToSlotData converts a prepare proposal request to
-// // a slot data.
-// func (c *ConsensusEngine[
-// 	_, _, _, SlotDataT, _, _,
-// ]) convertPrepareProposalToSlotData(
-// 	ctx sdk.Context,
-// 	req *cmtabci.PrepareProposalRequest,
-// ) (SlotDataT, error) {
-// 	var t SlotDataT
-
-// 	// Get the attestation data from the votes.
-// 	attestationData, err := c.attestationsFromVotes(
-// 		ctx,
-// 		req.LocalLastCommit.Votes,
-// 		//#nosec:G701 // safe.
-// 		math.Slot(req.Height),
-// 	)
-// 	if err != nil {
-// 		return t, err
-// 	}
-
-// 	// Get the slashing info from the misbehaviors.
-// 	slashingInfo, err := c.slashingInfoFromMisbehaviors(
-// 		ctx,
-// 		req.Misbehavior,
-// 	)
-// 	if err != nil {
-// 		return t, err
-// 	}
-
-// 	// Create the slot data.
-// 	t = t.New(
-// 		math.U64(req.Height),
-// 		attestationData,
-// 		slashingInfo,
-// 	)
-// 	return t, nil
-// }
-
-// // attestationsFromVotes returns a list of attestation data from the votes.
-// func (c *ConsensusEngine[
-// 	AttestationDataT, _, _, _, _, _,
-// ]) attestationsFromVotes(
-// 	ctx sdk.Context,
-// 	votes []v1.ExtendedVoteInfo,
-// 	slot math.Slot,
-// ) ([]AttestationDataT, error) {
-// 	var err error
-// 	var index math.U64
-// 	attestations := make([]AttestationDataT, len(votes))
-// 	st := c.sb.StateFromContext(ctx)
-// 	root := st.HashTreeRoot()
-// 	for i, vote := range votes {
-// 		index, err = st.ValidatorIndexByCometBFTAddress(vote.Validator.Address)
-// 		if err != nil {
-// 			return nil, err
-// 		}
-
-// 		var t AttestationDataT
-// 		t = t.New(
-// 			slot,
-// 			index,
-// 			root,
-// 		)
-// 		attestations[i] = t
-// 	}
-
-// 	// Attestations are sorted by index.
-// 	sort.Slice(attestations, func(i, j int) bool {
-// 		return attestations[i].GetIndex() < attestations[j].GetIndex()
-// 	})
-// 	return attestations, nil
-// }
-
-// // slashingInfoFromMisbehaviors returns a list of slashing info from the
-// // comet misbehaviors.
-// func (c *ConsensusEngine[
-// 	_, _, SlashingInfoT, _, _, _,
-// ]) slashingInfoFromMisbehaviors(
-// 	ctx sdk.Context,
-// 	misbehaviors []v1.Misbehavior,
-// ) ([]SlashingInfoT, error) {
-// 	var err error
-// 	var index math.U64
-// 	st := c.sb.StateFromContext(ctx)
-// 	slashingInfo := make([]SlashingInfoT, len(misbehaviors))
-// 	for i, misbehavior := range misbehaviors {
-// 		index, err = st.ValidatorIndexByCometBFTAddress(
-// 			misbehavior.Validator.Address,
-// 		)
-// 		if err != nil {
-// 			return nil, err
-// 		}
-// 		var t SlashingInfoT
-// 		t = t.New(
-// 			//#nosec:G701 // safe.
-// 			math.Slot(misbehavior.GetHeight()),
-// 			index,
-// 		)
-// 		slashingInfo[i] = t
-// 	}
-// 	return slashingInfo, nil
-// }
diff --git a/mod/consensus/pkg/cometbft/service/middleware/abci.go b/mod/consensus/pkg/cometbft/service/middleware/abci.go
index d18027ca3..b31ae1618 100644
--- a/mod/consensus/pkg/cometbft/service/middleware/abci.go
+++ b/mod/consensus/pkg/cometbft/service/middleware/abci.go
@@ -25,12 +25,14 @@ import (
 	"time"
 
 	"github.com/berachain/beacon-kit/mod/consensus/pkg/cometbft/service/encoding"
+	"github.com/berachain/beacon-kit/mod/consensus/pkg/types"
 	"github.com/berachain/beacon-kit/mod/errors"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/async"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/json"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/transition"
 	cmtabci "github.com/cometbft/cometbft/abci/types"
+	sdk "github.com/cosmos/cosmos-sdk/types"
 )
 
 /* -------------------------------------------------------------------------- */
@@ -38,25 +40,20 @@ import (
 /* -------------------------------------------------------------------------- */
 
 // InitGenesis is called by the base app to initialize the state of the.
-func (h *ABCIMiddleware[
-	_, _, GenesisT, _,
-]) InitGenesis(
-	ctx context.Context,
+func (h *ABCIMiddleware[_, _, _, GenesisT, _]) InitGenesis(
+	ctx sdk.Context,
 	bz []byte,
 ) (transition.ValidatorUpdates, error) {
-	var (
-		err             error
-		waitCtx, cancel = context.WithTimeout(ctx, AwaitTimeout)
-	)
+	waitCtx, cancel := context.WithTimeout(ctx, AwaitTimeout)
 	defer cancel()
 
 	data := new(GenesisT)
-	if err = json.Unmarshal(bz, data); err != nil {
+	if err := json.Unmarshal(bz, data); err != nil {
 		h.logger.Error("Failed to unmarshal genesis data", "error", err)
 		return nil, err
 	}
 
-	if err = h.dispatcher.Publish(
+	if err := h.dispatcher.Publish(
 		async.NewEvent(ctx, async.GenesisDataReceived, *data),
 	); err != nil {
 		return nil, err
@@ -66,9 +63,7 @@ func (h *ABCIMiddleware[
 
 // waitForGenesisProcessed waits until the genesis data has been processed and
 // returns the validator updates, or err if the context is cancelled.
-func (h *ABCIMiddleware[
-	_, _, _, _,
-]) waitForGenesisProcessed(
+func (h *ABCIMiddleware[_, _, _, _, _]) waitForGenesisProcessed(
 	ctx context.Context,
 ) (transition.ValidatorUpdates, error) {
 	select {
@@ -85,16 +80,11 @@ func (h *ABCIMiddleware[
 
 // prepareProposal is the internal handler for preparing proposals.
 func (h *ABCIMiddleware[
-	BeaconBlockT, BlobSidecarsT, _, SlotDataT,
-]) PrepareProposal(
-	ctx context.Context,
+	BeaconBlockT, _, BlobSidecarsT, _, SlotDataT]) PrepareProposal(
+	ctx sdk.Context,
 	slotData SlotDataT,
 ) ([]byte, []byte, error) {
 	var (
-		err              error
-		builtBeaconBlock BeaconBlockT
-		builtSidecars    BlobSidecarsT
-		numMsgs          int
 		startTime        = time.Now()
 		awaitCtx, cancel = context.WithTimeout(ctx, AwaitTimeout)
 	)
@@ -102,18 +92,18 @@ func (h *ABCIMiddleware[
 	defer cancel()
 	defer h.metrics.measurePrepareProposalDuration(startTime)
 	// flush the channels to ensure that we are not handling old data.
-	if numMsgs = async.ClearChan(h.subBuiltBeaconBlock); numMsgs > 0 {
+	if numMsgs := async.ClearChan(h.subBuiltBeaconBlock); numMsgs > 0 {
 		h.logger.Error(
 			"WARNING: messages remaining in built beacon block channel",
 			"num_msgs", numMsgs)
 	}
-	if numMsgs = async.ClearChan(h.subBuiltSidecars); numMsgs > 0 {
+	if numMsgs := async.ClearChan(h.subBuiltSidecars); numMsgs > 0 {
 		h.logger.Error(
 			"WARNING: messages remaining in built sidecars channel",
 			"num_msgs", numMsgs)
 	}
 
-	if err = h.dispatcher.Publish(
+	if err := h.dispatcher.Publish(
 		async.NewEvent(
 			ctx, async.NewSlot, slotData,
 		),
@@ -122,13 +112,13 @@ func (h *ABCIMiddleware[
 	}
 
 	// wait for built beacon block
-	builtBeaconBlock, err = h.waitForBuiltBeaconBlock(awaitCtx)
+	builtBeaconBlock, err := h.waitForBuiltBeaconBlock(awaitCtx)
 	if err != nil {
 		return nil, nil, err
 	}
 
 	// wait for built sidecars
-	builtSidecars, err = h.waitForBuiltSidecars(awaitCtx)
+	builtSidecars, err := h.waitForBuiltSidecars(awaitCtx)
 	if err != nil {
 		return nil, nil, err
 	}
@@ -138,7 +128,7 @@ func (h *ABCIMiddleware[
 
 // waitForBuiltBeaconBlock waits for the built beacon block to be received.
 func (h *ABCIMiddleware[
-	BeaconBlockT, BlobSidecarsT, _, SlotDataT,
+	BeaconBlockT, _, BlobSidecarsT, _, SlotDataT,
 ]) waitForBuiltBeaconBlock(
 	ctx context.Context,
 ) (BeaconBlockT, error) {
@@ -152,7 +142,7 @@ func (h *ABCIMiddleware[
 
 // waitForBuiltSidecars waits for the built sidecars to be received.
 func (h *ABCIMiddleware[
-	_, BlobSidecarsT, _, _,
+	_, _, BlobSidecarsT, _, _,
 ]) waitForBuiltSidecars(
 	ctx context.Context,
 ) (BlobSidecarsT, error) {
@@ -167,7 +157,7 @@ func (h *ABCIMiddleware[
 // handleBuiltBeaconBlockAndSidecars gossips the built beacon block and blob
 // sidecars to the network.
 func (h *ABCIMiddleware[
-	BeaconBlockT, BlobSidecarsT, _, _,
+	BeaconBlockT, _, BlobSidecarsT, _, _,
 ]) handleBuiltBeaconBlockAndSidecars(
 	bb BeaconBlockT,
 	sc BlobSidecarsT,
@@ -190,27 +180,23 @@ func (h *ABCIMiddleware[
 // ProcessProposal processes the proposal for the ABCI middleware.
 // It handles both the beacon block and blob sidecars concurrently.
 func (h *ABCIMiddleware[
-	BeaconBlockT, BlobSidecarsT, _, _,
+	BeaconBlockT, BeaconBlockHeaderT, BlobSidecarsT, _, _,
 ]) ProcessProposal(
-	ctx context.Context,
+	ctx sdk.Context,
 	req *cmtabci.ProcessProposalRequest,
 ) (*cmtabci.ProcessProposalResponse, error) {
 	var (
-		err              error
 		startTime        = time.Now()
-		blk              BeaconBlockT
-		numMsgs          int
-		sidecars         BlobSidecarsT
 		awaitCtx, cancel = context.WithTimeout(ctx, AwaitTimeout)
 	)
 	defer cancel()
 	// flush the channels to ensure that we are not handling old data.
-	if numMsgs = async.ClearChan(h.subBBVerified); numMsgs > 0 {
+	if numMsgs := async.ClearChan(h.subBBVerified); numMsgs > 0 {
 		h.logger.Error(
 			"WARNING: messages remaining in beacon block verification channel",
 			"num_msgs", numMsgs)
 	}
-	if numMsgs = async.ClearChan(h.subSCVerified); numMsgs > 0 {
+	if numMsgs := async.ClearChan(h.subSCVerified); numMsgs > 0 {
 		h.logger.Error(
 			"WARNING: messages remaining in sidecar verification channel",
 			"num_msgs", numMsgs)
@@ -218,33 +204,50 @@ func (h *ABCIMiddleware[
 
 	defer h.metrics.measureProcessProposalDuration(startTime)
 
-	// Request the beacon block.
-	if blk, err = encoding.
+	// Decode the beacon block.
+	blk, err := encoding.
 		UnmarshalBeaconBlockFromABCIRequest[BeaconBlockT](
-		req, 0, h.chainSpec.ActiveForkVersionForSlot(math.U64(req.Height)),
-	); err != nil {
+		req,
+		BeaconBlockTxIndex,
+		h.chainSpec.ActiveForkVersionForSlot(math.U64(req.Height)),
+	)
+	if err != nil {
 		return h.createProcessProposalResponse(errors.WrapNonFatal(err))
 	}
 
 	// notify that the beacon block has been received.
-	if err = h.dispatcher.Publish(
-		async.NewEvent(ctx, async.BeaconBlockReceived, blk),
-	); err != nil {
+	var consensusBlk *types.ConsensusBlock[BeaconBlockT]
+	consensusBlk = consensusBlk.New(
+		blk,
+		req.GetProposerAddress(),
+		req.GetTime(),
+	)
+	blkEvent := async.NewEvent(ctx, async.BeaconBlockReceived, consensusBlk)
+	if err = h.dispatcher.Publish(blkEvent); err != nil {
 		return h.createProcessProposalResponse(errors.WrapNonFatal(err))
 	}
 
-	// Request the blob sidecars.
-	if sidecars, err = encoding.
+	// Decode the blob sidecars.
+	sidecars, err := encoding.
 		UnmarshalBlobSidecarsFromABCIRequest[BlobSidecarsT](
-		req, 1,
-	); err != nil {
+		req,
+		BlobSidecarsTxIndex,
+	)
+	if err != nil {
 		return h.createProcessProposalResponse(errors.WrapNonFatal(err))
 	}
 
 	// notify that the sidecars have been received.
-	if err = h.dispatcher.Publish(
-		async.NewEvent(ctx, async.SidecarsReceived, sidecars),
-	); err != nil {
+	var consensusSidecars *types.ConsensusSidecars[
+		BlobSidecarsT,
+		BeaconBlockHeaderT,
+	]
+	consensusSidecars = consensusSidecars.New(
+		sidecars,
+		blk.GetHeader(),
+	)
+	blobEvent := async.NewEvent(ctx, async.SidecarsReceived, consensusSidecars)
+	if err = h.dispatcher.Publish(blobEvent); err != nil {
 		return h.createProcessProposalResponse(errors.WrapNonFatal(err))
 	}
 
@@ -263,7 +266,7 @@ func (h *ABCIMiddleware[
 // waitForBeaconBlockVerification waits for the built beacon block to be
 // verified.
 func (h *ABCIMiddleware[
-	BeaconBlockT, _, _, _,
+	BeaconBlockT, _, _, _, _,
 ]) waitForBeaconBlockVerification(
 	ctx context.Context,
 ) (BeaconBlockT, error) {
@@ -277,7 +280,7 @@ func (h *ABCIMiddleware[
 
 // waitForSidecarVerification waits for the built sidecars to be verified.
 func (h *ABCIMiddleware[
-	_, BlobSidecarsT, _, _,
+	_, _, BlobSidecarsT, _, _,
 ]) waitForSidecarVerification(
 	ctx context.Context,
 ) (BlobSidecarsT, error) {
@@ -292,7 +295,7 @@ func (h *ABCIMiddleware[
 // createResponse generates the appropriate ProcessProposalResponse based on the
 // error.
 func (*ABCIMiddleware[
-	BeaconBlockT, _, BlobSidecarsT, _,
+	BeaconBlockT, _, _, BlobSidecarsT, _,
 ]) createProcessProposalResponse(
 	err error,
 ) (*cmtabci.ProcessProposalResponse, error) {
@@ -310,16 +313,12 @@ func (*ABCIMiddleware[
 
 // EndBlock returns the validator set updates from the beacon state.
 func (h *ABCIMiddleware[
-	BeaconBlockT, BlobSidecarsT, _, _,
+	BeaconBlockT, _, BlobSidecarsT, _, _,
 ]) FinalizeBlock(
-	ctx context.Context, req *cmtabci.FinalizeBlockRequest,
+	ctx sdk.Context,
+	req *cmtabci.FinalizeBlockRequest,
 ) (transition.ValidatorUpdates, error) {
-	var (
-		err              error
-		blk              BeaconBlockT
-		blobs            BlobSidecarsT
-		awaitCtx, cancel = context.WithTimeout(ctx, AwaitTimeout)
-	)
+	awaitCtx, cancel := context.WithTimeout(ctx, AwaitTimeout)
 	defer cancel()
 	// flush the channel to ensure that we are not handling old data.
 	if numMsgs := async.ClearChan(h.subFinalValidatorUpdates); numMsgs > 0 {
@@ -328,7 +327,7 @@ func (h *ABCIMiddleware[
 			"num_msgs", numMsgs)
 	}
 
-	blk, blobs, err = encoding.
+	blk, blobs, err := encoding.
 		ExtractBlobsAndBlockFromRequest[BeaconBlockT, BlobSidecarsT](
 		req,
 		BeaconBlockTxIndex,
@@ -342,9 +341,18 @@ func (h *ABCIMiddleware[
 	}
 
 	// notify that the final beacon block has been received.
-	if err = h.dispatcher.Publish(
-		async.NewEvent(ctx, async.FinalBeaconBlockReceived, blk),
-	); err != nil {
+	var consensusBlk *types.ConsensusBlock[BeaconBlockT]
+	consensusBlk = consensusBlk.New(
+		blk,
+		req.GetProposerAddress(),
+		req.GetTime(),
+	)
+	blkEvent := async.NewEvent(
+		ctx,
+		async.FinalBeaconBlockReceived,
+		consensusBlk,
+	)
+	if err = h.dispatcher.Publish(blkEvent); err != nil {
 		return nil, err
 	}
 
@@ -362,7 +370,7 @@ func (h *ABCIMiddleware[
 // waitForFinalValidatorUpdates waits for the final validator updates to be
 // received.
 func (h *ABCIMiddleware[
-	_, _, _, _,
+	_, _, _, _, _,
 ]) waitForFinalValidatorUpdates(
 	ctx context.Context,
 ) (transition.ValidatorUpdates, error) {
diff --git a/mod/consensus/pkg/cometbft/service/middleware/middleware.go b/mod/consensus/pkg/cometbft/service/middleware/middleware.go
index 9f6a3e076..a323ec063 100644
--- a/mod/consensus/pkg/cometbft/service/middleware/middleware.go
+++ b/mod/consensus/pkg/cometbft/service/middleware/middleware.go
@@ -32,7 +32,8 @@ import (
 
 // ABCIMiddleware is a middleware between ABCI and the validator logic.
 type ABCIMiddleware[
-	BeaconBlockT BeaconBlock[BeaconBlockT],
+	BeaconBlockT BeaconBlock[BeaconBlockT, BeaconBlockHeaderT],
+	BeaconBlockHeaderT any,
 	BlobSidecarsT BlobSidecars[BlobSidecarsT],
 	GenesisT json.Unmarshaler,
 	SlotDataT any,
@@ -62,7 +63,8 @@ type ABCIMiddleware[
 
 // NewABCIMiddleware creates a new instance of the Handler struct.
 func NewABCIMiddleware[
-	BeaconBlockT BeaconBlock[BeaconBlockT],
+	BeaconBlockT BeaconBlock[BeaconBlockT, BeaconBlockHeaderT],
+	BeaconBlockHeaderT any,
 	BlobSidecarsT BlobSidecars[BlobSidecarsT],
 	GenesisT json.Unmarshaler,
 	SlotDataT any,
@@ -72,10 +74,10 @@ func NewABCIMiddleware[
 	logger log.Logger,
 	telemetrySink TelemetrySink,
 ) *ABCIMiddleware[
-	BeaconBlockT, BlobSidecarsT, GenesisT, SlotDataT,
+	BeaconBlockT, BeaconBlockHeaderT, BlobSidecarsT, GenesisT, SlotDataT,
 ] {
 	return &ABCIMiddleware[
-		BeaconBlockT, BlobSidecarsT, GenesisT, SlotDataT,
+		BeaconBlockT, BeaconBlockHeaderT, BlobSidecarsT, GenesisT, SlotDataT,
 	]{
 		chainSpec:                chainSpec,
 		dispatcher:               dispatcher,
@@ -91,7 +93,7 @@ func NewABCIMiddleware[
 }
 
 // Start subscribes the middleware to the events it needs to listen for.
-func (am *ABCIMiddleware[_, _, _, _]) Start(
+func (am *ABCIMiddleware[_, _, _, _, _]) Start(
 	_ context.Context,
 ) error {
 	var err error
@@ -129,8 +131,6 @@ func (am *ABCIMiddleware[_, _, _, _]) Start(
 }
 
 // Name returns the name of the middleware.
-func (am *ABCIMiddleware[
-	_, _, _, _,
-]) Name() string {
+func (am *ABCIMiddleware[_, _, _, _, _]) Name() string {
 	return "abci-middleware"
 }
diff --git a/mod/consensus/pkg/cometbft/service/middleware/types.go b/mod/consensus/pkg/cometbft/service/middleware/types.go
index 53423b652..c79e6333d 100644
--- a/mod/consensus/pkg/cometbft/service/middleware/types.go
+++ b/mod/consensus/pkg/cometbft/service/middleware/types.go
@@ -28,11 +28,13 @@ import (
 )
 
 // BeaconBlock is an interface for accessing the beacon block.
-type BeaconBlock[SelfT any] interface {
+type BeaconBlock[BeaconBlockT any, BeaconBlockHeaderT any] interface {
 	constraints.SSZMarshallable
 	constraints.Nillable
-	constraints.Empty[SelfT]
-	NewFromSSZ([]byte, uint32) (SelfT, error)
+	constraints.Empty[BeaconBlockT]
+	NewFromSSZ([]byte, uint32) (BeaconBlockT, error)
+
+	GetHeader() BeaconBlockHeaderT
 }
 
 // TelemetrySink is an interface for sending metrics to a telemetry backend.
diff --git a/mod/consensus/pkg/cometbft/service/options.go b/mod/consensus/pkg/cometbft/service/options.go
index a28c2d52f..753eea21f 100644
--- a/mod/consensus/pkg/cometbft/service/options.go
+++ b/mod/consensus/pkg/cometbft/service/options.go
@@ -81,12 +81,3 @@ func SetChainID[
 ](chainID string) func(*Service[LoggerT]) {
 	return func(s *Service[LoggerT]) { s.chainID = chainID }
 }
-
-func (s *Service[_]) SetName(name string) {
-	s.name = name
-}
-
-// SetVersion sets the application's version string.
-func (s *Service[_]) SetVersion(v string) {
-	s.version = v
-}
diff --git a/mod/consensus/pkg/cometbft/service/service.go b/mod/consensus/pkg/cometbft/service/service.go
index 4e0b05ee7..a506f1c64 100644
--- a/mod/consensus/pkg/cometbft/service/service.go
+++ b/mod/consensus/pkg/cometbft/service/service.go
@@ -23,7 +23,6 @@ package cometbft
 import (
 	"context"
 	"errors"
-	"fmt"
 
 	storetypes "cosmossdk.io/store/types"
 	servercmtlog "github.com/berachain/beacon-kit/mod/consensus/pkg/cometbft/service/log"
@@ -41,21 +40,13 @@ import (
 	"github.com/cometbft/cometbft/proxy"
 	dbm "github.com/cosmos/cosmos-db"
 	sdk "github.com/cosmos/cosmos-sdk/types"
-	"github.com/cosmos/cosmos-sdk/version"
-)
-
-type (
-	execMode uint8
 )
 
 const (
-	execModePrepareProposal execMode = iota
-	execModeProcessProposal
-	execModeFinalize
+	initialAppVersion uint64 = 0
+	appName           string = "beacond"
 )
 
-const InitialAppVersion uint64 = 0
-
 type Service[
 	LoggerT log.AdvancedLogger[LoggerT],
 ] struct {
@@ -63,20 +54,34 @@ type Service[
 	cmtCfg *cmtcfg.Config
 
 	logger     LoggerT
-	name       string
 	sm         *statem.Manager
 	Middleware MiddlewareI
 
+	// prepareProposalState is used for PrepareProposal, which is set based on
+	// the previous block's state. This state is never committed. In case of
+	// multiple consensus rounds, the state is always reset to the previous
+	// block's state.
 	prepareProposalState *state
+
+	// processProposalState is used for ProcessProposal, which is set based on
+	// the previous block's state. This state is never committed. In case of
+	// multiple consensus rounds, the state is always reset to the previous
+	// block's state.
 	processProposalState *state
-	finalizeBlockState   *state
-	interBlockCache      storetypes.MultiStorePersistentCache
-	paramStore           *params.ConsensusParamsStore
-	initialHeight        int64
-	minRetainBlocks      uint64
-
-	// application's version string
-	version string
+
+	// finalizeBlockState is used for FinalizeBlock, which is set based on the
+	// previous block's state. This state is committed. finalizeBlockState is
+	// set
+	// on InitChain and FinalizeBlock and set to nil on Commit.
+	finalizeBlockState *state
+
+	interBlockCache storetypes.MultiStorePersistentCache
+	paramStore      *params.ConsensusParamsStore
+
+	// initialHeight is the initial height at which we start the node
+	initialHeight   int64
+	minRetainBlocks uint64
+
 	chainID string
 }
 
@@ -87,14 +92,12 @@ func NewService[
 	logger LoggerT,
 	db dbm.DB,
 	middleware MiddlewareI,
-	loadLatest bool,
 	cmtCfg *cmtcfg.Config,
 	cs common.ChainSpec,
 	options ...func(*Service[LoggerT]),
 ) *Service[LoggerT] {
 	s := &Service[LoggerT]{
 		logger: logger,
-		name:   "beacond",
 		sm: statem.NewManager(
 			db,
 			servercmtlog.WrapSDKLogger(logger),
@@ -104,7 +107,6 @@ func NewService[
 		paramStore: params.NewConsensusParamsStore(cs),
 	}
 
-	s.SetVersion(version.Version)
 	s.MountStore(storeKey, storetypes.StoreTypeIAVL)
 
 	for _, option := range options {
@@ -115,11 +117,9 @@ func NewService[
 		s.sm.CommitMultiStore().SetInterBlockCache(s.interBlockCache)
 	}
 
-	// Load the s.
-	if loadLatest {
-		if err := s.sm.LoadLatestVersion(); err != nil {
-			panic(err)
-		}
+	// Load latest height, once all stores have been set
+	if err := s.sm.LoadLatestVersion(); err != nil {
+		panic(err)
 	}
 
 	return s
@@ -166,8 +166,6 @@ func (s *Service[_]) Close() error {
 		_ = s.node.Stop()
 	}
 
-	// Close s.db (opened by cosmos-sdk/server/start.go call to openDB)
-
 	s.logger.Info("Closing application.db")
 	if err := s.sm.Close(); err != nil {
 		errs = append(errs, err)
@@ -177,7 +175,7 @@ func (s *Service[_]) Close() error {
 
 // Name returns the name of the cometbft.
 func (s *Service[_]) Name() string {
-	return s.name
+	return appName
 }
 
 // CommitMultiStore returns the CommitMultiStore of the cometbft.
@@ -187,6 +185,10 @@ func (s *Service[_]) CommitMultiStore() storetypes.CommitMultiStore {
 
 // AppVersion returns the application's protocol version.
 func (s *Service[_]) AppVersion(_ context.Context) (uint64, error) {
+	return s.appVersion()
+}
+
+func (s *Service[_]) appVersion() (uint64, error) {
 	cp := s.paramStore.Get()
 	return cp.Version.App, nil
 }
@@ -215,26 +217,16 @@ func (s *Service[_]) setInterBlockCache(
 	s.interBlockCache = cache
 }
 
-func (s *Service[LoggerT]) setState(mode execMode) {
+// resetState provides a fresh state which can be used to reset
+// prepareProposal/processProposal/finalizeBlock State.
+// A state is explicitly returned to avoid false positives from
+// nilaway tool.
+func (s *Service[LoggerT]) resetState() *state {
 	ms := s.sm.CommitMultiStore().CacheMultiStore()
-	baseState := &state{
+	return &state{
 		ms:  ms,
 		ctx: sdk.NewContext(ms, false, servercmtlog.WrapSDKLogger(s.logger)),
 	}
-
-	switch mode {
-	case execModePrepareProposal:
-		s.prepareProposalState = baseState
-
-	case execModeProcessProposal:
-		s.processProposalState = baseState
-
-	case execModeFinalize:
-		s.finalizeBlockState = baseState
-
-	default:
-		panic(fmt.Sprintf("invalid runTxMode for setState: %d", mode))
-	}
 }
 
 // convertValidatorUpdate abstracts the conversion of a
diff --git a/mod/consensus/pkg/cometbft/service/types.go b/mod/consensus/pkg/cometbft/service/types.go
index c2e9f0af8..a0404e588 100644
--- a/mod/consensus/pkg/cometbft/service/types.go
+++ b/mod/consensus/pkg/cometbft/service/types.go
@@ -21,65 +21,30 @@
 package cometbft
 
 import (
-	"context"
-
 	ctypes "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
 	"github.com/berachain/beacon-kit/mod/consensus/pkg/types"
-	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
-	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/transition"
 	cmtabci "github.com/cometbft/cometbft/abci/types"
+	sdk "github.com/cosmos/cosmos-sdk/types"
 )
 
-// AttestationData is an interface for accessing the attestation data.
-type AttestationData[AttestationDataT any] interface {
-	// GetIndex returns the index of the attestation data.
-	GetIndex() math.U64
-	// New creates a new attestation data instance.
-	New(math.U64, math.U64, common.Root) AttestationDataT
-}
-
-// BeaconState is an interface for accessing the beacon state.
-type BeaconState interface {
-	// GetValidatorIndexByCometBFTAddress returns the validator index by the
-	ValidatorIndexByCometBFTAddress(
-		cometBFTAddress []byte,
-	) (math.ValidatorIndex, error)
-	// HashTreeRoot returns the hash tree root of the beacon state.
-	HashTreeRoot() common.Root
-}
-
 type MiddlewareI interface {
 	InitGenesis(
-		ctx context.Context, bz []byte,
+		sdk.Context,
+		[]byte,
 	) (transition.ValidatorUpdates, error)
-	PrepareProposal(context.Context, *types.SlotData[
-		*ctypes.AttestationData,
-		*ctypes.SlashingInfo]) ([]byte, []byte, error)
+	PrepareProposal(
+		sdk.Context,
+		*types.SlotData[
+			*ctypes.AttestationData,
+			*ctypes.SlashingInfo],
+	) ([]byte, []byte, error)
 	ProcessProposal(
-		ctx context.Context, req *cmtabci.ProcessProposalRequest,
+		sdk.Context,
+		*cmtabci.ProcessProposalRequest,
 	) (*cmtabci.ProcessProposalResponse, error)
 	FinalizeBlock(
-		ctx context.Context,
-		req *cmtabci.FinalizeBlockRequest,
+		sdk.Context,
+		*cmtabci.FinalizeBlockRequest,
 	) (transition.ValidatorUpdates, error)
 }
-
-// SlashingInfo is an interface for accessing the slashing info.
-type SlashingInfo[SlashingInfoT any] interface {
-	// New creates a new slashing info instance.
-	New(math.U64, math.U64) SlashingInfoT
-}
-
-// SlotData is an interface for accessing the slot data.
-type SlotData[AttestationDataT, SlashingInfoT, SlotDataT any] interface {
-	// New creates a new slot data instance.
-	New(math.Slot, []AttestationDataT, []SlashingInfoT) SlotDataT
-}
-
-// StorageBackend defines an interface for accessing various storage components
-// required by the beacon node.
-type StorageBackend[BeaconStateT BeaconState] interface {
-	// StateFromContext retrieves the beacon state from the given context.
-	StateFromContext(context.Context) BeaconStateT
-}
diff --git a/mod/consensus/pkg/types/common.go b/mod/consensus/pkg/types/common.go
new file mode 100644
index 000000000..b56df0591
--- /dev/null
+++ b/mod/consensus/pkg/types/common.go
@@ -0,0 +1,43 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package types
+
+import "github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+
+type commonConsensusData struct {
+	// use to verify block builder
+	proposerAddress []byte
+
+	// used to build next block and validate current payload timestamp
+	consensusTime math.U64
+}
+
+// GetProposerAddress returns the address of the validator
+// selected by consensus to propose the block.
+func (c *commonConsensusData) GetProposerAddress() []byte {
+	return c.proposerAddress
+}
+
+// GetConsensusTime returns the timestamp of current consensus request.
+// It is used to build next payload and to validate currentpayload.
+func (c *commonConsensusData) GetConsensusTime() math.U64 {
+	return c.consensusTime
+}
diff --git a/mod/consensus/pkg/types/consensus_block.go b/mod/consensus/pkg/types/consensus_block.go
new file mode 100644
index 000000000..1ca6dc98c
--- /dev/null
+++ b/mod/consensus/pkg/types/consensus_block.go
@@ -0,0 +1,54 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package types
+
+import (
+	"time"
+
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+)
+
+type ConsensusBlock[BeaconBlockT any] struct {
+	blk BeaconBlockT
+
+	// some consensus data useful to build and verify the block
+	*commonConsensusData
+}
+
+// New creates a new ConsensusBlock instance.
+func (b *ConsensusBlock[BeaconBlockT]) New(
+	beaconBlock BeaconBlockT,
+	proposerAddress []byte,
+	consensusTime time.Time,
+) *ConsensusBlock[BeaconBlockT] {
+	b = &ConsensusBlock[BeaconBlockT]{
+		blk: beaconBlock,
+		commonConsensusData: &commonConsensusData{
+			proposerAddress: proposerAddress,
+			consensusTime:   math.U64(consensusTime.Unix()),
+		},
+	}
+	return b
+}
+
+func (b *ConsensusBlock[BeaconBlockT]) GetBeaconBlock() BeaconBlockT {
+	return b.blk
+}
diff --git a/mod/consensus/pkg/types/consensus_sidecars.go b/mod/consensus/pkg/types/consensus_sidecars.go
new file mode 100644
index 000000000..062e4e606
--- /dev/null
+++ b/mod/consensus/pkg/types/consensus_sidecars.go
@@ -0,0 +1,53 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package types
+
+type ConsensusSidecars[SidecarsT any, BeaconBlockHeaderT any] struct {
+	sidecars SidecarsT
+
+	blkHeader BeaconBlockHeaderT
+}
+
+// New creates a new ConsensusSidecars instance.
+func (s *ConsensusSidecars[SidecarsT, BeaconBlockHeaderT]) New(
+	sidecars SidecarsT,
+	blkHeader BeaconBlockHeaderT,
+) *ConsensusSidecars[SidecarsT, BeaconBlockHeaderT] {
+	s = &ConsensusSidecars[SidecarsT, BeaconBlockHeaderT]{
+		sidecars:  sidecars,
+		blkHeader: blkHeader,
+	}
+	return s
+}
+
+func (s *ConsensusSidecars[
+	SidecarsT,
+	_,
+]) GetSidecars() SidecarsT {
+	return s.sidecars
+}
+
+func (s *ConsensusSidecars[
+	SidecarsT,
+	BeaconBlockHeaderT,
+]) GetHeader() BeaconBlockHeaderT {
+	return s.blkHeader
+}
diff --git a/mod/consensus/pkg/types/slot_data.go b/mod/consensus/pkg/types/slot_data.go
index 6a4d3b471..0018b6e8c 100644
--- a/mod/consensus/pkg/types/slot_data.go
+++ b/mod/consensus/pkg/types/slot_data.go
@@ -20,16 +20,23 @@
 
 package types
 
-import "github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+import (
+	"time"
+
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+)
 
 // SlotData represents the data to be used to propose a block.
 type SlotData[AttestationDataT, SlashingInfoT any] struct {
-	// Slot is the slot number of the incoming slot.
-	math.Slot
-	// AttestationData is the attestation data of the incoming slot.
-	AttestationData []AttestationDataT
-	// SlashingInfo is the slashing info of the incoming slot.
-	SlashingInfo []SlashingInfoT
+	// slot is the slot number of the incoming slot.
+	slot math.Slot
+	// attestationData is the attestation data of the incoming slot.
+	attestationData []AttestationDataT
+	// slashingInfo is the slashing info of the incoming slot.
+	slashingInfo []SlashingInfoT
+
+	// some consensus data useful to build and verify the block
+	*commonConsensusData
 }
 
 // New creates a new SlotData instance.
@@ -37,18 +44,24 @@ func (b *SlotData[AttestationDataT, SlashingInfoT]) New(
 	slot math.Slot,
 	attestationData []AttestationDataT,
 	slashingInfo []SlashingInfoT,
+	proposerAddress []byte,
+	consensusTime time.Time,
 ) *SlotData[AttestationDataT, SlashingInfoT] {
 	b = &SlotData[AttestationDataT, SlashingInfoT]{
-		Slot:            slot,
-		AttestationData: attestationData,
-		SlashingInfo:    slashingInfo,
+		slot:            slot,
+		attestationData: attestationData,
+		slashingInfo:    slashingInfo,
+		commonConsensusData: &commonConsensusData{
+			proposerAddress: proposerAddress,
+			consensusTime:   math.U64(consensusTime.Unix()),
+		},
 	}
 	return b
 }
 
 // GetSlot retrieves the slot of the SlotData.
 func (b *SlotData[AttestationDataT, SlashingInfoT]) GetSlot() math.Slot {
-	return b.Slot
+	return b.slot
 }
 
 // GetAttestationData retrieves the attestation data of the SlotData.
@@ -56,7 +69,7 @@ func (b *SlotData[
 	AttestationDataT,
 	SlashingInfoT,
 ]) GetAttestationData() []AttestationDataT {
-	return b.AttestationData
+	return b.attestationData
 }
 
 // GetSlashingInfo retrieves the slashing info of the SlotData.
@@ -64,19 +77,19 @@ func (b *SlotData[
 	AttestationDataT,
 	SlashingInfoT,
 ]) GetSlashingInfo() []SlashingInfoT {
-	return b.SlashingInfo
+	return b.slashingInfo
 }
 
 // SetAttestationData sets the attestation data of the SlotData.
 func (b *SlotData[AttestationDataT, SlashingInfoT]) SetAttestationData(
 	attestationData []AttestationDataT,
 ) {
-	b.AttestationData = attestationData
+	b.attestationData = attestationData
 }
 
 // SetSlashingInfo sets the slashing info of the SlotData.
 func (b *SlotData[AttestationDataT, SlashingInfoT]) SetSlashingInfo(
 	slashingInfo []SlashingInfoT,
 ) {
-	b.SlashingInfo = slashingInfo
+	b.slashingInfo = slashingInfo
 }
diff --git a/mod/da/go.mod b/mod/da/go.mod
index 2d6724b0a..5311d743d 100644
--- a/mod/da/go.mod
+++ b/mod/da/go.mod
@@ -22,7 +22,7 @@ require (
 require (
 	github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e // indirect
 	github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 // indirect
-	github.com/cosmos/crypto v0.1.2 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
 	github.com/google/gofuzz v1.2.0 // indirect
 	github.com/umbracle/fastrlp v0.1.0 // indirect
 )
@@ -42,18 +42,18 @@ require (
 	github.com/cockroachdb/pebble v1.1.1 // indirect
 	github.com/cockroachdb/redact v1.1.5 // indirect
 	github.com/cockroachdb/tokenbucket v0.0.0-20230807174530-cc333fc44b06 // indirect
-	github.com/cometbft/cometbft v1.0.0-rc1.0.20240805092115-3b2c5d9e1843 // indirect
+	github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4 // indirect
 	// indirect
 	github.com/consensys/bavard v0.1.13 // indirect
 	github.com/consensys/gnark-crypto v0.13.0 // indirect
-	github.com/cosmos/gogoproto v1.5.0 // indirect
+	github.com/cosmos/gogoproto v1.7.0 // indirect
 	github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a // indirect
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
 	github.com/deckarep/golang-set/v2 v2.6.0 // indirect
 	github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 // indirect
 	github.com/ethereum/go-ethereum v1.14.7 // indirect
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 // indirect
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
 	github.com/go-kit/log v0.2.1 // indirect
 	github.com/go-logfmt/logfmt v0.6.0 // indirect
@@ -78,7 +78,7 @@ require (
 	github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect
 	github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a // indirect
 	github.com/olekukonko/tablewriter v0.0.5 // indirect
-	github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
 	github.com/prometheus/client_golang v1.20.1 // indirect
@@ -89,21 +89,21 @@ require (
 	github.com/prysmaticlabs/gohashtree v0.0.4-beta.0.20240624100937-73632381301b // indirect
 	github.com/rivo/uniseg v0.4.7 // indirect
 	github.com/rogpeppe/go-internal v1.12.0 // indirect
-	github.com/sasha-s/go-deadlock v0.3.1 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
 	github.com/shirou/gopsutil v3.21.11+incompatible // indirect
 	github.com/supranational/blst v0.3.13 // indirect
 	github.com/syndtr/goleveldb v1.0.1-0.20220721030215-126854af5e6d // indirect
 	github.com/tklauser/go-sysconf v0.3.14 // indirect
 	github.com/tklauser/numcpus v0.8.0 // indirect
 	github.com/yusufpapurcu/wmi v1.2.4 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
 	google.golang.org/grpc v1.65.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 	rsc.io/tmplfunc v0.0.3 // indirect
diff --git a/mod/da/go.sum b/mod/da/go.sum
index de8ab4b12..13d52fc08 100644
--- a/mod/da/go.sum
+++ b/mod/da/go.sum
@@ -54,18 +54,16 @@ github.com/cockroachdb/redact v1.1.5 h1:u1PMllDkdFfPWaNGMyLD1+so+aq3uUItthCFqzwP
 github.com/cockroachdb/redact v1.1.5/go.mod h1:BVNblN9mBWFyMyqK1k3AAiSxhvhfK2oOZZ2lK+dpvRg=
 github.com/cockroachdb/tokenbucket v0.0.0-20230807174530-cc333fc44b06 h1:zuQyyAKVxetITBuuhv3BI9cMrmStnpT18zmgmTxunpo=
 github.com/cockroachdb/tokenbucket v0.0.0-20230807174530-cc333fc44b06/go.mod h1:7nc4anLGjupUW/PeY5qiNYsdNXj7zopG+eqsS7To5IQ=
-github.com/cometbft/cometbft v1.0.0-rc1.0.20240805092115-3b2c5d9e1843 h1:jRYqytam1YhSVjGD85QiqXWCFm1daOw/nXlxbhHwlOA=
-github.com/cometbft/cometbft v1.0.0-rc1.0.20240805092115-3b2c5d9e1843/go.mod h1:qg1b/UyQ+USgmacfaJMZpnnA0wDxWFGBbbYYn9grXkM=
+github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4 h1:LyYO/PPHwQsnGhTNJzWfCi9xg7EEyuMORRqrQZJQjYc=
+github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4/go.mod h1:gYT9oZe8H3xTWgocfjbnOV4v7IjzaEWqM+JJO3Z3R60=
 github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 h1:dEOaTNsJrOTOSysBgAE9pK6zeNASUR6gsFW8s0zcRRU=
 github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4/go.mod h1:NDFKiBBD8HJC6QQLAoUI99YhsiRZtg2+FJWfk6A6m6o=
 github.com/consensys/bavard v0.1.13 h1:oLhMLOFGTLdlda/kma4VOJazblc7IM5y5QPd2A/YjhQ=
 github.com/consensys/bavard v0.1.13/go.mod h1:9ItSMtA/dXMAiL7BG6bqW2m3NdSEObYWoH223nGHukI=
 github.com/consensys/gnark-crypto v0.13.0 h1:VPULb/v6bbYELAPTDFINEVaMTTybV5GLxDdcjnS+4oc=
 github.com/consensys/gnark-crypto v0.13.0/go.mod h1:wKqwsieaKPThcFkHe0d0zMsbHEUWFmZcG7KBCse210o=
-github.com/cosmos/crypto v0.1.2 h1:Yn500sPY+9sKVdhiPUSDtt8JOpBGMB515dOmla4zfls=
-github.com/cosmos/crypto v0.1.2/go.mod h1:b6VWz3HczIpBaQPvI7KrbQeF3pXHh0al3T5e0uwMBQw=
-github.com/cosmos/gogoproto v1.5.0 h1:SDVwzEqZDDBoslaeZg+dGE55hdzHfgUA40pEanMh52o=
-github.com/cosmos/gogoproto v1.5.0/go.mod h1:iUM31aofn3ymidYG6bUR5ZFrk+Om8p5s754eMUcyp8I=
+github.com/cosmos/gogoproto v1.7.0 h1:79USr0oyXAbxg3rspGh/m4SWNyoz/GLaAh0QlCe2fro=
+github.com/cosmos/gogoproto v1.7.0/go.mod h1:yWChEv5IUEYURQasfyBW5ffkMHR/90hiHgbNgrtp4j0=
 github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a h1:W8mUrRp6NOVl3J+MYp5kPMoUZPp7aOYHtaua31lwRHg=
 github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a/go.mod h1:sTwzHBvIzm2RfVCGNEBZgRyjwK40bVoun3ZnGOCafNM=
 github.com/crate-crypto/go-kzg-4844 v1.1.0 h1:EN/u9k2TF6OWSHrCCDBBU6GLNMq88OspHHlMnHfoyU4=
@@ -81,14 +79,16 @@ github.com/decred/dcrd/crypto/blake256 v1.0.1 h1:7PltbUIQB7u/FfZ39+DGa/ShuMyJ5il
 github.com/decred/dcrd/crypto/blake256 v1.0.1/go.mod h1:2OfgNZ5wDpcsFmHmCK5gZTPcCXqlm2ArzUIkw9czNJo=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 h1:rpfIENRNNilwHwZeG5+P150SMrnNEcHYvcCuK6dPZSg=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0/go.mod h1:v57UDF4pDQJcEfFUCRop3lJL149eHGSe9Jvczhzjo/0=
+github.com/emicklei/dot v1.6.2 h1:08GN+DD79cy/tzN6uLCT84+2Wk9u+wvqP+Hkx/dIR8A=
+github.com/emicklei/dot v1.6.2/go.mod h1:DeV7GvQtIw4h2u73RKBkkFdvVAz0D9fzeJrgPW6gy/s=
 github.com/ethereum/c-kzg-4844 v1.0.3 h1:IEnbOHwjixW2cTvKRUlAAUOeleV7nNM/umJR+qy4WDs=
 github.com/ethereum/c-kzg-4844 v1.0.3/go.mod h1:VewdlzQmpT5QSrVhbBuGoCdFJkpaJlO1aQputP83wc0=
 github.com/ethereum/go-ethereum v1.14.7 h1:EHpv3dE8evQmpVEQ/Ne2ahB06n2mQptdwqaMNhAT29g=
 github.com/ethereum/go-ethereum v1.14.7/go.mod h1:Mq0biU2jbdmKSZoqOj29017ygFrMnB5/Rifwp980W4o=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 h1:KrE8I4reeVvf7C1tm8elRjj4BdscTYzz/WAbYyf/JI4=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0/go.mod h1:D9AJLVXSyZQXJQVk8oh1EwjISE+sJTn2duYIZC0dy3w=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
 github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
@@ -192,9 +192,8 @@ github.com/onsi/gomega v1.17.0/go.mod h1:HnhC7FXeEQY45zxNK3PPoIUhzk/80Xly9PcubAl
 github.com/onsi/gomega v1.19.0/go.mod h1:LY+I3pBVzYsTBU1AnDwOSxaYi9WoWiqgwooUqq9yPro=
 github.com/onsi/gomega v1.33.1 h1:dsYjIxxSR755MDmKVsaFQTE22ChNBcuuTWgkUDSubOk=
 github.com/onsi/gomega v1.33.1/go.mod h1:U4R44UsT+9eLIaYRB2a5qajjtQYn0hauxvRm16AVYg0=
-github.com/petermattis/goid v0.0.0-20180202154549-b0b1615b78e5/go.mod h1:jvVRKCrJTQWu0XVbaOlby/2lO20uSCHEMzzplHXte1o=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 h1:CtBLeckhC0zAXgp5V8uR30CNYH0JgCJoxCg5+6i2zQk=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
 github.com/pingcap/errors v0.11.4/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
@@ -221,8 +220,8 @@ github.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUc
 github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
 github.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=
 github.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=
-github.com/sasha-s/go-deadlock v0.3.1 h1:sqv7fDNShgjcaxkO0JNcOAlr8B9+cV5Ey/OB71efZx0=
-github.com/sasha-s/go-deadlock v0.3.1/go.mod h1:F73l+cr82YSh10GxyRI6qZiCgK64VaZjwesgfQ1/iLM=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=
 github.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
 github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8 h1:+jumHNA0Wrelhe64i8F6HNlS8pkoyMv5sreGx2Ry5Rw=
@@ -254,8 +253,8 @@ github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQ
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
@@ -269,8 +268,8 @@ golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -297,16 +296,16 @@ golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
@@ -329,8 +328,8 @@ google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzi
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
diff --git a/mod/da/pkg/blob/processor.go b/mod/da/pkg/blob/processor.go
index 167470769..38695937b 100644
--- a/mod/da/pkg/blob/processor.go
+++ b/mod/da/pkg/blob/processor.go
@@ -23,6 +23,7 @@ package blob
 import (
 	"time"
 
+	"github.com/berachain/beacon-kit/mod/da/pkg/kzg"
 	"github.com/berachain/beacon-kit/mod/log"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
@@ -35,7 +36,8 @@ type Processor[
 		BeaconBlockBodyT, BlobSidecarsT,
 	],
 	BeaconBlockBodyT any,
-	BeaconBlockHeaderT BeaconBlockHeader,
+	BeaconBlockHeaderT BeaconBlockHeader[BeaconBlockHeaderT],
+	ConsensusSidecarsT ConsensusSidecars[BlobSidecarsT, BeaconBlockHeaderT],
 	BlobSidecarT Sidecar[BeaconBlockHeaderT],
 	BlobSidecarsT Sidecars[BlobSidecarT],
 ] struct {
@@ -44,7 +46,7 @@ type Processor[
 	// chainSpec defines the specifications of the blockchain.
 	chainSpec common.ChainSpec
 	// verifier is responsible for verifying the blobs.
-	verifier BlobVerifier[BlobSidecarsT]
+	verifier *verifier[BeaconBlockHeaderT, BlobSidecarT, BlobSidecarsT]
 	// blockBodyOffsetFn is a function that calculates the block body offset
 	// based on the slot and chain specifications.
 	blockBodyOffsetFn func(math.Slot, common.ChainSpec) uint64
@@ -58,22 +60,28 @@ func NewProcessor[
 		BeaconBlockBodyT, BlobSidecarsT,
 	],
 	BeaconBlockBodyT any,
-	BeaconBlockHeaderT BeaconBlockHeader,
+	BeaconBlockHeaderT BeaconBlockHeader[BeaconBlockHeaderT],
+	ConsensusSidecarsT ConsensusSidecars[BlobSidecarsT, BeaconBlockHeaderT],
 	BlobSidecarT Sidecar[BeaconBlockHeaderT],
 	BlobSidecarsT Sidecars[BlobSidecarT],
 ](
 	logger log.Logger,
 	chainSpec common.ChainSpec,
-	verifier BlobVerifier[BlobSidecarsT],
+	proofVerifier kzg.BlobProofVerifier,
 	blockBodyOffsetFn func(math.Slot, common.ChainSpec) uint64,
 	telemetrySink TelemetrySink,
 ) *Processor[
 	AvailabilityStoreT, BeaconBlockBodyT, BeaconBlockHeaderT,
-	BlobSidecarT, BlobSidecarsT,
+	ConsensusSidecarsT, BlobSidecarT, BlobSidecarsT,
 ] {
+	verifier := newVerifier[
+		BeaconBlockHeaderT,
+		BlobSidecarT,
+		BlobSidecarsT,
+	](proofVerifier, telemetrySink)
 	return &Processor[
 		AvailabilityStoreT, BeaconBlockBodyT, BeaconBlockHeaderT,
-		BlobSidecarT, BlobSidecarsT,
+		ConsensusSidecarsT, BlobSidecarT, BlobSidecarsT,
 	]{
 		logger:            logger,
 		chainSpec:         chainSpec,
@@ -84,12 +92,17 @@ func NewProcessor[
 }
 
 // VerifySidecars verifies the blobs and ensures they match the local state.
-func (sp *Processor[AvailabilityStoreT, _, _, _, BlobSidecarsT]) VerifySidecars(
-	sidecars BlobSidecarsT,
+func (sp *Processor[
+	AvailabilityStoreT, _, _, ConsensusSidecarsT, _, _,
+]) VerifySidecars(
+	cs ConsensusSidecarsT,
 ) error {
-	startTime := time.Now()
+	var (
+		sidecars  = cs.GetSidecars()
+		blkHeader = cs.GetHeader()
+	)
 	defer sp.metrics.measureVerifySidecarsDuration(
-		startTime, math.U64(sidecars.Len()),
+		time.Now(), math.U64(sidecars.Len()),
 	)
 
 	// Abort if there are no blobs to store.
@@ -98,25 +111,25 @@ func (sp *Processor[AvailabilityStoreT, _, _, _, BlobSidecarsT]) VerifySidecars(
 	}
 
 	// Verify the blobs and ensure they match the local state.
-	return sp.verifier.VerifySidecars(
+	return sp.verifier.verifySidecars(
 		sidecars,
 		sp.blockBodyOffsetFn(
 			sidecars.Get(0).GetBeaconBlockHeader().GetSlot(),
 			sp.chainSpec,
 		),
+		blkHeader,
 	)
 }
 
 // slot :=  processes the blobs and ensures they match the local state.
 func (sp *Processor[
-	AvailabilityStoreT, _, _, _, BlobSidecarsT,
+	AvailabilityStoreT, _, _, _, _, BlobSidecarsT,
 ]) ProcessSidecars(
 	avs AvailabilityStoreT,
 	sidecars BlobSidecarsT,
 ) error {
-	startTime := time.Now()
 	defer sp.metrics.measureProcessSidecarsDuration(
-		startTime, math.U64(sidecars.Len()),
+		time.Now(), math.U64(sidecars.Len()),
 	)
 
 	// Abort if there are no blobs to store.
diff --git a/mod/da/pkg/blob/types.go b/mod/da/pkg/blob/types.go
index eae7914c6..7577bbca6 100644
--- a/mod/da/pkg/blob/types.go
+++ b/mod/da/pkg/blob/types.go
@@ -55,15 +55,14 @@ type BeaconBlockBody interface {
 	Length() uint64
 }
 
-type BeaconBlockHeader interface {
+type BeaconBlockHeader[BeaconBlockHeaderT any] interface {
 	GetSlot() math.Slot
+	Equals(BeaconBlockHeaderT) bool
 }
 
-//nolint:revive // name conflict
-type BlobVerifier[BlobSidecarsT any] interface {
-	VerifyInclusionProofs(scs BlobSidecarsT, kzgOffset uint64) error
-	VerifyKZGProofs(scs BlobSidecarsT) error
-	VerifySidecars(sidecars BlobSidecarsT, kzgOffset uint64) error
+type ConsensusSidecars[BlobSidecarsT any, BeaconBlockHeaderT any] interface {
+	GetSidecars() BlobSidecarsT
+	GetHeader() BeaconBlockHeaderT
 }
 
 type Sidecar[BeaconBlockHeaderT any] interface {
diff --git a/mod/da/pkg/blob/verifier.go b/mod/da/pkg/blob/verifier.go
index 8f1a698b2..fa0acde3f 100644
--- a/mod/da/pkg/blob/verifier.go
+++ b/mod/da/pkg/blob/verifier.go
@@ -22,6 +22,7 @@ package blob
 
 import (
 	"context"
+	"fmt"
 	"time"
 
 	"github.com/berachain/beacon-kit/mod/da/pkg/kzg"
@@ -29,10 +30,10 @@ import (
 	"golang.org/x/sync/errgroup"
 )
 
-// Verifier is responsible for verifying blobs, including their
+// verifier is responsible for verifying blobs, including their
 // inclusion and KZG proofs.
-type Verifier[
-	BeaconBlockHeaderT BeaconBlockHeader,
+type verifier[
+	BeaconBlockHeaderT BeaconBlockHeader[BeaconBlockHeaderT],
 	BlobSidecarT Sidecar[BeaconBlockHeaderT],
 	BlobSidecarsT Sidecars[BlobSidecarT],
 ] struct {
@@ -42,48 +43,54 @@ type Verifier[
 	metrics *verifierMetrics
 }
 
-// NewVerifier creates a new Verifier with the given proof verifier.
-func NewVerifier[
-	BeaconBlockHeaderT BeaconBlockHeader,
+// newVerifier creates a new Verifier with the given proof verifier.
+func newVerifier[
+	BeaconBlockHeaderT BeaconBlockHeader[BeaconBlockHeaderT],
 	BlobSidecarT Sidecar[BeaconBlockHeaderT],
 	BlobSidecarsT Sidecars[BlobSidecarT],
 ](
 	proofVerifier kzg.BlobProofVerifier,
 	telemetrySink TelemetrySink,
-) *Verifier[BeaconBlockHeaderT, BlobSidecarT, BlobSidecarsT] {
-	return &Verifier[BeaconBlockHeaderT, BlobSidecarT, BlobSidecarsT]{
+) *verifier[BeaconBlockHeaderT, BlobSidecarT, BlobSidecarsT] {
+	return &verifier[BeaconBlockHeaderT, BlobSidecarT, BlobSidecarsT]{
 		proofVerifier: proofVerifier,
 		metrics:       newVerifierMetrics(telemetrySink),
 	}
 }
 
-// VerifySidecars verifies the blobs for both inclusion as well
+// verifySidecars verifies the blobs for both inclusion as well
 // as the KZG proofs.
-func (bv *Verifier[_, _, BlobSidecarsT]) VerifySidecars(
-	sidecars BlobSidecarsT, kzgOffset uint64,
+func (bv *verifier[BeaconBlockHeaderT, _, BlobSidecarsT]) verifySidecars(
+	sidecars BlobSidecarsT,
+	kzgOffset uint64,
+	blkHeader BeaconBlockHeaderT,
 ) error {
-	var (
-		g, _      = errgroup.WithContext(context.Background())
-		startTime = time.Now()
-	)
-
 	defer bv.metrics.measureVerifySidecarsDuration(
-		startTime, math.U64(sidecars.Len()),
+		time.Now(), math.U64(sidecars.Len()),
 		bv.proofVerifier.GetImplementation(),
 	)
 
+	// check that sideracs block headers match with header of the
+	// corresponding block
+	for i, s := range sidecars.GetSidecars() {
+		if !s.GetBeaconBlockHeader().Equals(blkHeader) {
+			return fmt.Errorf("unequal block header: idx: %d", i)
+		}
+	}
+
 	// Verify the inclusion proofs on the blobs concurrently.
+	g, _ := errgroup.WithContext(context.Background())
 	g.Go(func() error {
 		// TODO: KZGOffset needs to be configurable and not
 		// passed in.
-		return bv.VerifyInclusionProofs(
+		return bv.verifyInclusionProofs(
 			sidecars, kzgOffset,
 		)
 	})
 
 	// Verify the KZG proofs on the blobs concurrently.
 	g.Go(func() error {
-		return bv.VerifyKZGProofs(sidecars)
+		return bv.verifyKZGProofs(sidecars)
 	})
 
 	g.Go(func() error {
@@ -94,7 +101,7 @@ func (bv *Verifier[_, _, BlobSidecarsT]) VerifySidecars(
 	return g.Wait()
 }
 
-func (bv *Verifier[_, _, BlobSidecarsT]) VerifyInclusionProofs(
+func (bv *verifier[_, _, BlobSidecarsT]) verifyInclusionProofs(
 	scs BlobSidecarsT,
 	kzgOffset uint64,
 ) error {
@@ -105,8 +112,8 @@ func (bv *Verifier[_, _, BlobSidecarsT]) VerifyInclusionProofs(
 	return scs.VerifyInclusionProofs(kzgOffset)
 }
 
-// VerifyKZGProofs verifies the sidecars.
-func (bv *Verifier[_, _, BlobSidecarsT]) VerifyKZGProofs(
+// verifyKZGProofs verifies the sidecars.
+func (bv *verifier[_, _, BlobSidecarsT]) verifyKZGProofs(
 	scs BlobSidecarsT,
 ) error {
 	start := time.Now()
diff --git a/mod/da/pkg/da/service.go b/mod/da/pkg/da/service.go
index 7ea196d65..35d0c074f 100644
--- a/mod/da/pkg/da/service.go
+++ b/mod/da/pkg/da/service.go
@@ -34,17 +34,19 @@ import (
 
 type Service[
 	AvailabilityStoreT any,
+	ConsensusSidecarsT ConsensusSidecars[BlobSidecarsT, BeaconBlockHeaderT],
 	BlobSidecarsT BlobSidecar,
+	BeaconBlockHeaderT any,
 ] struct {
 	avs AvailabilityStoreT
 	bp  BlobProcessor[
 		AvailabilityStoreT,
-		BlobSidecarsT,
+		ConsensusSidecarsT, BlobSidecarsT,
 	]
 	dispatcher asynctypes.EventDispatcher
 	logger     log.Logger
 	// subSidecarsReceived is a channel holding SidecarsReceived events.
-	subSidecarsReceived chan async.Event[BlobSidecarsT]
+	subSidecarsReceived chan async.Event[ConsensusSidecarsT]
 	// subFinalBlobSidecars is a channel holding FinalSidecarsReceived events.
 	subFinalBlobSidecars chan async.Event[BlobSidecarsT]
 }
@@ -52,37 +54,41 @@ type Service[
 // NewService returns a new DA service.
 func NewService[
 	AvailabilityStoreT any,
+	ConsensusSidecarsT ConsensusSidecars[BlobSidecarsT, BeaconBlockHeaderT],
 	BlobSidecarsT BlobSidecar,
+	BeaconBlockHeaderT any,
 ](
 	avs AvailabilityStoreT,
 	bp BlobProcessor[
-		AvailabilityStoreT, BlobSidecarsT,
+		AvailabilityStoreT,
+		ConsensusSidecarsT, BlobSidecarsT,
 	],
 	dispatcher asynctypes.EventDispatcher,
 	logger log.Logger,
 ) *Service[
-	AvailabilityStoreT, BlobSidecarsT,
+	AvailabilityStoreT, ConsensusSidecarsT, BlobSidecarsT, BeaconBlockHeaderT,
 ] {
 	return &Service[
-		AvailabilityStoreT, BlobSidecarsT,
+		AvailabilityStoreT,
+		ConsensusSidecarsT, BlobSidecarsT, BeaconBlockHeaderT,
 	]{
 		avs:                  avs,
 		bp:                   bp,
 		dispatcher:           dispatcher,
 		logger:               logger,
-		subSidecarsReceived:  make(chan async.Event[BlobSidecarsT]),
+		subSidecarsReceived:  make(chan async.Event[ConsensusSidecarsT]),
 		subFinalBlobSidecars: make(chan async.Event[BlobSidecarsT]),
 	}
 }
 
 // Name returns the name of the service.
-func (s *Service[_, _]) Name() string {
+func (s *Service[_, _, _, _]) Name() string {
 	return "da"
 }
 
 // Start subscribes the DA service to SidecarsReceived and FinalSidecarsReceived
 // events and begins the main event loop to handle them accordingly.
-func (s *Service[_, _]) Start(ctx context.Context) error {
+func (s *Service[_, _, _, _]) Start(ctx context.Context) error {
 	var err error
 
 	// subscribe to SidecarsReceived events
@@ -106,7 +112,7 @@ func (s *Service[_, _]) Start(ctx context.Context) error {
 
 // eventLoop listens and handles SidecarsReceived and FinalSidecarsReceived
 // events.
-func (s *Service[_, _]) eventLoop(ctx context.Context) {
+func (s *Service[_, _, _, _]) eventLoop(ctx context.Context) {
 	for {
 		select {
 		case <-ctx.Done():
@@ -126,7 +132,7 @@ func (s *Service[_, _]) eventLoop(ctx context.Context) {
 // handleFinalSidecarsReceived handles the BlobSidecarsProcessRequest
 // event.
 // It processes the sidecars and publishes a BlobSidecarsProcessed event.
-func (s *Service[_, BlobSidecarsT]) handleFinalSidecarsReceived(
+func (s *Service[_, _, BlobSidecarsT, _]) handleFinalSidecarsReceived(
 	msg async.Event[BlobSidecarsT],
 ) {
 	if err := s.processSidecars(msg.Context(), msg.Data()); err != nil {
@@ -140,25 +146,26 @@ func (s *Service[_, BlobSidecarsT]) handleFinalSidecarsReceived(
 
 // handleSidecarsReceived handles the SidecarsVerifyRequest event.
 // It verifies the sidecars and publishes a SidecarsVerified event.
-func (s *Service[_, BlobSidecarsT]) handleSidecarsReceived(
-	msg async.Event[BlobSidecarsT],
+func (s *Service[_, ConsensusSidecarsT, _, _]) handleSidecarsReceived(
+	cs async.Event[ConsensusSidecarsT],
 ) {
-	var sidecarsErr error
 	// verify the sidecars.
-	if sidecarsErr = s.verifySidecars(msg.Data()); sidecarsErr != nil {
+	sidecarsErr := s.verifySidecars(cs.Data())
+	if sidecarsErr != nil {
 		s.logger.Error(
 			"Failed to receive blob sidecars",
-			"error",
-			sidecarsErr,
+			"error", sidecarsErr,
 		)
 	}
 
 	// emit the sidecars verification event with error from verifySidecars
-	if err := s.dispatcher.Publish(
-		async.NewEvent(
-			msg.Context(), async.SidecarsVerified, msg.Data(), sidecarsErr,
-		),
-	); err != nil {
+	event := async.NewEvent(
+		cs.Context(),
+		async.SidecarsVerified,
+		cs.Data().GetSidecars(),
+		sidecarsErr,
+	)
+	if err := s.dispatcher.Publish(event); err != nil {
 		s.logger.Error("failed to publish event", "err", err)
 	}
 }
@@ -168,7 +175,7 @@ func (s *Service[_, BlobSidecarsT]) handleSidecarsReceived(
 /* -------------------------------------------------------------------------- */
 
 // ProcessSidecars processes the blob sidecars.
-func (s *Service[_, BlobSidecarsT]) processSidecars(
+func (s *Service[_, _, BlobSidecarsT, _]) processSidecars(
 	_ context.Context,
 	sidecars BlobSidecarsT,
 ) error {
@@ -181,20 +188,19 @@ func (s *Service[_, BlobSidecarsT]) processSidecars(
 }
 
 // VerifyIncomingBlobs receives blobs from the network and processes them.
-func (s *Service[_, BlobSidecarsT]) verifySidecars(
-	sidecars BlobSidecarsT,
+func (s *Service[_, ConsensusSidecarsT, _, _]) verifySidecars(
+	cs ConsensusSidecarsT,
 ) error {
-	// If there are no blobs to verify, return early.
+	sidecars := cs.GetSidecars()
 	if sidecars.IsNil() || sidecars.Len() == 0 {
+		// nothing to verify
 		return nil
 	}
 
-	s.logger.Info(
-		"Received incoming blob sidecars",
-	)
+	s.logger.Info("Received incoming blob sidecars")
 
 	// Verify the blobs and ensure they match the local state.
-	if err := s.bp.VerifySidecars(sidecars); err != nil {
+	if err := s.bp.VerifySidecars(cs); err != nil {
 		s.logger.Error(
 			"rejecting incoming blob sidecars",
 			"reason", err,
diff --git a/mod/da/pkg/da/types.go b/mod/da/pkg/da/types.go
index 4e24bc70a..8cc0be4e5 100644
--- a/mod/da/pkg/da/types.go
+++ b/mod/da/pkg/da/types.go
@@ -21,7 +21,10 @@
 package da
 
 // BlobProcessor is the interface for the blobs processor.
-type BlobProcessor[AvailabilityStoreT any, BlobSidecarsT any] interface {
+type BlobProcessor[
+	AvailabilityStoreT,
+	ConsensusSidecarsT, BlobSidecarsT any,
+] interface {
 	// ProcessSidecars processes the blobs and ensures they match the local
 	// state.
 	ProcessSidecars(
@@ -29,9 +32,12 @@ type BlobProcessor[AvailabilityStoreT any, BlobSidecarsT any] interface {
 		sidecars BlobSidecarsT,
 	) error
 	// VerifySidecars verifies the blobs and ensures they match the local state.
-	VerifySidecars(
-		sidecars BlobSidecarsT,
-	) error
+	VerifySidecars(sidecars ConsensusSidecarsT) error
+}
+
+type ConsensusSidecars[BlobSidecarsT any, BeaconBlockHeaderT any] interface {
+	GetSidecars() BlobSidecarsT
+	GetHeader() BeaconBlockHeaderT
 }
 
 // BlobSidecar is the interface for the blob sidecar.
diff --git a/mod/da/pkg/store/types.go b/mod/da/pkg/store/types.go
index 244c02e67..b02a5b3de 100644
--- a/mod/da/pkg/store/types.go
+++ b/mod/da/pkg/store/types.go
@@ -40,6 +40,8 @@ type BlockEvent[BeaconBlockT BeaconBlock] interface {
 type IndexDB interface {
 	Has(index uint64, key []byte) (bool, error)
 	Set(index uint64, key []byte, value []byte) error
+
+	// Prune returns error if start > end
 	Prune(start uint64, end uint64) error
 }
 
diff --git a/mod/da/pkg/types/sidecar.go b/mod/da/pkg/types/sidecar.go
index 800c0c3d3..71eb067fd 100644
--- a/mod/da/pkg/types/sidecar.go
+++ b/mod/da/pkg/types/sidecar.go
@@ -118,7 +118,7 @@ func (b *BlobSidecar) DefineSSZ(codec *ssz.Codec) {
 }
 
 // SizeSSZ returns the size of the BlobSidecar object in SSZ encoding.
-func (b *BlobSidecar) SizeSSZ() uint32 {
+func (b *BlobSidecar) SizeSSZ(*ssz.Sizer) uint32 {
 	return 8 + // Index
 		131072 + // Blob
 		48 + // KzgCommitment
@@ -129,7 +129,7 @@ func (b *BlobSidecar) SizeSSZ() uint32 {
 
 // MarshalSSZ marshals the BlobSidecar object to SSZ format.
 func (b *BlobSidecar) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, b.SizeSSZ())
+	buf := make([]byte, ssz.Size(b))
 	return buf, ssz.EncodeToBytes(buf, b)
 }
 
diff --git a/mod/da/pkg/types/sidecar_test.go b/mod/da/pkg/types/sidecar_test.go
index b3f0ebbe3..e1bac893e 100644
--- a/mod/da/pkg/types/sidecar_test.go
+++ b/mod/da/pkg/types/sidecar_test.go
@@ -21,6 +21,7 @@
 package types_test
 
 import (
+	"strconv"
 	"testing"
 
 	ctypes "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
@@ -39,22 +40,20 @@ func TestSidecarMarshalling(t *testing.T) {
 	for i := range blob {
 		blob[i] = byte(i % 256)
 	}
+	inclusionProof := make([]common.Root, 0)
+	for i := int(1); i <= 8; i++ {
+		it := byteslib.ExtendToSize([]byte(strconv.Itoa(i)), byteslib.B32Size)
+		proof, err := byteslib.ToBytes32(it)
+		require.NoError(t, err)
+		inclusionProof = append(inclusionProof, common.Root(proof))
+	}
 	sidecar := types.BuildBlobSidecar(
 		1,
 		&ctypes.BeaconBlockHeader{},
 		&blob,
 		eip4844.KZGCommitment{},
 		eip4844.KZGProof{},
-		[]common.Root{
-			common.Root(byteslib.ToBytes32([]byte("1"))),
-			common.Root(byteslib.ToBytes32([]byte("2"))),
-			common.Root(byteslib.ToBytes32([]byte("3"))),
-			common.Root(byteslib.ToBytes32([]byte("4"))),
-			common.Root(byteslib.ToBytes32([]byte("5"))),
-			common.Root(byteslib.ToBytes32([]byte("6"))),
-			common.Root(byteslib.ToBytes32([]byte("7"))),
-			common.Root(byteslib.ToBytes32([]byte("8"))),
-		},
+		inclusionProof,
 	)
 
 	// Marshal the sidecar
@@ -79,39 +78,50 @@ func TestSidecarMarshalling(t *testing.T) {
 func TestHasValidInclusionProof(t *testing.T) {
 	tests := []struct {
 		name           string
-		sidecar        *types.BlobSidecar
+		sidecar        func(t *testing.T) *types.BlobSidecar
 		kzgOffset      uint64
 		expectedResult bool
 	}{
 		{
 			name: "Invalid inclusion proof",
-			sidecar: types.BuildBlobSidecar(
-				math.U64(0),
-				&ctypes.BeaconBlockHeader{
-					BodyRoot: [32]byte{3},
-				},
-				&eip4844.Blob{},
-				eip4844.KZGCommitment{},
-				eip4844.KZGProof{},
-				[]common.Root{
-					common.Root(byteslib.ToBytes32([]byte("4"))),
-					common.Root(byteslib.ToBytes32([]byte("5"))),
-					common.Root(byteslib.ToBytes32([]byte("6"))),
-				},
-			),
+			sidecar: func(t *testing.T) *types.BlobSidecar {
+				t.Helper()
+				inclusionProof := make([]common.Root, 0)
+				for i := int(1); i <= 8; i++ {
+					it := byteslib.ExtendToSize(
+						[]byte(strconv.Itoa(i)),
+						byteslib.B32Size,
+					)
+					proof, err := byteslib.ToBytes32(it)
+					require.NoError(t, err)
+					inclusionProof = append(inclusionProof, common.Root(proof))
+				}
+				return types.BuildBlobSidecar(
+					math.U64(0),
+					&ctypes.BeaconBlockHeader{
+						BodyRoot: [32]byte{3},
+					},
+					&eip4844.Blob{},
+					eip4844.KZGCommitment{},
+					eip4844.KZGProof{},
+					inclusionProof,
+				)
+			},
 			kzgOffset:      0,
 			expectedResult: false,
 		},
 		{
 			name: "Empty inclusion proof",
-			sidecar: types.BuildBlobSidecar(
-				math.U64(0),
-				&ctypes.BeaconBlockHeader{},
-				&eip4844.Blob{},
-				eip4844.KZGCommitment{},
-				eip4844.KZGProof{},
-				[]common.Root{},
-			),
+			sidecar: func(*testing.T) *types.BlobSidecar {
+				return types.BuildBlobSidecar(
+					math.U64(0),
+					&ctypes.BeaconBlockHeader{},
+					&eip4844.Blob{},
+					eip4844.KZGCommitment{},
+					eip4844.KZGProof{},
+					[]common.Root{},
+				)
+			},
 			kzgOffset:      0,
 			expectedResult: false,
 		},
@@ -119,7 +129,8 @@ func TestHasValidInclusionProof(t *testing.T) {
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			result := tt.sidecar.HasValidInclusionProof(tt.kzgOffset)
+			sidecar := tt.sidecar(t)
+			result := sidecar.HasValidInclusionProof(tt.kzgOffset)
 			require.Equal(t, tt.expectedResult, result,
 				"Result should match expected value")
 		})
@@ -129,31 +140,35 @@ func TestHasValidInclusionProof(t *testing.T) {
 func TestHashTreeRoot(t *testing.T) {
 	tests := []struct {
 		name           string
-		sidecar        *types.BlobSidecar
+		sidecar        func(t *testing.T) *types.BlobSidecar
 		expectedResult common.Root
 		expectError    bool
 	}{
 		{
 			name: "Valid BlobSidecar",
-			sidecar: types.BuildBlobSidecar(
-				math.U64(1),
-				&ctypes.BeaconBlockHeader{
-					BodyRoot: [32]byte{7, 8, 9},
-				},
-				&eip4844.Blob{0, 1, 2, 3, 4, 5, 6, 7},
-				eip4844.KZGCommitment{1, 2, 3},
-				eip4844.KZGProof{4, 5, 6},
-				[]common.Root{
-					common.Root(byteslib.ToBytes32([]byte("1"))),
-					common.Root(byteslib.ToBytes32([]byte("2"))),
-					common.Root(byteslib.ToBytes32([]byte("3"))),
-					common.Root(byteslib.ToBytes32([]byte("4"))),
-					common.Root(byteslib.ToBytes32([]byte("5"))),
-					common.Root(byteslib.ToBytes32([]byte("6"))),
-					common.Root(byteslib.ToBytes32([]byte("7"))),
-					common.Root(byteslib.ToBytes32([]byte("8"))),
-				},
-			),
+			sidecar: func(t *testing.T) *types.BlobSidecar {
+				t.Helper()
+				inclusionProof := make([]common.Root, 0)
+				for i := int(1); i <= 8; i++ {
+					it := byteslib.ExtendToSize(
+						[]byte(strconv.Itoa(i)),
+						byteslib.B32Size,
+					)
+					proof, err := byteslib.ToBytes32(it)
+					require.NoError(t, err)
+					inclusionProof = append(inclusionProof, common.Root(proof))
+				}
+				return types.BuildBlobSidecar(
+					math.U64(1),
+					&ctypes.BeaconBlockHeader{
+						BodyRoot: [32]byte{7, 8, 9},
+					},
+					&eip4844.Blob{0, 1, 2, 3, 4, 5, 6, 7},
+					eip4844.KZGCommitment{1, 2, 3},
+					eip4844.KZGProof{4, 5, 6},
+					inclusionProof,
+				)
+			},
 			expectedResult: [32]uint8{
 				0xce, 0x75, 0x41, 0x87, 0x48, 0x46, 0x6d, 0x26, 0x9e, 0x72, 0x5d,
 				0xac, 0x5a, 0x6e, 0x36, 0xed, 0x8c, 0x2a, 0x98, 0x19, 0x6b, 0xe1,
@@ -165,7 +180,8 @@ func TestHashTreeRoot(t *testing.T) {
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			require.NotPanics(t, func() {
-				result := tt.sidecar.HashTreeRoot()
+				sidecar := tt.sidecar(t)
+				result := sidecar.HashTreeRoot()
 				require.Equal(
 					t,
 					tt.expectedResult,
diff --git a/mod/da/pkg/types/sidecars.go b/mod/da/pkg/types/sidecars.go
index 51358b8b9..aa3520f7c 100644
--- a/mod/da/pkg/types/sidecars.go
+++ b/mod/da/pkg/types/sidecars.go
@@ -99,16 +99,16 @@ func (bs *BlobSidecars) DefineSSZ(codec *ssz.Codec) {
 }
 
 // SizeSSZ returns the size of the BlobSidecars object in SSZ encoding.
-func (bs *BlobSidecars) SizeSSZ(fixed bool) uint32 {
+func (bs *BlobSidecars) SizeSSZ(siz *ssz.Sizer, fixed bool) uint32 {
 	if fixed {
 		return 4
 	}
-	return 4 + ssz.SizeSliceOfStaticObjects(bs.Sidecars)
+	return 4 + ssz.SizeSliceOfStaticObjects(siz, bs.Sidecars)
 }
 
 // MarshalSSZ marshals the BlobSidecars object to SSZ format.
 func (bs *BlobSidecars) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, bs.SizeSSZ(false))
+	buf := make([]byte, ssz.Size(bs))
 	return bs.MarshalSSZTo(buf)
 }
 
diff --git a/mod/da/pkg/types/sidecars_test.go b/mod/da/pkg/types/sidecars_test.go
index d2128c025..bfd2b2bc2 100644
--- a/mod/da/pkg/types/sidecars_test.go
+++ b/mod/da/pkg/types/sidecars_test.go
@@ -21,6 +21,7 @@
 package types_test
 
 import (
+	"strconv"
 	"testing"
 
 	ctypes "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
@@ -34,22 +35,21 @@ import (
 
 func TestEmptySidecarMarshalling(t *testing.T) {
 	// Create an empty BlobSidecar
+	inclusionProof := make([]common.Root, 0)
+	for i := int(1); i <= 8; i++ {
+		it := byteslib.ExtendToSize([]byte(strconv.Itoa(i)), byteslib.B32Size)
+		proof, err := byteslib.ToBytes32(it)
+		require.NoError(t, err)
+		inclusionProof = append(inclusionProof, common.Root(proof))
+	}
+
 	sidecar := types.BuildBlobSidecar(
 		math.U64(0),
 		&ctypes.BeaconBlockHeader{},
 		&eip4844.Blob{},
 		eip4844.KZGCommitment{},
 		[48]byte{},
-		[]common.Root{
-			common.Root(byteslib.ToBytes32([]byte("1"))),
-			common.Root(byteslib.ToBytes32([]byte("2"))),
-			common.Root(byteslib.ToBytes32([]byte("3"))),
-			common.Root(byteslib.ToBytes32([]byte("4"))),
-			common.Root(byteslib.ToBytes32([]byte("5"))),
-			common.Root(byteslib.ToBytes32([]byte("6"))),
-			common.Root(byteslib.ToBytes32([]byte("7"))),
-			common.Root(byteslib.ToBytes32([]byte("8"))),
-		},
+		inclusionProof,
 	)
 
 	// Marshal the empty sidecar
@@ -85,6 +85,14 @@ func TestEmptySidecarMarshalling(t *testing.T) {
 
 func TestValidateBlockRoots(t *testing.T) {
 	// Create a sample BlobSidecar with valid roots
+	inclusionProof := make([]common.Root, 0)
+	for i := int(1); i <= 8; i++ {
+		it := byteslib.ExtendToSize([]byte(strconv.Itoa(i)), byteslib.B32Size)
+		proof, err := byteslib.ToBytes32(it)
+		require.NoError(t, err)
+		inclusionProof = append(inclusionProof, common.Root(proof))
+	}
+
 	validSidecar := types.BuildBlobSidecar(
 		math.U64(0),
 		&ctypes.BeaconBlockHeader{
@@ -95,16 +103,7 @@ func TestValidateBlockRoots(t *testing.T) {
 		&eip4844.Blob{},
 		[48]byte{},
 		[48]byte{},
-		[]common.Root{
-			common.Root(byteslib.ToBytes32([]byte("1"))),
-			common.Root(byteslib.ToBytes32([]byte("2"))),
-			common.Root(byteslib.ToBytes32([]byte("3"))),
-			common.Root(byteslib.ToBytes32([]byte("4"))),
-			common.Root(byteslib.ToBytes32([]byte("5"))),
-			common.Root(byteslib.ToBytes32([]byte("6"))),
-			common.Root(byteslib.ToBytes32([]byte("7"))),
-			common.Root(byteslib.ToBytes32([]byte("8"))),
-		},
+		inclusionProof,
 	)
 
 	// Validate the sidecar with valid roots
@@ -128,16 +127,7 @@ func TestValidateBlockRoots(t *testing.T) {
 		&eip4844.Blob{},
 		eip4844.KZGCommitment{},
 		eip4844.KZGProof{},
-		[]common.Root{
-			common.Root(byteslib.ToBytes32([]byte("1"))),
-			common.Root(byteslib.ToBytes32([]byte("2"))),
-			common.Root(byteslib.ToBytes32([]byte("3"))),
-			common.Root(byteslib.ToBytes32([]byte("4"))),
-			common.Root(byteslib.ToBytes32([]byte("5"))),
-			common.Root(byteslib.ToBytes32([]byte("6"))),
-			common.Root(byteslib.ToBytes32([]byte("7"))),
-			common.Root(byteslib.ToBytes32([]byte("8"))),
-		},
+		inclusionProof,
 	)
 	// Validate the sidecar with invalid roots
 	sidecarsInvalid := types.BlobSidecars{
diff --git a/mod/engine-primitives/go.mod b/mod/engine-primitives/go.mod
index 2b5b485bd..903a3dc39 100644
--- a/mod/engine-primitives/go.mod
+++ b/mod/engine-primitives/go.mod
@@ -6,7 +6,7 @@ require (
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240618214413-d5ec0e66b3dd
 	github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e
 	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81
 	github.com/holiman/uint256 v1.3.1
 	github.com/karalabe/ssz v0.2.1-0.20240724074312-3d1ff7a6f7c4
 	github.com/stretchr/testify v1.9.0
@@ -35,6 +35,7 @@ require (
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
 	github.com/deckarep/golang-set/v2 v2.6.0 // indirect
 	github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
 	github.com/ethereum/c-kzg-4844 v1.0.3 // indirect
 	github.com/ethereum/go-ethereum v1.14.7 // indirect
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
@@ -74,13 +75,13 @@ require (
 	github.com/tklauser/go-sysconf v0.3.14 // indirect
 	github.com/tklauser/numcpus v0.8.0 // indirect
 	github.com/yusufpapurcu/wmi v1.2.4 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
 	golang.org/x/sync v0.8.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 	rsc.io/tmplfunc v0.0.3 // indirect
diff --git a/mod/engine-primitives/go.sum b/mod/engine-primitives/go.sum
index c8db98e05..287da8b62 100644
--- a/mod/engine-primitives/go.sum
+++ b/mod/engine-primitives/go.sum
@@ -61,14 +61,16 @@ github.com/decred/dcrd/crypto/blake256 v1.0.1 h1:7PltbUIQB7u/FfZ39+DGa/ShuMyJ5il
 github.com/decred/dcrd/crypto/blake256 v1.0.1/go.mod h1:2OfgNZ5wDpcsFmHmCK5gZTPcCXqlm2ArzUIkw9czNJo=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 h1:rpfIENRNNilwHwZeG5+P150SMrnNEcHYvcCuK6dPZSg=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0/go.mod h1:v57UDF4pDQJcEfFUCRop3lJL149eHGSe9Jvczhzjo/0=
+github.com/emicklei/dot v1.6.2 h1:08GN+DD79cy/tzN6uLCT84+2Wk9u+wvqP+Hkx/dIR8A=
+github.com/emicklei/dot v1.6.2/go.mod h1:DeV7GvQtIw4h2u73RKBkkFdvVAz0D9fzeJrgPW6gy/s=
 github.com/ethereum/c-kzg-4844 v1.0.3 h1:IEnbOHwjixW2cTvKRUlAAUOeleV7nNM/umJR+qy4WDs=
 github.com/ethereum/c-kzg-4844 v1.0.3/go.mod h1:VewdlzQmpT5QSrVhbBuGoCdFJkpaJlO1aQputP83wc0=
 github.com/ethereum/go-ethereum v1.14.7 h1:EHpv3dE8evQmpVEQ/Ne2ahB06n2mQptdwqaMNhAT29g=
 github.com/ethereum/go-ethereum v1.14.7/go.mod h1:Mq0biU2jbdmKSZoqOj29017ygFrMnB5/Rifwp980W4o=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 h1:KrE8I4reeVvf7C1tm8elRjj4BdscTYzz/WAbYyf/JI4=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0/go.mod h1:D9AJLVXSyZQXJQVk8oh1EwjISE+sJTn2duYIZC0dy3w=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
 github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
@@ -217,8 +219,8 @@ github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQ
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
@@ -232,8 +234,8 @@ golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -260,16 +262,16 @@ golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
@@ -288,8 +290,8 @@ google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzi
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
diff --git a/mod/engine-primitives/pkg/engine-primitives/attributes.go b/mod/engine-primitives/pkg/engine-primitives/attributes.go
index cb6bd5673..47398e66c 100644
--- a/mod/engine-primitives/pkg/engine-primitives/attributes.go
+++ b/mod/engine-primitives/pkg/engine-primitives/attributes.go
@@ -63,10 +63,8 @@ type PayloadAttributes[
 	ParentBeaconBlockRoot common.Root `json:"parentBeaconBlockRoot"`
 }
 
-// NewPayloadAttributes creates a new PayloadAttributes.
-func NewPayloadAttributes[
-	WithdrawalT any,
-](
+// New empty PayloadAttributes.
+func (p *PayloadAttributes[WithdrawalT]) New(
 	forkVersion uint32,
 	timestamp uint64,
 	prevRandao common.Bytes32,
@@ -74,7 +72,7 @@ func NewPayloadAttributes[
 	withdrawals []WithdrawalT,
 	parentBeaconBlockRoot common.Root,
 ) (*PayloadAttributes[WithdrawalT], error) {
-	p := &PayloadAttributes[WithdrawalT]{
+	p = &PayloadAttributes[WithdrawalT]{
 		version:               forkVersion,
 		Timestamp:             math.U64(timestamp),
 		PrevRandao:            prevRandao,
@@ -90,27 +88,6 @@ func NewPayloadAttributes[
 	return p, nil
 }
 
-// New empty PayloadAttributes.
-func (p *PayloadAttributes[WithdrawalT]) New(
-	forkVersion uint32,
-	timestamp uint64,
-	prevRandao common.Bytes32,
-	suggestedFeeRecipient common.ExecutionAddress,
-	withdrawals []WithdrawalT,
-	parentBeaconBlockRoot common.Root,
-) (*PayloadAttributes[WithdrawalT], error) {
-	var err error
-	p, err = NewPayloadAttributes(
-		forkVersion,
-		timestamp,
-		prevRandao,
-		suggestedFeeRecipient,
-		withdrawals,
-		parentBeaconBlockRoot,
-	)
-	return p, err
-}
-
 // IsNil returns true if the PayloadAttributes is nil.
 func (p *PayloadAttributes[WithdrawalT]) IsNil() bool {
 	return p == nil
diff --git a/mod/engine-primitives/pkg/engine-primitives/attributes_test.go b/mod/engine-primitives/pkg/engine-primitives/attributes_test.go
index a41a303ea..c5bef2b98 100644
--- a/mod/engine-primitives/pkg/engine-primitives/attributes_test.go
+++ b/mod/engine-primitives/pkg/engine-primitives/attributes_test.go
@@ -29,76 +29,97 @@ import (
 	"github.com/stretchr/testify/require"
 )
 
-type Withdrawal struct{}
+type testWithdrawal struct{}
 
-func TestPayloadAttributes(t *testing.T) {
-	forkVersion := uint32(1)
-	timestamp := uint64(123456789)
-	prevRandao := common.Bytes32{1, 2, 3}
-	suggestedFeeRecipient := common.ExecutionAddress{}
-	withdrawals := []Withdrawal{}
-	parentBeaconBlockRoot := common.Root{}
-
-	payloadAttributes, err := engineprimitives.NewPayloadAttributes[Withdrawal](
-		forkVersion,
-		timestamp,
-		prevRandao,
-		suggestedFeeRecipient,
-		withdrawals,
-		parentBeaconBlockRoot,
-	)
-	require.NoError(t, err)
-	require.NotNil(t, payloadAttributes)
-
-	require.False(t, payloadAttributes.IsNil())
-
-	require.Equal(
-		t,
-		suggestedFeeRecipient,
-		payloadAttributes.GetSuggestedFeeRecipient(),
-	)
-	require.Equal(t, forkVersion, payloadAttributes.Version())
-
-	require.NoError(t, payloadAttributes.Validate())
+type payloadAttributesInput struct {
+	forkVersion           uint32
+	timestamp             uint64
+	prevRandao            common.Bytes32
+	suggestedFeeRecipient common.ExecutionAddress
+	withdrawals           []testWithdrawal
+	parentBeaconBlockRoot common.Root
 }
 
-func TestNewPayloadAttributes_ErrorCases(t *testing.T) {
-	forkVersion := uint32(1)
-	prevRandao := common.Bytes32{1, 2, 3}
-	suggestedFeeRecipient := common.ExecutionAddress{}
-	withdrawals := []Withdrawal{}
-	parentBeaconBlockRoot := common.Root{}
+func TestPayloadAttributes(t *testing.T) {
+	// default valid data
+	validInput := payloadAttributesInput{
+		forkVersion:           uint32(1),
+		timestamp:             uint64(123456789),
+		prevRandao:            common.Bytes32{1, 2, 3},
+		suggestedFeeRecipient: common.ExecutionAddress{},
+		withdrawals:           []testWithdrawal{},
+		parentBeaconBlockRoot: common.Root{},
+	}
+	tests := []struct {
+		name    string
+		input   func() payloadAttributesInput
+		wantErr error
+	}{
+		{
+			name: "Valid payload attributes",
+			input: func() payloadAttributesInput {
+				return validInput
+			},
+			wantErr: nil,
+		},
+		{
+			name: "Invalid timestamp",
+			input: func() payloadAttributesInput {
+				res := validInput
+				res.timestamp = 0
+				return res
+			},
+			wantErr: engineprimitives.ErrInvalidTimestamp,
+		},
+		{
+			name: "Invalid PreRandao",
+			input: func() payloadAttributesInput {
+				res := validInput
+				res.prevRandao = common.Bytes32{}
+				return res
+			},
+			wantErr: engineprimitives.ErrEmptyPrevRandao,
+		},
+		{
+			name: "Invalid nil withdrawals on Capella",
+			input: func() payloadAttributesInput {
+				res := validInput
+				res.forkVersion = version.Capella
+				res.withdrawals = nil
+				return res
+			},
+			wantErr: engineprimitives.ErrNilWithdrawals,
+		},
+	}
 
-	// Test case where Timestamp is 0
-	_, err := engineprimitives.NewPayloadAttributes[Withdrawal](
-		forkVersion,
-		0,
-		prevRandao,
-		suggestedFeeRecipient,
-		withdrawals,
-		parentBeaconBlockRoot,
-	)
-	require.ErrorIs(t, err, engineprimitives.ErrInvalidTimestamp)
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			in := tt.input()
+			p := &engineprimitives.PayloadAttributes[testWithdrawal]{}
+			got, err := p.New(
+				in.forkVersion,
+				in.timestamp,
+				in.prevRandao,
+				in.suggestedFeeRecipient,
+				in.withdrawals,
+				in.parentBeaconBlockRoot,
+			)
+			if tt.wantErr != nil {
+				require.ErrorIs(t, err, tt.wantErr)
+			} else {
+				require.NoError(t, err)
+				require.NotNil(t, got)
 
-	// Test case where PrevRandao is an empty array
-	_, err = engineprimitives.NewPayloadAttributes[Withdrawal](
-		forkVersion,
-		123456789,
-		common.Bytes32{},
-		suggestedFeeRecipient,
-		withdrawals,
-		parentBeaconBlockRoot,
-	)
-	require.ErrorIs(t, err, engineprimitives.ErrEmptyPrevRandao)
+				require.False(t, got.IsNil())
+				require.NoError(t, got.Validate())
 
-	// Test case where Withdrawals is nil and version is equal to Capella
-	_, err = engineprimitives.NewPayloadAttributes[Withdrawal](
-		version.Capella,
-		123456789,
-		prevRandao,
-		suggestedFeeRecipient,
-		nil,
-		parentBeaconBlockRoot,
-	)
-	require.ErrorIs(t, err, engineprimitives.ErrNilWithdrawals)
+				require.Equal(
+					t,
+					in.suggestedFeeRecipient,
+					got.GetSuggestedFeeRecipient(),
+				)
+				require.Equal(t, in.forkVersion, got.Version())
+			}
+		})
+	}
 }
diff --git a/mod/engine-primitives/pkg/engine-primitives/mocks/blobs_bundle.mock.go b/mod/engine-primitives/pkg/engine-primitives/mocks/blobs_bundle.mock.go
index fce683ab5..67afc56b7 100644
--- a/mod/engine-primitives/pkg/engine-primitives/mocks/blobs_bundle.mock.go
+++ b/mod/engine-primitives/pkg/engine-primitives/mocks/blobs_bundle.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
diff --git a/mod/engine-primitives/pkg/engine-primitives/mocks/built_execution_payload_env.mock.go b/mod/engine-primitives/pkg/engine-primitives/mocks/built_execution_payload_env.mock.go
index ca67c49db..df3a20089 100644
--- a/mod/engine-primitives/pkg/engine-primitives/mocks/built_execution_payload_env.mock.go
+++ b/mod/engine-primitives/pkg/engine-primitives/mocks/built_execution_payload_env.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
@@ -10,11 +10,11 @@ import (
 )
 
 // BuiltExecutionPayloadEnv is an autogenerated mock type for the BuiltExecutionPayloadEnv type
-type BuiltExecutionPayloadEnv[ExecutionPayloadT interface{}] struct {
+type BuiltExecutionPayloadEnv[ExecutionPayloadT any] struct {
 	mock.Mock
 }
 
-type BuiltExecutionPayloadEnv_Expecter[ExecutionPayloadT interface{}] struct {
+type BuiltExecutionPayloadEnv_Expecter[ExecutionPayloadT any] struct {
 	mock *mock.Mock
 }
 
@@ -43,7 +43,7 @@ func (_m *BuiltExecutionPayloadEnv[ExecutionPayloadT]) GetBlobsBundle() enginepr
 }
 
 // BuiltExecutionPayloadEnv_GetBlobsBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobsBundle'
-type BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT interface{}] struct {
+type BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT any] struct {
 	*mock.Call
 }
 
@@ -81,14 +81,16 @@ func (_m *BuiltExecutionPayloadEnv[ExecutionPayloadT]) GetExecutionPayload() Exe
 	if rf, ok := ret.Get(0).(func() ExecutionPayloadT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(ExecutionPayloadT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(ExecutionPayloadT)
+		}
 	}
 
 	return r0
 }
 
 // BuiltExecutionPayloadEnv_GetExecutionPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionPayload'
-type BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT interface{}] struct {
+type BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT any] struct {
 	*mock.Call
 }
 
@@ -135,7 +137,7 @@ func (_m *BuiltExecutionPayloadEnv[ExecutionPayloadT]) GetValue() *uint256.Int {
 }
 
 // BuiltExecutionPayloadEnv_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
-type BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT interface{}] struct {
+type BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT any] struct {
 	*mock.Call
 }
 
@@ -180,7 +182,7 @@ func (_m *BuiltExecutionPayloadEnv[ExecutionPayloadT]) ShouldOverrideBuilder() b
 }
 
 // BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldOverrideBuilder'
-type BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT interface{}] struct {
+type BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT any] struct {
 	*mock.Call
 }
 
@@ -208,7 +210,7 @@ func (_c *BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT]
 
 // NewBuiltExecutionPayloadEnv creates a new instance of BuiltExecutionPayloadEnv. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
 // The first argument is typically a *testing.T value.
-func NewBuiltExecutionPayloadEnv[ExecutionPayloadT interface{}](t interface {
+func NewBuiltExecutionPayloadEnv[ExecutionPayloadT any](t interface {
 	mock.TestingT
 	Cleanup(func())
 }) *BuiltExecutionPayloadEnv[ExecutionPayloadT] {
diff --git a/mod/engine-primitives/pkg/engine-primitives/mocks/payload_attributer.mock.go b/mod/engine-primitives/pkg/engine-primitives/mocks/payload_attributer.mock.go
index 2e88d79e5..0edbc8091 100644
--- a/mod/engine-primitives/pkg/engine-primitives/mocks/payload_attributer.mock.go
+++ b/mod/engine-primitives/pkg/engine-primitives/mocks/payload_attributer.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
diff --git a/mod/engine-primitives/pkg/engine-primitives/transactions.go b/mod/engine-primitives/pkg/engine-primitives/transactions.go
index afc1e87e9..5ac84682a 100644
--- a/mod/engine-primitives/pkg/engine-primitives/transactions.go
+++ b/mod/engine-primitives/pkg/engine-primitives/transactions.go
@@ -35,8 +35,8 @@ type Transactions [][]byte
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the SSZ encoded size in bytes for the Transactions.
-func (txs Transactions) SizeSSZ(bool) uint32 {
-	return ssz.SizeSliceOfDynamicBytes(txs)
+func (txs Transactions) SizeSSZ(siz *ssz.Sizer, _ bool) uint32 {
+	return ssz.SizeSliceOfDynamicBytes(siz, txs)
 }
 
 // DefineSSZ defines the SSZ encoding for the Transactions object.
diff --git a/mod/engine-primitives/pkg/engine-primitives/transactions_bartio.go b/mod/engine-primitives/pkg/engine-primitives/transactions_bartio.go
deleted file mode 100644
index d08fb95ae..000000000
--- a/mod/engine-primitives/pkg/engine-primitives/transactions_bartio.go
+++ /dev/null
@@ -1,99 +0,0 @@
-// SPDX-License-Identifier: BUSL-1.1
-//
-// Copyright (C) 2024, Berachain Foundation. All rights reserved.
-// Use of this software is governed by the Business Source License included
-// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
-//
-// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
-// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
-// VERSIONS OF THE LICENSED WORK.
-//
-// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
-// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
-// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
-//
-// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
-// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
-// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
-// TITLE.
-
-package engineprimitives
-
-import (
-	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
-	"github.com/berachain/beacon-kit/mod/primitives/pkg/constants"
-	"github.com/karalabe/ssz"
-)
-
-// BartioTransactions is a typealias for [][]byte, which is how transactions are
-// received in the execution payload on the bArtio testnet. This is due to a
-// mistake made during the initial implementation of BeaconKit. This type will
-// be deprecated off of
-// eventually.
-type BartioTransactions [][]byte
-
-// HashTreeRoot returns the hash tree root of the Transactions list.
-//
-// NOTE: Uses a new merkleizer for each call.
-func (txs BartioTransactions) HashTreeRoot() common.Root {
-	roots := make(Roots, len(txs))
-	for i, tx := range txs {
-		roots[i] = BartioTx(tx).HashTreeRoot()
-	}
-	return ssz.HashConcurrent(roots)
-}
-
-// BartioTx represents a single transaction in the Bartio format.
-type BartioTx []byte
-
-// SizeSSZ returns the SSZ sssize of the BartioTx.
-func (tx BartioTx) SizeSSZ() uint32 {
-	return ssz.SizeDynamicBytes(tx)
-}
-
-// DefineSSZ implements the SSZ encoding for BartioTx.
-func (tx BartioTx) DefineSSZ(codec *ssz.Codec) {
-	codec.DefineHasher(func(*ssz.Hasher) {
-		ssz.DefineStaticBytes(
-			codec,
-			(*[]byte)(&tx),
-		)
-	})
-}
-
-// HashTreeRoot returns the Merkle root hash of the BartioTx.
-func (tx BartioTx) HashTreeRoot() common.Root {
-	return ssz.HashConcurrent(tx)
-}
-
-// Roots is a list of common.Roots.
-type Roots []common.Root
-
-// SizeSSZ returns the SSZ size of the Roots object.
-func (roots Roots) SizeSSZ() uint32 {
-	return ssz.SizeSliceOfStaticBytes(roots)
-}
-
-// DefineSSZ defines the SSZ encoding for the Roots object.
-func (roots Roots) DefineSSZ(codec *ssz.Codec) {
-	codec.DefineEncoder(func(*ssz.Encoder) {
-		ssz.DefineSliceOfStaticBytesContent(
-			codec,
-			(*[]common.Root)(&roots),
-			constants.MaxTxsPerPayload,
-		)
-	})
-	codec.DefineDecoder(func(*ssz.Decoder) {
-		ssz.DefineSliceOfStaticBytesContent(
-			codec,
-			(*[]common.Root)(&roots),
-			constants.MaxTxsPerPayload,
-		)
-	})
-	codec.DefineHasher(func(*ssz.Hasher) {
-		ssz.DefineSliceOfStaticBytesOffset(
-			codec, (*[]common.Root)(&roots), constants.MaxTxsPerPayload,
-		)
-	})
-}
diff --git a/mod/engine-primitives/pkg/engine-primitives/withdrawal.go b/mod/engine-primitives/pkg/engine-primitives/withdrawal.go
index 1324a7494..a1c5858c6 100644
--- a/mod/engine-primitives/pkg/engine-primitives/withdrawal.go
+++ b/mod/engine-primitives/pkg/engine-primitives/withdrawal.go
@@ -75,7 +75,7 @@ func (w *Withdrawal) New(
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the size of the Withdrawal in bytes when SSZ encoded.
-func (*Withdrawal) SizeSSZ() uint32 {
+func (*Withdrawal) SizeSSZ(*ssz.Sizer) uint32 {
 	return WithdrawalSize
 }
 
@@ -94,7 +94,7 @@ func (w *Withdrawal) HashTreeRoot() common.Root {
 
 // MarshalSSZ marshals the Withdrawal object to SSZ format.
 func (w *Withdrawal) MarshalSSZ() ([]byte, error) {
-	buf := make([]byte, w.SizeSSZ())
+	buf := make([]byte, ssz.Size(w))
 	return buf, ssz.EncodeToBytes(buf, w)
 }
 
@@ -164,11 +164,18 @@ func (w Withdrawal) EncodeRLP(_w io.Writer) error {
 /* -------------------------------------------------------------------------- */
 
 // Equals returns true if the Withdrawal is equal to the other.
-func (w *Withdrawal) Equals(other *Withdrawal) bool {
-	return w.Index == other.Index &&
-		w.Validator == other.Validator &&
-		w.Address == other.Address &&
-		w.Amount == other.Amount
+func (w *Withdrawal) Equals(rhs *Withdrawal) bool {
+	switch {
+	case w == nil && rhs == nil:
+		return true
+	case w != nil && rhs != nil:
+		return w.Index == rhs.Index &&
+			w.Validator == rhs.Validator &&
+			w.Address == rhs.Address &&
+			w.Amount == rhs.Amount
+	default:
+		return false
+	}
 }
 
 // GetIndex returns the unique identifier for the withdrawal.
diff --git a/mod/engine-primitives/pkg/engine-primitives/withdrawal_ssz_test.go b/mod/engine-primitives/pkg/engine-primitives/withdrawal_ssz_test.go
index b2f60921a..e0dec2026 100644
--- a/mod/engine-primitives/pkg/engine-primitives/withdrawal_ssz_test.go
+++ b/mod/engine-primitives/pkg/engine-primitives/withdrawal_ssz_test.go
@@ -25,6 +25,7 @@ import (
 
 	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	karalabessz "github.com/karalabe/ssz"
 	"github.com/stretchr/testify/require"
 )
 
@@ -43,7 +44,7 @@ func TestWithdrawalSSZ(t *testing.T) {
 	err = withdrawal.UnmarshalSSZ(data)
 	require.NoError(t, err)
 
-	size := withdrawal.SizeSSZ()
+	size := karalabessz.Size(withdrawal)
 	require.Equal(t, uint32(44), size)
 
 	tree := withdrawal.HashTreeRoot()
diff --git a/mod/engine-primitives/pkg/engine-primitives/withdrawals.go b/mod/engine-primitives/pkg/engine-primitives/withdrawals.go
index 9216370f8..a1b71e5e9 100644
--- a/mod/engine-primitives/pkg/engine-primitives/withdrawals.go
+++ b/mod/engine-primitives/pkg/engine-primitives/withdrawals.go
@@ -42,7 +42,7 @@ type Withdrawals []*Withdrawal
 /* -------------------------------------------------------------------------- */
 
 // SizeSSZ returns the SSZ encoded size in bytes for the Withdrawals.
-func (w Withdrawals) SizeSSZ() uint32 {
+func (w Withdrawals) SizeSSZ(*ssz.Sizer) uint32 {
 	//#nosec:G701 // not an issue in practice.
 	return uint32(len(w)) * WithdrawalSize
 }
diff --git a/mod/engine-primitives/pkg/engine-primitives/withdrawals_test.go b/mod/engine-primitives/pkg/engine-primitives/withdrawals_test.go
index d6640013a..11e775472 100644
--- a/mod/engine-primitives/pkg/engine-primitives/withdrawals_test.go
+++ b/mod/engine-primitives/pkg/engine-primitives/withdrawals_test.go
@@ -26,6 +26,7 @@ import (
 	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	karalabessz "github.com/karalabe/ssz"
 	"github.com/stretchr/testify/require"
 )
 
@@ -38,7 +39,7 @@ func TestWithdrawals(t *testing.T) {
 		expectedSize := uint32(
 			len(withdrawals),
 		) * engineprimitives.WithdrawalSize
-		require.Equal(t, expectedSize, withdrawals.SizeSSZ())
+		require.Equal(t, expectedSize, karalabessz.Size(withdrawals))
 	})
 
 	t.Run("HashTreeRoot", func(t *testing.T) {
diff --git a/mod/execution/go.mod b/mod/execution/go.mod
index 897bae8fb..3f668a3ff 100644
--- a/mod/execution/go.mod
+++ b/mod/execution/go.mod
@@ -34,15 +34,17 @@ require (
 	github.com/crate-crypto/go-kzg-4844 v1.1.0 // indirect
 	github.com/deckarep/golang-set/v2 v2.6.0 // indirect
 	github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
 	github.com/ethereum/c-kzg-4844 v1.0.3 // indirect
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 // indirect
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 // indirect
 	github.com/fsnotify/fsnotify v1.7.0 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
 	github.com/go-ole/go-ole v1.3.0 // indirect
 	github.com/goccy/go-json v0.10.3 // indirect
 	github.com/gofrs/flock v0.12.1 // indirect
 	github.com/gogo/protobuf v1.3.2 // indirect
+	github.com/golang-jwt/jwt/v4 v4.5.1 // indirect
 	github.com/golang-jwt/jwt/v5 v5.2.1 // indirect
 	github.com/golang/snappy v0.0.5-0.20220116011046-fa5810519dcb // indirect
 	github.com/google/gofuzz v1.2.0 // indirect
@@ -78,13 +80,13 @@ require (
 	github.com/tklauser/numcpus v0.8.0 // indirect
 	github.com/umbracle/fastrlp v0.1.0 // indirect
 	github.com/yusufpapurcu/wmi v1.2.4 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
 	golang.org/x/sync v0.8.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	rsc.io/tmplfunc v0.0.3 // indirect
 )
diff --git a/mod/execution/go.sum b/mod/execution/go.sum
index 5f8a08427..e3b9f83f5 100644
--- a/mod/execution/go.sum
+++ b/mod/execution/go.sum
@@ -71,14 +71,16 @@ github.com/decred/dcrd/crypto/blake256 v1.0.1 h1:7PltbUIQB7u/FfZ39+DGa/ShuMyJ5il
 github.com/decred/dcrd/crypto/blake256 v1.0.1/go.mod h1:2OfgNZ5wDpcsFmHmCK5gZTPcCXqlm2ArzUIkw9czNJo=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 h1:rpfIENRNNilwHwZeG5+P150SMrnNEcHYvcCuK6dPZSg=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0/go.mod h1:v57UDF4pDQJcEfFUCRop3lJL149eHGSe9Jvczhzjo/0=
+github.com/emicklei/dot v1.6.2 h1:08GN+DD79cy/tzN6uLCT84+2Wk9u+wvqP+Hkx/dIR8A=
+github.com/emicklei/dot v1.6.2/go.mod h1:DeV7GvQtIw4h2u73RKBkkFdvVAz0D9fzeJrgPW6gy/s=
 github.com/ethereum/c-kzg-4844 v1.0.3 h1:IEnbOHwjixW2cTvKRUlAAUOeleV7nNM/umJR+qy4WDs=
 github.com/ethereum/c-kzg-4844 v1.0.3/go.mod h1:VewdlzQmpT5QSrVhbBuGoCdFJkpaJlO1aQputP83wc0=
 github.com/ethereum/go-ethereum v1.14.7 h1:EHpv3dE8evQmpVEQ/Ne2ahB06n2mQptdwqaMNhAT29g=
 github.com/ethereum/go-ethereum v1.14.7/go.mod h1:Mq0biU2jbdmKSZoqOj29017ygFrMnB5/Rifwp980W4o=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 h1:KrE8I4reeVvf7C1tm8elRjj4BdscTYzz/WAbYyf/JI4=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0/go.mod h1:D9AJLVXSyZQXJQVk8oh1EwjISE+sJTn2duYIZC0dy3w=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fjl/memsize v0.0.2 h1:27txuSD9or+NZlnOWdKUxeBzTAUkWCVh+4Gf2dWFOzA=
 github.com/fjl/memsize v0.0.2/go.mod h1:VvhXpOYNQvB+uIk2RvXzuaQtkQJzzIx6lSBe1xv7hi0=
 github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
@@ -102,8 +104,8 @@ github.com/gofrs/flock v0.12.1 h1:MTLVXXHf8ekldpJk3AKicLij9MdwOWkZ+a/jHHZby9E=
 github.com/gofrs/flock v0.12.1/go.mod h1:9zxTsyu5xtJ9DK+1tFZyibEV7y3uwDxPPfbxeeHCoD0=
 github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
-github.com/golang-jwt/jwt/v4 v4.5.0 h1:7cYmW1XlMY7h7ii7UhUyChSgS5wUJEnm9uZVTGqOWzg=
-github.com/golang-jwt/jwt/v4 v4.5.0/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
+github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
+github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
 github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
 github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
 github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
@@ -264,8 +266,8 @@ github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQ
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
@@ -279,8 +281,8 @@ golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -307,16 +309,16 @@ golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
 golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -337,8 +339,8 @@ google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzi
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
diff --git a/mod/execution/pkg/client/client.go b/mod/execution/pkg/client/client.go
index e14d8cc55..22ef724e9 100644
--- a/mod/execution/pkg/client/client.go
+++ b/mod/execution/pkg/client/client.go
@@ -98,7 +98,7 @@ func (s *EngineClient[
 ]) Start(
 	ctx context.Context,
 ) error {
-	// Start the Clien.
+	// Start the Client.
 	go s.Client.Start(ctx)
 
 	s.logger.Info(
@@ -167,6 +167,15 @@ func (s *EngineClient[
 		return err
 	}
 
+	// TODO: consider validating once when config is set or
+	// client is initialized
+	if !s.eth1ChainID.IsUint64() {
+		err = errors.Wrapf(
+			errors.New("provided chain ID is not uint64"),
+			s.eth1ChainID.String(),
+		)
+		return err
+	}
 	if chainID.Unwrap() != s.eth1ChainID.Uint64() {
 		err = errors.Wrapf(
 			ErrMismatchedEth1ChainID,
diff --git a/mod/execution/pkg/client/engine.go b/mod/execution/pkg/client/engine.go
index aad0e3efe..0d2e02ee5 100644
--- a/mod/execution/pkg/client/engine.go
+++ b/mod/execution/pkg/client/engine.go
@@ -29,7 +29,6 @@ import (
 	"github.com/berachain/beacon-kit/mod/errors"
 	ethclient "github.com/berachain/beacon-kit/mod/execution/pkg/client/ethclient"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
-	"github.com/berachain/beacon-kit/mod/primitives/pkg/version"
 )
 
 /* -------------------------------------------------------------------------- */
@@ -61,7 +60,8 @@ func (s *EngineClient[
 			s.metrics.incrementNewPayloadTimeout()
 		}
 		return nil, s.handleRPCError(err)
-	} else if result == nil {
+	}
+	if result == nil {
 		return nil, engineerrors.ErrNilPayloadStatus
 	}
 
@@ -116,11 +116,12 @@ func (s *EngineClient[
 			s.metrics.incrementForkchoiceUpdateTimeout()
 		}
 		return nil, nil, s.handleRPCError(err)
-	} else if result == nil {
+	}
+	if result == nil {
 		return nil, nil, engineerrors.ErrNilForkchoiceResponse
 	}
 
-	latestValidHash, err := processPayloadStatusResult((&result.PayloadStatus))
+	latestValidHash, err := processPayloadStatusResult(&result.PayloadStatus)
 	if err != nil {
 		return nil, latestValidHash, err
 	}
@@ -149,16 +150,16 @@ func (s *EngineClient[
 
 	// Call and check for errors.
 	result, err := s.Client.GetPayload(cctx, payloadID, forkVersion)
-	switch {
-	case err != nil:
+	if err != nil {
 		if errors.Is(err, engineerrors.ErrEngineAPITimeout) {
 			s.metrics.incrementGetPayloadTimeout()
 		}
 		return result, s.handleRPCError(err)
-	case result == nil:
+	}
+	if result == nil {
 		return result, engineerrors.ErrNilExecutionPayloadEnvelope
-	case result.GetBlobsBundle() == nil &&
-		((forkVersion >= version.Deneb) || (forkVersion >= version.DenebPlus)):
+	}
+	if result.GetBlobsBundle() == nil {
 		return result, engineerrors.ErrNilBlobsBundle
 	}
 
diff --git a/mod/execution/pkg/client/ethclient/engine.go b/mod/execution/pkg/client/ethclient/engine.go
index 7fe54f115..3db74e302 100644
--- a/mod/execution/pkg/client/ethclient/engine.go
+++ b/mod/execution/pkg/client/ethclient/engine.go
@@ -40,14 +40,13 @@ func (s *Client[ExecutionPayloadT]) NewPayload(
 	versionedHashes []common.ExecutionHash,
 	parentBlockRoot *common.Root,
 ) (*engineprimitives.PayloadStatusV1, error) {
-	switch payload.Version() {
-	case version.Deneb, version.DenebPlus:
-		return s.NewPayloadV3(
-			ctx, payload, versionedHashes, parentBlockRoot,
-		)
-	default:
+	if payload.Version() < version.Deneb {
 		return nil, ErrInvalidVersion
 	}
+
+	return s.NewPayloadV3(
+		ctx, payload, versionedHashes, parentBlockRoot,
+	)
 }
 
 // NewPayloadV3 is used to call the underlying JSON-RPC method for newPayload.
@@ -78,12 +77,11 @@ func (s *Client[ExecutionPayloadT]) ForkchoiceUpdated(
 	attrs any,
 	forkVersion uint32,
 ) (*engineprimitives.ForkchoiceResponseV1, error) {
-	switch forkVersion {
-	case version.Deneb, version.DenebPlus:
-		return s.ForkchoiceUpdatedV3(ctx, state, attrs)
-	default:
+	if forkVersion < version.Deneb {
 		return nil, ErrInvalidVersion
 	}
+
+	return s.ForkchoiceUpdatedV3(ctx, state, attrs)
 }
 
 // ForkchoiceUpdatedV3 calls the engine_forkchoiceUpdatedV3 method via JSON-RPC.
@@ -129,12 +127,11 @@ func (s *Client[ExecutionPayloadT]) GetPayload(
 	payloadID engineprimitives.PayloadID,
 	forkVersion uint32,
 ) (engineprimitives.BuiltExecutionPayloadEnv[ExecutionPayloadT], error) {
-	switch forkVersion {
-	case version.Deneb, version.DenebPlus:
-		return s.GetPayloadV3(ctx, payloadID)
-	default:
+	if forkVersion < version.Deneb {
 		return nil, ErrInvalidVersion
 	}
+
+	return s.GetPayloadV3(ctx, payloadID)
 }
 
 // GetPayloadV3 calls the engine_getPayloadV3 method via JSON-RPC.
diff --git a/mod/execution/pkg/client/ethclient/rpc/client.go b/mod/execution/pkg/client/ethclient/rpc/client.go
index bac4c479f..7517e64f3 100644
--- a/mod/execution/pkg/client/ethclient/rpc/client.go
+++ b/mod/execution/pkg/client/ethclient/rpc/client.go
@@ -46,6 +46,10 @@ type Client struct {
 	// jwtRefershInterval is the interval at which the JWT token should be
 	// refreshed.
 	jwtRefreshInterval time.Duration
+
+	// mu protects header for concurrent access.
+	mu sync.RWMutex
+
 	// header is the HTTP header used for RPC requests.
 	header http.Header
 }
@@ -76,13 +80,14 @@ func NewClient(url string, options ...func(rpc *Client)) *Client {
 // Start starts the rpc client.
 func (rpc *Client) Start(ctx context.Context) {
 	ticker := time.NewTicker(rpc.jwtRefreshInterval)
+	defer ticker.Stop()
+
 	if err := rpc.updateHeader(); err != nil {
 		panic(err)
 	}
 	for {
 		select {
 		case <-ctx.Done():
-			ticker.Stop()
 			return
 		case <-ticker.C:
 			if err := rpc.updateHeader(); err != nil {
@@ -143,7 +148,10 @@ func (rpc *Client) CallRaw(
 	if err != nil {
 		return nil, err
 	}
-	req.Header = rpc.header
+
+	rpc.mu.RLock()
+	req.Header = rpc.header.Clone()
+	rpc.mu.RUnlock()
 
 	response, err := rpc.client.Do(req)
 	if err != nil {
diff --git a/mod/execution/pkg/client/ethclient/rpc/header.go b/mod/execution/pkg/client/ethclient/rpc/header.go
index f12b566bf..4b649c885 100644
--- a/mod/execution/pkg/client/ethclient/rpc/header.go
+++ b/mod/execution/pkg/client/ethclient/rpc/header.go
@@ -29,7 +29,9 @@ func (rpc *Client) updateHeader() error {
 		return err
 	}
 
-	// Add the JWT token to the headers.
+	// Add the JWT token to the headers. Access header safely.
+	rpc.mu.Lock()
+	defer rpc.mu.Unlock()
 	rpc.header.Set("Authorization", "Bearer "+token)
 	return nil
 }
diff --git a/mod/execution/pkg/deposit/contract.go b/mod/execution/pkg/deposit/contract.go
index 1a9f30b4f..11f56f5db 100644
--- a/mod/execution/pkg/deposit/contract.go
+++ b/mod/execution/pkg/deposit/contract.go
@@ -23,6 +23,7 @@ package deposit
 import (
 	"context"
 	"errors"
+	"fmt"
 
 	gethprimitives "github.com/berachain/beacon-kit/mod/geth-primitives"
 	"github.com/berachain/beacon-kit/mod/geth-primitives/pkg/bind"
@@ -91,13 +92,29 @@ func (dc *WrappedBeaconDepositContract[
 
 	deposits := make([]DepositT, 0)
 	for logs.Next() {
-		var d DepositT
+		var (
+			cred   bytes.B32
+			pubKey bytes.B48
+			d      DepositT
+			sign   bytes.B96
+		)
+		pubKey, err = bytes.ToBytes48(logs.Event.Pubkey)
+		if err != nil {
+			return nil, fmt.Errorf("failed reading pub key: %w", err)
+		}
+		cred, err = bytes.ToBytes32(logs.Event.Credentials)
+		if err != nil {
+			return nil, fmt.Errorf("failed reading credentials: %w", err)
+		}
+		sign, err = bytes.ToBytes96(logs.Event.Signature)
+		if err != nil {
+			return nil, fmt.Errorf("failed reading signature: %w", err)
+		}
 		deposits = append(deposits, d.New(
-			bytes.ToBytes48(logs.Event.Pubkey),
-			WithdrawalCredentialsT(
-				bytes.ToBytes32(logs.Event.Credentials)),
+			pubKey,
+			WithdrawalCredentialsT(cred),
 			math.U64(logs.Event.Amount),
-			bytes.ToBytes96(logs.Event.Signature),
+			sign,
 			logs.Event.Index,
 		))
 	}
diff --git a/mod/execution/pkg/deposit/service.go b/mod/execution/pkg/deposit/service.go
index fc4732c93..59b15d0b7 100644
--- a/mod/execution/pkg/deposit/service.go
+++ b/mod/execution/pkg/deposit/service.go
@@ -22,6 +22,9 @@ package deposit
 
 import (
 	"context"
+	"maps"
+	"slices"
+	"sync"
 
 	asynctypes "github.com/berachain/beacon-kit/mod/async/pkg/types"
 	"github.com/berachain/beacon-kit/mod/log"
@@ -52,8 +55,10 @@ type Service[
 	subFinalizedBlockEvents chan async.Event[BeaconBlockT]
 	// metrics is the metrics for the deposit service.
 	metrics *metrics
-	// failedBlocks is a map of blocks that failed to be processed to be
-	// retried.
+	// mu protects failedBlocks for concurrent access.
+	mu sync.RWMutex
+	// failedBlocks is a map of blocks that failed to be processed
+	// and should be retried.
 	failedBlocks map[math.U64]struct{}
 }
 
@@ -132,3 +137,27 @@ func (s *Service[
 ]) Name() string {
 	return "deposit-handler"
 }
+
+func (s *Service[
+	_, _, _, _, _,
+]) markFailedBlock(blockNum math.U64) {
+	s.mu.Lock()
+	defer s.mu.Unlock()
+	s.failedBlocks[blockNum] = struct{}{}
+}
+
+func (s *Service[
+	_, _, _, _, _,
+]) clearFailedBlock(blockNum math.U64) {
+	s.mu.Lock()
+	defer s.mu.Unlock()
+	delete(s.failedBlocks, blockNum)
+}
+
+func (s *Service[
+	_, _, _, _, _,
+]) getFailedBlocks() []math.U64 {
+	s.mu.RLock()
+	defer s.mu.RUnlock()
+	return slices.Collect(maps.Keys(s.failedBlocks))
+}
diff --git a/mod/execution/pkg/deposit/sync.go b/mod/execution/pkg/deposit/sync.go
index f87281016..cedc59636 100644
--- a/mod/execution/pkg/deposit/sync.go
+++ b/mod/execution/pkg/deposit/sync.go
@@ -52,17 +52,18 @@ func (s *Service[
 		case <-ctx.Done():
 			return
 		case <-ticker.C:
-			if len(s.failedBlocks) == 0 {
+			failedBlks := s.getFailedBlocks()
+			if len(failedBlks) == 0 {
 				continue
 			}
 			s.logger.Warn(
 				"Failed to get deposits from block(s), retrying...",
 				"num_blocks",
-				s.failedBlocks,
+				failedBlks,
 			)
 
 			// Fetch deposits for blocks that failed to be processed.
-			for blockNum := range s.failedBlocks {
+			for _, blockNum := range failedBlks {
 				s.fetchAndStoreDeposits(ctx, blockNum)
 			}
 		}
@@ -74,8 +75,9 @@ func (s *Service[
 ]) fetchAndStoreDeposits(ctx context.Context, blockNum math.U64) {
 	deposits, err := s.dc.ReadDeposits(ctx, blockNum)
 	if err != nil {
+		s.logger.Error("Failed to read deposits", "error", err)
 		s.metrics.markFailedToGetBlockLogs(blockNum)
-		s.failedBlocks[blockNum] = struct{}{}
+		s.markFailedBlock(blockNum)
 		return
 	}
 
@@ -88,9 +90,9 @@ func (s *Service[
 
 	if err = s.ds.EnqueueDeposits(deposits); err != nil {
 		s.logger.Error("Failed to store deposits", "error", err)
-		s.failedBlocks[blockNum] = struct{}{}
+		s.markFailedBlock(blockNum)
 		return
 	}
 
-	delete(s.failedBlocks, blockNum)
+	s.clearFailedBlock(blockNum)
 }
diff --git a/mod/geth-primitives/go.mod b/mod/geth-primitives/go.mod
index 681146b46..ed9f7e5a7 100644
--- a/mod/geth-primitives/go.mod
+++ b/mod/geth-primitives/go.mod
@@ -35,6 +35,7 @@ require (
 	github.com/go-ole/go-ole v1.3.0 // indirect
 	github.com/gofrs/flock v0.12.1 // indirect
 	github.com/gogo/protobuf v1.3.2 // indirect
+	github.com/golang-jwt/jwt/v4 v4.5.1 // indirect
 	github.com/golang/snappy v0.0.5-0.20220116011046-fa5810519dcb // indirect
 	github.com/google/uuid v1.6.0 // indirect
 	github.com/gorilla/websocket v1.5.3 // indirect
@@ -69,12 +70,12 @@ require (
 	github.com/urfave/cli/v2 v2.27.2 // indirect
 	github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 // indirect
 	github.com/yusufpapurcu/wmi v1.2.4 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
 	golang.org/x/sync v0.8.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	rsc.io/tmplfunc v0.0.3 // indirect
 )
diff --git a/mod/geth-primitives/go.sum b/mod/geth-primitives/go.sum
index 20c0b9a05..f6963ea47 100644
--- a/mod/geth-primitives/go.sum
+++ b/mod/geth-primitives/go.sum
@@ -84,8 +84,8 @@ github.com/gofrs/flock v0.12.1 h1:MTLVXXHf8ekldpJk3AKicLij9MdwOWkZ+a/jHHZby9E=
 github.com/gofrs/flock v0.12.1/go.mod h1:9zxTsyu5xtJ9DK+1tFZyibEV7y3uwDxPPfbxeeHCoD0=
 github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
-github.com/golang-jwt/jwt/v4 v4.5.0 h1:7cYmW1XlMY7h7ii7UhUyChSgS5wUJEnm9uZVTGqOWzg=
-github.com/golang-jwt/jwt/v4 v4.5.0/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
+github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
+github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
 github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
 github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=
 github.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=
@@ -229,8 +229,8 @@ github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQ
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
@@ -244,8 +244,8 @@ golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -271,16 +271,16 @@ golang.org/x/sys v0.0.0-20220412211240-33da011f77ad/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
 golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -301,8 +301,8 @@ google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzi
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
 gopkg.in/natefinch/lumberjack.v2 v2.2.1 h1:bBRl1b0OH9s/DuPhuXpNl+VtCaJXFZ5/uEFST95x9zc=
diff --git a/mod/node-api/backend/backend.go b/mod/node-api/backend/backend.go
index edefe8dea..3779cda07 100644
--- a/mod/node-api/backend/backend.go
+++ b/mod/node-api/backend/backend.go
@@ -150,12 +150,12 @@ func (b *Backend[
 	return b.sb.BlockStore().GetSlotByStateRoot(root)
 }
 
-// GetSlotByExecutionNumber retrieves the slot by a given execution number from
+// GetParentSlotByTimestamp retrieves the parent slot by a given timestamp from
 // the block store.
 func (b *Backend[
 	_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
-]) GetSlotByExecutionNumber(executionNumber math.U64) (math.Slot, error) {
-	return b.sb.BlockStore().GetSlotByExecutionNumber(executionNumber)
+]) GetParentSlotByTimestamp(timestamp math.U64) (math.Slot, error) {
+	return b.sb.BlockStore().GetParentSlotByTimestamp(timestamp)
 }
 
 // stateFromSlot returns the state at the given slot, after also processing the
diff --git a/mod/node-api/backend/mocks/availability_store.mock.go b/mod/node-api/backend/mocks/availability_store.mock.go
index 73da57b56..20eb2e5b6 100644
--- a/mod/node-api/backend/mocks/availability_store.mock.go
+++ b/mod/node-api/backend/mocks/availability_store.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
@@ -10,11 +10,11 @@ import (
 )
 
 // AvailabilityStore is an autogenerated mock type for the AvailabilityStore type
-type AvailabilityStore[BeaconBlockBodyT interface{}, BlobSidecarsT interface{}] struct {
+type AvailabilityStore[BeaconBlockBodyT any, BlobSidecarsT any] struct {
 	mock.Mock
 }
 
-type AvailabilityStore_Expecter[BeaconBlockBodyT interface{}, BlobSidecarsT interface{}] struct {
+type AvailabilityStore_Expecter[BeaconBlockBodyT any, BlobSidecarsT any] struct {
 	mock *mock.Mock
 }
 
@@ -41,7 +41,7 @@ func (_m *AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT]) IsDataAvailable(_a
 }
 
 // AvailabilityStore_IsDataAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDataAvailable'
-type AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT interface{}, BlobSidecarsT interface{}] struct {
+type AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT any, BlobSidecarsT any] struct {
 	*mock.Call
 }
 
@@ -89,7 +89,7 @@ func (_m *AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT]) Persist(_a0 math.U
 }
 
 // AvailabilityStore_Persist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persist'
-type AvailabilityStore_Persist_Call[BeaconBlockBodyT interface{}, BlobSidecarsT interface{}] struct {
+type AvailabilityStore_Persist_Call[BeaconBlockBodyT any, BlobSidecarsT any] struct {
 	*mock.Call
 }
 
@@ -119,7 +119,7 @@ func (_c *AvailabilityStore_Persist_Call[BeaconBlockBodyT, BlobSidecarsT]) RunAn
 
 // NewAvailabilityStore creates a new instance of AvailabilityStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
 // The first argument is typically a *testing.T value.
-func NewAvailabilityStore[BeaconBlockBodyT interface{}, BlobSidecarsT interface{}](t interface {
+func NewAvailabilityStore[BeaconBlockBodyT any, BlobSidecarsT any](t interface {
 	mock.TestingT
 	Cleanup(func())
 }) *AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT] {
diff --git a/mod/node-api/backend/mocks/beacon_block_header.mock.go b/mod/node-api/backend/mocks/beacon_block_header.mock.go
index d8f37e531..eb238bac1 100644
--- a/mod/node-api/backend/mocks/beacon_block_header.mock.go
+++ b/mod/node-api/backend/mocks/beacon_block_header.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
@@ -10,11 +10,11 @@ import (
 )
 
 // BeaconBlockHeader is an autogenerated mock type for the BeaconBlockHeader type
-type BeaconBlockHeader[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader[BeaconBlockHeaderT any] struct {
 	mock.Mock
 }
 
-type BeaconBlockHeader_Expecter[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_Expecter[BeaconBlockHeaderT any] struct {
 	mock *mock.Mock
 }
 
@@ -43,7 +43,7 @@ func (_m *BeaconBlockHeader[BeaconBlockHeaderT]) GetBodyRoot() common.Root {
 }
 
 // BeaconBlockHeader_GetBodyRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBodyRoot'
-type BeaconBlockHeader_GetBodyRoot_Call[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_GetBodyRoot_Call[BeaconBlockHeaderT any] struct {
 	*mock.Call
 }
 
@@ -90,7 +90,7 @@ func (_m *BeaconBlockHeader[BeaconBlockHeaderT]) GetParentBlockRoot() common.Roo
 }
 
 // BeaconBlockHeader_GetParentBlockRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentBlockRoot'
-type BeaconBlockHeader_GetParentBlockRoot_Call[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_GetParentBlockRoot_Call[BeaconBlockHeaderT any] struct {
 	*mock.Call
 }
 
@@ -135,7 +135,7 @@ func (_m *BeaconBlockHeader[BeaconBlockHeaderT]) GetProposerIndex() math.U64 {
 }
 
 // BeaconBlockHeader_GetProposerIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposerIndex'
-type BeaconBlockHeader_GetProposerIndex_Call[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_GetProposerIndex_Call[BeaconBlockHeaderT any] struct {
 	*mock.Call
 }
 
@@ -180,7 +180,7 @@ func (_m *BeaconBlockHeader[BeaconBlockHeaderT]) GetSlot() math.U64 {
 }
 
 // BeaconBlockHeader_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
-type BeaconBlockHeader_GetSlot_Call[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_GetSlot_Call[BeaconBlockHeaderT any] struct {
 	*mock.Call
 }
 
@@ -227,7 +227,7 @@ func (_m *BeaconBlockHeader[BeaconBlockHeaderT]) GetStateRoot() common.Root {
 }
 
 // BeaconBlockHeader_GetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateRoot'
-type BeaconBlockHeader_GetStateRoot_Call[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_GetStateRoot_Call[BeaconBlockHeaderT any] struct {
 	*mock.Call
 }
 
@@ -274,7 +274,7 @@ func (_m *BeaconBlockHeader[BeaconBlockHeaderT]) HashTreeRoot() common.Root {
 }
 
 // BeaconBlockHeader_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
-type BeaconBlockHeader_HashTreeRoot_Call[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_HashTreeRoot_Call[BeaconBlockHeaderT any] struct {
 	*mock.Call
 }
 
@@ -331,7 +331,7 @@ func (_m *BeaconBlockHeader[BeaconBlockHeaderT]) MarshalSSZ() ([]byte, error) {
 }
 
 // BeaconBlockHeader_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
-type BeaconBlockHeader_MarshalSSZ_Call[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_MarshalSSZ_Call[BeaconBlockHeaderT any] struct {
 	*mock.Call
 }
 
@@ -369,14 +369,16 @@ func (_m *BeaconBlockHeader[BeaconBlockHeaderT]) New(slot math.U64, proposerInde
 	if rf, ok := ret.Get(0).(func(math.U64, math.U64, common.Root, common.Root, common.Root) BeaconBlockHeaderT); ok {
 		r0 = rf(slot, proposerIndex, parentBlockRoot, stateRoot, bodyRoot)
 	} else {
-		r0 = ret.Get(0).(BeaconBlockHeaderT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(BeaconBlockHeaderT)
+		}
 	}
 
 	return r0
 }
 
 // BeaconBlockHeader_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
-type BeaconBlockHeader_New_Call[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_New_Call[BeaconBlockHeaderT any] struct {
 	*mock.Call
 }
 
@@ -413,7 +415,7 @@ func (_m *BeaconBlockHeader[BeaconBlockHeaderT]) SetStateRoot(_a0 common.Root) {
 }
 
 // BeaconBlockHeader_SetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStateRoot'
-type BeaconBlockHeader_SetStateRoot_Call[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_SetStateRoot_Call[BeaconBlockHeaderT any] struct {
 	*mock.Call
 }
 
@@ -459,7 +461,7 @@ func (_m *BeaconBlockHeader[BeaconBlockHeaderT]) UnmarshalSSZ(_a0 []byte) error
 }
 
 // BeaconBlockHeader_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
-type BeaconBlockHeader_UnmarshalSSZ_Call[BeaconBlockHeaderT interface{}] struct {
+type BeaconBlockHeader_UnmarshalSSZ_Call[BeaconBlockHeaderT any] struct {
 	*mock.Call
 }
 
@@ -488,7 +490,7 @@ func (_c *BeaconBlockHeader_UnmarshalSSZ_Call[BeaconBlockHeaderT]) RunAndReturn(
 
 // NewBeaconBlockHeader creates a new instance of BeaconBlockHeader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
 // The first argument is typically a *testing.T value.
-func NewBeaconBlockHeader[BeaconBlockHeaderT interface{}](t interface {
+func NewBeaconBlockHeader[BeaconBlockHeaderT any](t interface {
 	mock.TestingT
 	Cleanup(func())
 }) *BeaconBlockHeader[BeaconBlockHeaderT] {
diff --git a/mod/node-api/backend/mocks/beacon_state.mock.go b/mod/node-api/backend/mocks/beacon_state.mock.go
index 8f2c90473..6d9fb92e2 100644
--- a/mod/node-api/backend/mocks/beacon_state.mock.go
+++ b/mod/node-api/backend/mocks/beacon_state.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
@@ -6,17 +6,19 @@ import (
 	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
 	common "github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 
+	crypto "github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
+
 	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 
 	mock "github.com/stretchr/testify/mock"
 )
 
 // BeaconState is an autogenerated mock type for the BeaconState type
-type BeaconState[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	mock.Mock
 }
 
-type BeaconState_Expecter[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_Expecter[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	mock *mock.Mock
 }
 
@@ -55,7 +57,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_ExpectedWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectedWithdrawals'
-type BeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -110,7 +112,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
-type BeaconState_GetBalance_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetBalance_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -168,7 +170,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetBlockRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockRootAtIndex'
-type BeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -211,7 +213,9 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 	if rf, ok := ret.Get(0).(func() Eth1DataT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(Eth1DataT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(Eth1DataT)
+		}
 	}
 
 	if rf, ok := ret.Get(1).(func() error); ok {
@@ -224,7 +228,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1Data'
-type BeaconState_GetEth1Data_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetEth1Data_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -279,7 +283,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetEth1DepositIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1DepositIndex'
-type BeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -321,7 +325,9 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 	if rf, ok := ret.Get(0).(func() ForkT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(ForkT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(ForkT)
+		}
 	}
 
 	if rf, ok := ret.Get(1).(func() error); ok {
@@ -334,7 +340,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetFork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFork'
-type BeaconState_GetFork_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetFork_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -391,7 +397,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetGenesisValidatorsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGenesisValidatorsRoot'
-type BeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -433,7 +439,9 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 	if rf, ok := ret.Get(0).(func() BeaconBlockHeaderT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(BeaconBlockHeaderT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(BeaconBlockHeaderT)
+		}
 	}
 
 	if rf, ok := ret.Get(1).(func() error); ok {
@@ -446,7 +454,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
-type BeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -488,7 +496,9 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 	if rf, ok := ret.Get(0).(func() ExecutionPayloadHeaderT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(ExecutionPayloadHeaderT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(ExecutionPayloadHeaderT)
+		}
 	}
 
 	if rf, ok := ret.Get(1).(func() error); ok {
@@ -501,7 +511,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetLatestExecutionPayloadHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestExecutionPayloadHeader'
-type BeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -556,7 +566,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetNextWithdrawalIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWithdrawalIndex'
-type BeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -611,7 +621,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetNextWithdrawalValidatorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWithdrawalValidatorIndex'
-type BeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -668,7 +678,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetRandaoMixAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandaoMixAtIndex'
-type BeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -724,7 +734,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetSlashingAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlashingAtIndex'
-type BeaconState_GetSlashingAtIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetSlashingAtIndex_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -780,7 +790,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
-type BeaconState_GetSlot_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetSlot_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -835,7 +845,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetTotalActiveBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalActiveBalances'
-type BeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -891,7 +901,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetTotalSlashing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalSlashing'
-type BeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -946,7 +956,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetTotalValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalValidators'
-type BeaconState_GetTotalValidators_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetTotalValidators_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -988,7 +998,9 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 	if rf, ok := ret.Get(0).(func() ValidatorsT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(ValidatorsT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(ValidatorsT)
+		}
 	}
 
 	if rf, ok := ret.Get(1).(func() error); ok {
@@ -1001,7 +1013,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidators'
-type BeaconState_GetValidators_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetValidators_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -1058,7 +1070,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_GetValidatorsByEffectiveBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatorsByEffectiveBalance'
-type BeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -1103,7 +1115,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_SetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSlot'
-type BeaconState_SetSlot_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_SetSlot_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -1161,7 +1173,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_StateRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateRootAtIndex'
-type BeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -1204,7 +1216,9 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 	if rf, ok := ret.Get(0).(func(math.U64) ValidatorT); ok {
 		r0 = rf(_a0)
 	} else {
-		r0 = ret.Get(0).(ValidatorT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(ValidatorT)
+		}
 	}
 
 	if rf, ok := ret.Get(1).(func(math.U64) error); ok {
@@ -1217,7 +1231,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_ValidatorByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorByIndex'
-type BeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -1273,7 +1287,7 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_ValidatorIndexByCometBFTAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorIndexByCometBFTAddress'
-type BeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
@@ -1301,7 +1315,7 @@ func (_c *BeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT, E
 }
 
 // ValidatorIndexByPubkey provides a mock function with given fields: _a0
-func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT]) ValidatorIndexByPubkey(_a0 bytes.B48) (math.U64, error) {
+func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT]) ValidatorIndexByPubkey(_a0 crypto.BLSPubkey) (math.U64, error) {
 	ret := _m.Called(_a0)
 
 	if len(ret) == 0 {
@@ -1310,16 +1324,16 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 
 	var r0 math.U64
 	var r1 error
-	if rf, ok := ret.Get(0).(func(bytes.B48) (math.U64, error)); ok {
+	if rf, ok := ret.Get(0).(func(crypto.BLSPubkey) (math.U64, error)); ok {
 		return rf(_a0)
 	}
-	if rf, ok := ret.Get(0).(func(bytes.B48) math.U64); ok {
+	if rf, ok := ret.Get(0).(func(crypto.BLSPubkey) math.U64); ok {
 		r0 = rf(_a0)
 	} else {
 		r0 = ret.Get(0).(math.U64)
 	}
 
-	if rf, ok := ret.Get(1).(func(bytes.B48) error); ok {
+	if rf, ok := ret.Get(1).(func(crypto.BLSPubkey) error); ok {
 		r1 = rf(_a0)
 	} else {
 		r1 = ret.Error(1)
@@ -1329,19 +1343,19 @@ func (_m *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, Fo
 }
 
 // BeaconState_ValidatorIndexByPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorIndexByPubkey'
-type BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}] struct {
+type BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
 	*mock.Call
 }
 
 // ValidatorIndexByPubkey is a helper method to define mock.On call
-//   - _a0 bytes.B48
+//   - _a0 crypto.BLSPubkey
 func (_e *BeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT]) ValidatorIndexByPubkey(_a0 interface{}) *BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT] {
 	return &BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("ValidatorIndexByPubkey", _a0)}
 }
 
-func (_c *BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 bytes.B48)) *BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT] {
+func (_c *BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 crypto.BLSPubkey)) *BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT] {
 	_c.Call.Run(func(args mock.Arguments) {
-		run(args[0].(bytes.B48))
+		run(args[0].(crypto.BLSPubkey))
 	})
 	return _c
 }
@@ -1351,14 +1365,14 @@ func (_c *BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT,
 	return _c
 }
 
-func (_c *BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(bytes.B48) (math.U64, error)) *BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT] {
+func (_c *BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(crypto.BLSPubkey) (math.U64, error)) *BeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT] {
 	_c.Call.Return(run)
 	return _c
 }
 
 // NewBeaconState creates a new instance of BeaconState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
 // The first argument is typically a *testing.T value.
-func NewBeaconState[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}, ValidatorsT interface{}, WithdrawalT interface{}](t interface {
+func NewBeaconState[BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, ValidatorT any, ValidatorsT any, WithdrawalT any](t interface {
 	mock.TestingT
 	Cleanup(func())
 }) *BeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT, ValidatorsT, WithdrawalT] {
diff --git a/mod/node-api/backend/mocks/block_store.mock.go b/mod/node-api/backend/mocks/block_store.mock.go
index 7291d32d7..df70ab86b 100644
--- a/mod/node-api/backend/mocks/block_store.mock.go
+++ b/mod/node-api/backend/mocks/block_store.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
@@ -10,11 +10,11 @@ import (
 )
 
 // BlockStore is an autogenerated mock type for the BlockStore type
-type BlockStore[BeaconBlockT interface{}] struct {
+type BlockStore[BeaconBlockT any] struct {
 	mock.Mock
 }
 
-type BlockStore_Expecter[BeaconBlockT interface{}] struct {
+type BlockStore_Expecter[BeaconBlockT any] struct {
 	mock *mock.Mock
 }
 
@@ -22,27 +22,27 @@ func (_m *BlockStore[BeaconBlockT]) EXPECT() *BlockStore_Expecter[BeaconBlockT]
 	return &BlockStore_Expecter[BeaconBlockT]{mock: &_m.Mock}
 }
 
-// GetSlotByBlockRoot provides a mock function with given fields: root
-func (_m *BlockStore[BeaconBlockT]) GetSlotByBlockRoot(root common.Root) (math.U64, error) {
-	ret := _m.Called(root)
+// GetParentSlotByTimestamp provides a mock function with given fields: timestamp
+func (_m *BlockStore[BeaconBlockT]) GetParentSlotByTimestamp(timestamp math.U64) (math.U64, error) {
+	ret := _m.Called(timestamp)
 
 	if len(ret) == 0 {
-		panic("no return value specified for GetSlotByBlockRoot")
+		panic("no return value specified for GetParentSlotByTimestamp")
 	}
 
 	var r0 math.U64
 	var r1 error
-	if rf, ok := ret.Get(0).(func(common.Root) (math.U64, error)); ok {
-		return rf(root)
+	if rf, ok := ret.Get(0).(func(math.U64) (math.U64, error)); ok {
+		return rf(timestamp)
 	}
-	if rf, ok := ret.Get(0).(func(common.Root) math.U64); ok {
-		r0 = rf(root)
+	if rf, ok := ret.Get(0).(func(math.U64) math.U64); ok {
+		r0 = rf(timestamp)
 	} else {
 		r0 = ret.Get(0).(math.U64)
 	}
 
-	if rf, ok := ret.Get(1).(func(common.Root) error); ok {
-		r1 = rf(root)
+	if rf, ok := ret.Get(1).(func(math.U64) error); ok {
+		r1 = rf(timestamp)
 	} else {
 		r1 = ret.Error(1)
 	}
@@ -50,55 +50,55 @@ func (_m *BlockStore[BeaconBlockT]) GetSlotByBlockRoot(root common.Root) (math.U
 	return r0, r1
 }
 
-// BlockStore_GetSlotByBlockRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlotByBlockRoot'
-type BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT interface{}] struct {
+// BlockStore_GetParentSlotByTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentSlotByTimestamp'
+type BlockStore_GetParentSlotByTimestamp_Call[BeaconBlockT any] struct {
 	*mock.Call
 }
 
-// GetSlotByBlockRoot is a helper method to define mock.On call
-//   - root common.Root
-func (_e *BlockStore_Expecter[BeaconBlockT]) GetSlotByBlockRoot(root interface{}) *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT] {
-	return &BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT]{Call: _e.mock.On("GetSlotByBlockRoot", root)}
+// GetParentSlotByTimestamp is a helper method to define mock.On call
+//   - timestamp math.U64
+func (_e *BlockStore_Expecter[BeaconBlockT]) GetParentSlotByTimestamp(timestamp interface{}) *BlockStore_GetParentSlotByTimestamp_Call[BeaconBlockT] {
+	return &BlockStore_GetParentSlotByTimestamp_Call[BeaconBlockT]{Call: _e.mock.On("GetParentSlotByTimestamp", timestamp)}
 }
 
-func (_c *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT]) Run(run func(root common.Root)) *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT] {
+func (_c *BlockStore_GetParentSlotByTimestamp_Call[BeaconBlockT]) Run(run func(timestamp math.U64)) *BlockStore_GetParentSlotByTimestamp_Call[BeaconBlockT] {
 	_c.Call.Run(func(args mock.Arguments) {
-		run(args[0].(common.Root))
+		run(args[0].(math.U64))
 	})
 	return _c
 }
 
-func (_c *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT]) Return(_a0 math.U64, _a1 error) *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT] {
+func (_c *BlockStore_GetParentSlotByTimestamp_Call[BeaconBlockT]) Return(_a0 math.U64, _a1 error) *BlockStore_GetParentSlotByTimestamp_Call[BeaconBlockT] {
 	_c.Call.Return(_a0, _a1)
 	return _c
 }
 
-func (_c *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT]) RunAndReturn(run func(common.Root) (math.U64, error)) *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT] {
+func (_c *BlockStore_GetParentSlotByTimestamp_Call[BeaconBlockT]) RunAndReturn(run func(math.U64) (math.U64, error)) *BlockStore_GetParentSlotByTimestamp_Call[BeaconBlockT] {
 	_c.Call.Return(run)
 	return _c
 }
 
-// GetSlotByExecutionNumber provides a mock function with given fields: executionNumber
-func (_m *BlockStore[BeaconBlockT]) GetSlotByExecutionNumber(executionNumber math.U64) (math.U64, error) {
-	ret := _m.Called(executionNumber)
+// GetSlotByBlockRoot provides a mock function with given fields: root
+func (_m *BlockStore[BeaconBlockT]) GetSlotByBlockRoot(root common.Root) (math.U64, error) {
+	ret := _m.Called(root)
 
 	if len(ret) == 0 {
-		panic("no return value specified for GetSlotByExecutionNumber")
+		panic("no return value specified for GetSlotByBlockRoot")
 	}
 
 	var r0 math.U64
 	var r1 error
-	if rf, ok := ret.Get(0).(func(math.U64) (math.U64, error)); ok {
-		return rf(executionNumber)
+	if rf, ok := ret.Get(0).(func(common.Root) (math.U64, error)); ok {
+		return rf(root)
 	}
-	if rf, ok := ret.Get(0).(func(math.U64) math.U64); ok {
-		r0 = rf(executionNumber)
+	if rf, ok := ret.Get(0).(func(common.Root) math.U64); ok {
+		r0 = rf(root)
 	} else {
 		r0 = ret.Get(0).(math.U64)
 	}
 
-	if rf, ok := ret.Get(1).(func(math.U64) error); ok {
-		r1 = rf(executionNumber)
+	if rf, ok := ret.Get(1).(func(common.Root) error); ok {
+		r1 = rf(root)
 	} else {
 		r1 = ret.Error(1)
 	}
@@ -106,30 +106,30 @@ func (_m *BlockStore[BeaconBlockT]) GetSlotByExecutionNumber(executionNumber mat
 	return r0, r1
 }
 
-// BlockStore_GetSlotByExecutionNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlotByExecutionNumber'
-type BlockStore_GetSlotByExecutionNumber_Call[BeaconBlockT interface{}] struct {
+// BlockStore_GetSlotByBlockRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlotByBlockRoot'
+type BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT any] struct {
 	*mock.Call
 }
 
-// GetSlotByExecutionNumber is a helper method to define mock.On call
-//   - executionNumber math.U64
-func (_e *BlockStore_Expecter[BeaconBlockT]) GetSlotByExecutionNumber(executionNumber interface{}) *BlockStore_GetSlotByExecutionNumber_Call[BeaconBlockT] {
-	return &BlockStore_GetSlotByExecutionNumber_Call[BeaconBlockT]{Call: _e.mock.On("GetSlotByExecutionNumber", executionNumber)}
+// GetSlotByBlockRoot is a helper method to define mock.On call
+//   - root common.Root
+func (_e *BlockStore_Expecter[BeaconBlockT]) GetSlotByBlockRoot(root interface{}) *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT] {
+	return &BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT]{Call: _e.mock.On("GetSlotByBlockRoot", root)}
 }
 
-func (_c *BlockStore_GetSlotByExecutionNumber_Call[BeaconBlockT]) Run(run func(executionNumber math.U64)) *BlockStore_GetSlotByExecutionNumber_Call[BeaconBlockT] {
+func (_c *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT]) Run(run func(root common.Root)) *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT] {
 	_c.Call.Run(func(args mock.Arguments) {
-		run(args[0].(math.U64))
+		run(args[0].(common.Root))
 	})
 	return _c
 }
 
-func (_c *BlockStore_GetSlotByExecutionNumber_Call[BeaconBlockT]) Return(_a0 math.U64, _a1 error) *BlockStore_GetSlotByExecutionNumber_Call[BeaconBlockT] {
+func (_c *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT]) Return(_a0 math.U64, _a1 error) *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT] {
 	_c.Call.Return(_a0, _a1)
 	return _c
 }
 
-func (_c *BlockStore_GetSlotByExecutionNumber_Call[BeaconBlockT]) RunAndReturn(run func(math.U64) (math.U64, error)) *BlockStore_GetSlotByExecutionNumber_Call[BeaconBlockT] {
+func (_c *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT]) RunAndReturn(run func(common.Root) (math.U64, error)) *BlockStore_GetSlotByBlockRoot_Call[BeaconBlockT] {
 	_c.Call.Return(run)
 	return _c
 }
@@ -163,7 +163,7 @@ func (_m *BlockStore[BeaconBlockT]) GetSlotByStateRoot(root common.Root) (math.U
 }
 
 // BlockStore_GetSlotByStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlotByStateRoot'
-type BlockStore_GetSlotByStateRoot_Call[BeaconBlockT interface{}] struct {
+type BlockStore_GetSlotByStateRoot_Call[BeaconBlockT any] struct {
 	*mock.Call
 }
 
@@ -192,7 +192,7 @@ func (_c *BlockStore_GetSlotByStateRoot_Call[BeaconBlockT]) RunAndReturn(run fun
 
 // NewBlockStore creates a new instance of BlockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
 // The first argument is typically a *testing.T value.
-func NewBlockStore[BeaconBlockT interface{}](t interface {
+func NewBlockStore[BeaconBlockT any](t interface {
 	mock.TestingT
 	Cleanup(func())
 }) *BlockStore[BeaconBlockT] {
diff --git a/mod/node-api/backend/mocks/deposit_store.mock.go b/mod/node-api/backend/mocks/deposit_store.mock.go
index dfb7d25f4..32e838105 100644
--- a/mod/node-api/backend/mocks/deposit_store.mock.go
+++ b/mod/node-api/backend/mocks/deposit_store.mock.go
@@ -1,15 +1,15 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
 import mock "github.com/stretchr/testify/mock"
 
 // DepositStore is an autogenerated mock type for the DepositStore type
-type DepositStore[DepositT interface{}] struct {
+type DepositStore[DepositT any] struct {
 	mock.Mock
 }
 
-type DepositStore_Expecter[DepositT interface{}] struct {
+type DepositStore_Expecter[DepositT any] struct {
 	mock *mock.Mock
 }
 
@@ -36,7 +36,7 @@ func (_m *DepositStore[DepositT]) EnqueueDeposits(deposits []DepositT) error {
 }
 
 // DepositStore_EnqueueDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueDeposits'
-type DepositStore_EnqueueDeposits_Call[DepositT interface{}] struct {
+type DepositStore_EnqueueDeposits_Call[DepositT any] struct {
 	*mock.Call
 }
 
@@ -94,7 +94,7 @@ func (_m *DepositStore[DepositT]) GetDepositsByIndex(startIndex uint64, numView
 }
 
 // DepositStore_GetDepositsByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDepositsByIndex'
-type DepositStore_GetDepositsByIndex_Call[DepositT interface{}] struct {
+type DepositStore_GetDepositsByIndex_Call[DepositT any] struct {
 	*mock.Call
 }
 
@@ -141,7 +141,7 @@ func (_m *DepositStore[DepositT]) Prune(start uint64, end uint64) error {
 }
 
 // DepositStore_Prune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prune'
-type DepositStore_Prune_Call[DepositT interface{}] struct {
+type DepositStore_Prune_Call[DepositT any] struct {
 	*mock.Call
 }
 
@@ -171,7 +171,7 @@ func (_c *DepositStore_Prune_Call[DepositT]) RunAndReturn(run func(uint64, uint6
 
 // NewDepositStore creates a new instance of DepositStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
 // The first argument is typically a *testing.T value.
-func NewDepositStore[DepositT interface{}](t interface {
+func NewDepositStore[DepositT any](t interface {
 	mock.TestingT
 	Cleanup(func())
 }) *DepositStore[DepositT] {
diff --git a/mod/node-api/backend/mocks/node.mock.go b/mod/node-api/backend/mocks/node.mock.go
index 421045cc6..b80643442 100644
--- a/mod/node-api/backend/mocks/node.mock.go
+++ b/mod/node-api/backend/mocks/node.mock.go
@@ -1,15 +1,15 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
 import mock "github.com/stretchr/testify/mock"
 
 // Node is an autogenerated mock type for the Node type
-type Node[ContextT interface{}] struct {
+type Node[ContextT any] struct {
 	mock.Mock
 }
 
-type Node_Expecter[ContextT interface{}] struct {
+type Node_Expecter[ContextT any] struct {
 	mock *mock.Mock
 }
 
@@ -33,7 +33,9 @@ func (_m *Node[ContextT]) CreateQueryContext(height int64, prove bool) (ContextT
 	if rf, ok := ret.Get(0).(func(int64, bool) ContextT); ok {
 		r0 = rf(height, prove)
 	} else {
-		r0 = ret.Get(0).(ContextT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(ContextT)
+		}
 	}
 
 	if rf, ok := ret.Get(1).(func(int64, bool) error); ok {
@@ -46,7 +48,7 @@ func (_m *Node[ContextT]) CreateQueryContext(height int64, prove bool) (ContextT
 }
 
 // Node_CreateQueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQueryContext'
-type Node_CreateQueryContext_Call[ContextT interface{}] struct {
+type Node_CreateQueryContext_Call[ContextT any] struct {
 	*mock.Call
 }
 
@@ -76,7 +78,7 @@ func (_c *Node_CreateQueryContext_Call[ContextT]) RunAndReturn(run func(int64, b
 
 // NewNode creates a new instance of Node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
 // The first argument is typically a *testing.T value.
-func NewNode[ContextT interface{}](t interface {
+func NewNode[ContextT any](t interface {
 	mock.TestingT
 	Cleanup(func())
 }) *Node[ContextT] {
diff --git a/mod/node-api/backend/mocks/state_processor.mock.go b/mod/node-api/backend/mocks/state_processor.mock.go
index a836834f6..ac2b23b03 100644
--- a/mod/node-api/backend/mocks/state_processor.mock.go
+++ b/mod/node-api/backend/mocks/state_processor.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
@@ -10,11 +10,11 @@ import (
 )
 
 // StateProcessor is an autogenerated mock type for the StateProcessor type
-type StateProcessor[BeaconStateT interface{}] struct {
+type StateProcessor[BeaconStateT any] struct {
 	mock.Mock
 }
 
-type StateProcessor_Expecter[BeaconStateT interface{}] struct {
+type StateProcessor_Expecter[BeaconStateT any] struct {
 	mock *mock.Mock
 }
 
@@ -53,7 +53,7 @@ func (_m *StateProcessor[BeaconStateT]) ProcessSlots(_a0 BeaconStateT, _a1 math.
 }
 
 // StateProcessor_ProcessSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessSlots'
-type StateProcessor_ProcessSlots_Call[BeaconStateT interface{}] struct {
+type StateProcessor_ProcessSlots_Call[BeaconStateT any] struct {
 	*mock.Call
 }
 
@@ -83,7 +83,7 @@ func (_c *StateProcessor_ProcessSlots_Call[BeaconStateT]) RunAndReturn(run func(
 
 // NewStateProcessor creates a new instance of StateProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
 // The first argument is typically a *testing.T value.
-func NewStateProcessor[BeaconStateT interface{}](t interface {
+func NewStateProcessor[BeaconStateT any](t interface {
 	mock.TestingT
 	Cleanup(func())
 }) *StateProcessor[BeaconStateT] {
diff --git a/mod/node-api/backend/mocks/storage_backend.mock.go b/mod/node-api/backend/mocks/storage_backend.mock.go
index deff6b577..dd28160b4 100644
--- a/mod/node-api/backend/mocks/storage_backend.mock.go
+++ b/mod/node-api/backend/mocks/storage_backend.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
@@ -9,11 +9,11 @@ import (
 )
 
 // StorageBackend is an autogenerated mock type for the StorageBackend type
-type StorageBackend[AvailabilityStoreT interface{}, BeaconStateT interface{}, BlockStoreT interface{}, DepositStoreT interface{}] struct {
+type StorageBackend[AvailabilityStoreT any, BeaconStateT any, BlockStoreT any, DepositStoreT any] struct {
 	mock.Mock
 }
 
-type StorageBackend_Expecter[AvailabilityStoreT interface{}, BeaconStateT interface{}, BlockStoreT interface{}, DepositStoreT interface{}] struct {
+type StorageBackend_Expecter[AvailabilityStoreT any, BeaconStateT any, BlockStoreT any, DepositStoreT any] struct {
 	mock *mock.Mock
 }
 
@@ -33,14 +33,16 @@ func (_m *StorageBackend[AvailabilityStoreT, BeaconStateT, BlockStoreT, DepositS
 	if rf, ok := ret.Get(0).(func() AvailabilityStoreT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(AvailabilityStoreT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(AvailabilityStoreT)
+		}
 	}
 
 	return r0
 }
 
 // StorageBackend_AvailabilityStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailabilityStore'
-type StorageBackend_AvailabilityStore_Call[AvailabilityStoreT interface{}, BeaconStateT interface{}, BlockStoreT interface{}, DepositStoreT interface{}] struct {
+type StorageBackend_AvailabilityStore_Call[AvailabilityStoreT any, BeaconStateT any, BlockStoreT any, DepositStoreT any] struct {
 	*mock.Call
 }
 
@@ -78,14 +80,16 @@ func (_m *StorageBackend[AvailabilityStoreT, BeaconStateT, BlockStoreT, DepositS
 	if rf, ok := ret.Get(0).(func() BlockStoreT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(BlockStoreT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(BlockStoreT)
+		}
 	}
 
 	return r0
 }
 
 // StorageBackend_BlockStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockStore'
-type StorageBackend_BlockStore_Call[AvailabilityStoreT interface{}, BeaconStateT interface{}, BlockStoreT interface{}, DepositStoreT interface{}] struct {
+type StorageBackend_BlockStore_Call[AvailabilityStoreT any, BeaconStateT any, BlockStoreT any, DepositStoreT any] struct {
 	*mock.Call
 }
 
@@ -123,14 +127,16 @@ func (_m *StorageBackend[AvailabilityStoreT, BeaconStateT, BlockStoreT, DepositS
 	if rf, ok := ret.Get(0).(func() DepositStoreT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(DepositStoreT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(DepositStoreT)
+		}
 	}
 
 	return r0
 }
 
 // StorageBackend_DepositStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DepositStore'
-type StorageBackend_DepositStore_Call[AvailabilityStoreT interface{}, BeaconStateT interface{}, BlockStoreT interface{}, DepositStoreT interface{}] struct {
+type StorageBackend_DepositStore_Call[AvailabilityStoreT any, BeaconStateT any, BlockStoreT any, DepositStoreT any] struct {
 	*mock.Call
 }
 
@@ -168,14 +174,16 @@ func (_m *StorageBackend[AvailabilityStoreT, BeaconStateT, BlockStoreT, DepositS
 	if rf, ok := ret.Get(0).(func(context.Context) BeaconStateT); ok {
 		r0 = rf(_a0)
 	} else {
-		r0 = ret.Get(0).(BeaconStateT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(BeaconStateT)
+		}
 	}
 
 	return r0
 }
 
 // StorageBackend_StateFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateFromContext'
-type StorageBackend_StateFromContext_Call[AvailabilityStoreT interface{}, BeaconStateT interface{}, BlockStoreT interface{}, DepositStoreT interface{}] struct {
+type StorageBackend_StateFromContext_Call[AvailabilityStoreT any, BeaconStateT any, BlockStoreT any, DepositStoreT any] struct {
 	*mock.Call
 }
 
@@ -204,7 +212,7 @@ func (_c *StorageBackend_StateFromContext_Call[AvailabilityStoreT, BeaconStateT,
 
 // NewStorageBackend creates a new instance of StorageBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
 // The first argument is typically a *testing.T value.
-func NewStorageBackend[AvailabilityStoreT interface{}, BeaconStateT interface{}, BlockStoreT interface{}, DepositStoreT interface{}](t interface {
+func NewStorageBackend[AvailabilityStoreT any, BeaconStateT any, BlockStoreT any, DepositStoreT any](t interface {
 	mock.TestingT
 	Cleanup(func())
 }) *StorageBackend[AvailabilityStoreT, BeaconStateT, BlockStoreT, DepositStoreT] {
diff --git a/mod/node-api/backend/mocks/validator.mock.go b/mod/node-api/backend/mocks/validator.mock.go
index d0134d4c3..3f904a98e 100644
--- a/mod/node-api/backend/mocks/validator.mock.go
+++ b/mod/node-api/backend/mocks/validator.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
@@ -34,7 +34,9 @@ func (_m *Validator[WithdrawalCredentialsT]) GetWithdrawalCredentials() Withdraw
 	if rf, ok := ret.Get(0).(func() WithdrawalCredentialsT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(WithdrawalCredentialsT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(WithdrawalCredentialsT)
+		}
 	}
 
 	return r0
diff --git a/mod/node-api/backend/mocks/withdrawal.mock.go b/mod/node-api/backend/mocks/withdrawal.mock.go
index bf5054307..654d5f85e 100644
--- a/mod/node-api/backend/mocks/withdrawal.mock.go
+++ b/mod/node-api/backend/mocks/withdrawal.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
@@ -10,11 +10,11 @@ import (
 )
 
 // Withdrawal is an autogenerated mock type for the Withdrawal type
-type Withdrawal[T interface{}] struct {
+type Withdrawal[T any] struct {
 	mock.Mock
 }
 
-type Withdrawal_Expecter[T interface{}] struct {
+type Withdrawal_Expecter[T any] struct {
 	mock *mock.Mock
 }
 
@@ -34,14 +34,16 @@ func (_m *Withdrawal[T]) New(index math.U64, validator math.U64, address common.
 	if rf, ok := ret.Get(0).(func(math.U64, math.U64, common.ExecutionAddress, math.U64) T); ok {
 		r0 = rf(index, validator, address, amount)
 	} else {
-		r0 = ret.Get(0).(T)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(T)
+		}
 	}
 
 	return r0
 }
 
 // Withdrawal_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
-type Withdrawal_New_Call[T interface{}] struct {
+type Withdrawal_New_Call[T any] struct {
 	*mock.Call
 }
 
@@ -73,7 +75,7 @@ func (_c *Withdrawal_New_Call[T]) RunAndReturn(run func(math.U64, math.U64, comm
 
 // NewWithdrawal creates a new instance of Withdrawal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
 // The first argument is typically a *testing.T value.
-func NewWithdrawal[T interface{}](t interface {
+func NewWithdrawal[T any](t interface {
 	mock.TestingT
 	Cleanup(func())
 }) *Withdrawal[T] {
diff --git a/mod/node-api/backend/mocks/withdrawal_credentials.mock.go b/mod/node-api/backend/mocks/withdrawal_credentials.mock.go
index bbe129e35..5189b3b6b 100644
--- a/mod/node-api/backend/mocks/withdrawal_credentials.mock.go
+++ b/mod/node-api/backend/mocks/withdrawal_credentials.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
diff --git a/mod/node-api/backend/types.go b/mod/node-api/backend/types.go
index 0ae940772..44e26ff4f 100644
--- a/mod/node-api/backend/types.go
+++ b/mod/node-api/backend/types.go
@@ -82,8 +82,8 @@ type BlockStore[BeaconBlockT any] interface {
 	GetSlotByBlockRoot(root common.Root) (math.Slot, error)
 	// GetSlotByStateRoot retrieves the slot by a given state root.
 	GetSlotByStateRoot(root common.Root) (math.Slot, error)
-	// GetSlotByExecutionNumber retrieves the slot by a given execution number.
-	GetSlotByExecutionNumber(executionNumber math.U64) (math.Slot, error)
+	// GetParentSlotByTimestamp retrieves the parent slot by a given timestamp.
+	GetParentSlotByTimestamp(timestamp math.U64) (math.Slot, error)
 }
 
 // DepositStore defines the interface for deposit storage.
diff --git a/mod/node-api/engines/echo/vaildator.go b/mod/node-api/engines/echo/vaildator.go
index 8792cfbac..d7938a0a7 100644
--- a/mod/node-api/engines/echo/vaildator.go
+++ b/mod/node-api/engines/echo/vaildator.go
@@ -24,10 +24,11 @@ import (
 	"errors"
 	"fmt"
 	"net/http"
-	"regexp"
 	"strconv"
 
 	"github.com/berachain/beacon-kit/mod/node-api/handlers/utils"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
 	"github.com/go-playground/validator/v10"
 	"github.com/labstack/echo/v4"
 )
@@ -60,12 +61,13 @@ func (cv *CustomValidator) Validate(i interface{}) error {
 
 func ConstructValidator() *validator.Validate {
 	validators := map[string](func(fl validator.FieldLevel) bool){
-		"state_id":     ValidateStateID,
-		"block_id":     ValidateBlockID,
-		"execution_id": ValidateExecutionID,
-		"validator_id": ValidateValidatorID,
-		"epoch":        ValidateUint64,
-		"slot":         ValidateUint64,
+		"state_id":         ValidateStateID,
+		"block_id":         ValidateBlockID,
+		"timestamp_id":     ValidateTimestampID,
+		"validator_id":     ValidateValidatorID,
+		"epoch":            ValidateUint64,
+		"slot":             ValidateUint64,
+		"validator_status": ValidateValidatorStatus,
 	}
 	validate := validator.New()
 	for tag, fn := range validators {
@@ -96,7 +98,7 @@ func ValidateBlockID(fl validator.FieldLevel) bool {
 	return validateStateBlockIDs(fl.Field().String(), allowedValues)
 }
 
-func ValidateExecutionID(fl validator.FieldLevel) bool {
+func ValidateTimestampID(fl validator.FieldLevel) bool {
 	allowedValues := map[string]bool{
 		utils.StateIDHead:      true,
 		utils.StateIDGenesis:   true,
@@ -105,7 +107,7 @@ func ValidateExecutionID(fl validator.FieldLevel) bool {
 	}
 
 	value := fl.Field().String()
-	if utils.IsExecutionNumberPrefix(value) {
+	if utils.IsTimestampIDPrefix(value) {
 		return ValidateUint64Dec(value[1:])
 	}
 
@@ -130,11 +132,9 @@ func ValidateUint64(fl validator.FieldLevel) bool {
 // validator identifier. It validates against a hex-encoded public key
 // or a numeric validator index.
 func ValidateValidatorID(fl validator.FieldLevel) bool {
-	valid, err := validateRegex(fl.Field().String(), `^0x[0-9a-fA-F]{1,96}$`)
-	if err != nil {
-		return false
-	}
-	if valid {
+	var key crypto.BLSPubkey
+	err := key.UnmarshalText([]byte(fl.Field().String()))
+	if err == nil {
 		return true
 	}
 	if ValidateUint64(fl) {
@@ -146,11 +146,8 @@ func ValidateValidatorID(fl validator.FieldLevel) bool {
 // ValidateRoot checks if the provided field is a valid root.
 // It validates against a 32 byte hex-encoded root with "0x" prefix.
 func ValidateRoot(value string) bool {
-	valid, err := validateRegex(value, `^0x[0-9a-fA-F]{64}$`)
-	if err != nil {
-		return false
-	}
-	return valid
+	_, err := common.NewRootFromHex(value)
+	return err == nil
 }
 
 func ValidateValidatorStatus(fl validator.FieldLevel) bool {
@@ -179,17 +176,6 @@ func validateAllowedStrings(
 	return allowedValues[value]
 }
 
-func validateRegex(value string, hexPattern string) (bool, error) {
-	if value == "" {
-		return true, nil
-	}
-	matched, err := regexp.MatchString(hexPattern, value)
-	if err != nil {
-		return false, err
-	}
-	return matched, nil
-}
-
 func validateStateBlockIDs(value string, allowedValues map[string]bool) bool {
 	// Check if value is one of the allowed values
 	if validateAllowedStrings(value, allowedValues) {
diff --git a/mod/node-api/engines/go.mod b/mod/node-api/engines/go.mod
index 6efa4a8cb..2c2a6e640 100644
--- a/mod/node-api/engines/go.mod
+++ b/mod/node-api/engines/go.mod
@@ -6,17 +6,17 @@ require (
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240705193247-d464364483df
 	github.com/berachain/beacon-kit/mod/log v0.0.0-20240705193247-d464364483df
 	github.com/berachain/beacon-kit/mod/node-api v0.0.0-20240806160829-cde2d1347e7e
+	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570
 	github.com/go-playground/validator/v10 v10.22.0
 	github.com/labstack/echo/v4 v4.12.0
 )
 
 require (
 	github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df // indirect
-	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570 // indirect
 	github.com/cockroachdb/errors v1.11.3 // indirect
 	github.com/cockroachdb/logtags v0.0.0-20230118201751-21c54148d20b // indirect
 	github.com/cockroachdb/redact v1.1.5 // indirect
-	github.com/gabriel-vasile/mimetype v1.4.4 // indirect
+	github.com/gabriel-vasile/mimetype v1.4.6 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
 	github.com/go-playground/locales v0.14.1 // indirect
 	github.com/go-playground/universal-translator v0.18.1 // indirect
@@ -36,9 +36,9 @@ require (
 	github.com/rogpeppe/go-internal v1.12.0 // indirect
 	github.com/valyala/bytebufferpool v1.0.0 // indirect
 	github.com/valyala/fasttemplate v1.2.2 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
-	golang.org/x/net v0.28.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
 	golang.org/x/time v0.5.0 // indirect
 )
diff --git a/mod/node-api/engines/go.sum b/mod/node-api/engines/go.sum
index 1585e7722..e373134f1 100644
--- a/mod/node-api/engines/go.sum
+++ b/mod/node-api/engines/go.sum
@@ -17,8 +17,8 @@ github.com/cockroachdb/redact v1.1.5/go.mod h1:BVNblN9mBWFyMyqK1k3AAiSxhvhfK2oOZ
 github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
 github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=
 github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-github.com/gabriel-vasile/mimetype v1.4.4 h1:QjV6pZ7/XZ7ryI2KuyeEDE8wnh7fHP9YnQy+R0LnH8I=
-github.com/gabriel-vasile/mimetype v1.4.4/go.mod h1:JwLei5XPtWdGiMFB5Pjle1oEeoSeEuJfJE+TtfvdB/s=
+github.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=
+github.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=
 github.com/getsentry/sentry-go v0.28.1 h1:zzaSm/vHmGllRM6Tpx1492r0YDzauArdBfkJRtY6P5k=
 github.com/getsentry/sentry-go v0.28.1/go.mod h1:1fQZ+7l7eeJ3wYi82q5Hg8GqAPgefRq+FP/QhafYVgg=
 github.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=
@@ -85,16 +85,16 @@ github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9dec
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -104,12 +104,12 @@ golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
 golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
diff --git a/mod/node-api/go.mod b/mod/node-api/go.mod
index 6ebf06e7e..472bd8a0a 100644
--- a/mod/node-api/go.mod
+++ b/mod/node-api/go.mod
@@ -4,6 +4,7 @@ go 1.23.0
 
 require (
 	github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8
+	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0
 	github.com/berachain/beacon-kit/mod/log v0.0.0-20240807213340-5779c7a563cd
 	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570
@@ -82,7 +83,6 @@ require (
 	github.com/yusufpapurcu/wmi v1.2.4 // indirect
 	golang.org/x/crypto v0.26.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
 	golang.org/x/sync v0.8.0 // indirect
 	golang.org/x/sys v0.24.0 // indirect
 	golang.org/x/text v0.17.0 // indirect
diff --git a/mod/node-api/go.sum b/mod/node-api/go.sum
index fbd7b5a80..94d065441 100644
--- a/mod/node-api/go.sum
+++ b/mod/node-api/go.sum
@@ -12,6 +12,8 @@ github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 h1:
 github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8/go.mod h1:3wR01SglBZ+HvDvhbugz/Mxem22JUThJRwo2Ec8Q0No=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df h1:mnD1LKqDQ0n+OFdDqOuvKaEiUKRJzsO4V0wyyn/gJYg=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df/go.mod h1:bTFB4Rdvm7D/WdwPYkqQ+8T0XOMBv0pzXfp1E46BFX8=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f h1:Vzglhdv60M7LBS3FBuqK0eUX8vYJBJnL/RwYpxUswpo=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f/go.mod h1:cZd8cFZ+ylhh3/NUbrdXO2ri1/7KOaYBjo1B8MgbgMM=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240808194557-e72e74f58197 h1:wVWkiiERY/7kaXvE/VNPPUtYp/l8ky6QSuKM3ThVMXU=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240808194557-e72e74f58197/go.mod h1:LiOiqrJhhLH/GPo0XE5fel3EYyi7X6dwBOyTqZakTeQ=
 github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0 h1:kCSrkb/uVXfMKJPKjf0c7nlJkwn5cNwMxtzRW4zNq2A=
diff --git a/mod/node-api/handlers/proof/backend.go b/mod/node-api/handlers/proof/backend.go
index 376c03920..7aaa90ecb 100644
--- a/mod/node-api/handlers/proof/backend.go
+++ b/mod/node-api/handlers/proof/backend.go
@@ -28,7 +28,7 @@ import (
 type Backend[BeaconBlockHeaderT, BeaconStateT, ValidatorT any] interface {
 	BlockBackend[BeaconBlockHeaderT]
 	StateBackend[BeaconStateT]
-	GetSlotByExecutionNumber(executionNumber math.U64) (math.Slot, error)
+	GetParentSlotByTimestamp(timestamp math.U64) (math.Slot, error)
 }
 
 type BlockBackend[BeaconBlockHeaderT any] interface {
diff --git a/mod/node-api/handlers/proof/block_proposer.go b/mod/node-api/handlers/proof/block_proposer.go
index 234f52109..848d84b02 100644
--- a/mod/node-api/handlers/proof/block_proposer.go
+++ b/mod/node-api/handlers/proof/block_proposer.go
@@ -26,8 +26,9 @@ import (
 	"github.com/berachain/beacon-kit/mod/node-api/handlers/utils"
 )
 
-// GetBlockProposer returns the block proposer pubkey for the given block id
-// along with a merkle proof that can be verified against the beacon block root.
+// GetBlockProposer returns the block proposer pubkey for the given timestamp
+// id along with a merkle proof that can be verified against the beacon block
+// root. It also returns the merkle proof of the proposer index.
 func (h *Handler[
 	BeaconBlockHeaderT, _, _, ContextT, _, _,
 ]) GetBlockProposer(c ContextT) (any, error) {
@@ -37,23 +38,32 @@ func (h *Handler[
 	if err != nil {
 		return nil, err
 	}
-	slot, beaconState, blockHeader, err := h.resolveExecutionID(
-		params.ExecutionID,
+	slot, beaconState, blockHeader, err := h.resolveTimestampID(
+		params.TimestampID,
 	)
 	if err != nil {
 		return nil, err
 	}
 
+	h.Logger().Info("Generating block proposer proofs", "slot", slot)
+
 	// Generate the proof (along with the "correct" beacon block root to
 	// verify against) for the proposer validator pubkey.
-	h.Logger().Info("Generating block proposer proof", "slot", slot)
-	proof, beaconBlockRoot, err := merkle.ProveProposerInBlock(
+	pubkeyProof, beaconBlockRoot, err := merkle.ProveProposerPubkeyInBlock(
 		blockHeader, beaconState,
 	)
 	if err != nil {
 		return nil, err
 	}
 
+	// Generate the proof for the proposer index.
+	proposerIndexProof, _, err := merkle.ProveProposerIndexInBlock(
+		blockHeader,
+	)
+	if err != nil {
+		return nil, err
+	}
+
 	// Get the pubkey of the proposer validator.
 	proposerValidator, err := beaconState.ValidatorByIndex(
 		blockHeader.GetProposerIndex(),
@@ -66,6 +76,7 @@ func (h *Handler[
 		BeaconBlockHeader:    blockHeader,
 		BeaconBlockRoot:      beaconBlockRoot,
 		ValidatorPubkey:      proposerValidator.GetPubkey(),
-		ValidatorPubkeyProof: proof,
+		ValidatorPubkeyProof: pubkeyProof,
+		ProposerIndexProof:   proposerIndexProof,
 	}, nil
 }
diff --git a/mod/node-api/handlers/proof/execution_fee_recipient.go b/mod/node-api/handlers/proof/execution_fee_recipient.go
index 0617207bb..1513d3a04 100644
--- a/mod/node-api/handlers/proof/execution_fee_recipient.go
+++ b/mod/node-api/handlers/proof/execution_fee_recipient.go
@@ -27,7 +27,7 @@ import (
 )
 
 // GetExecutionFeeRecipient returns the fee recipient from the latest execution
-// payload header for the given block id, along with the proof that can be
+// payload header for the given timestamp id, along with the proof that can be
 // verified against the beacon block root.
 func (h *Handler[
 	BeaconBlockHeaderT, _, _, ContextT, _, _,
@@ -38,8 +38,8 @@ func (h *Handler[
 	if err != nil {
 		return nil, err
 	}
-	slot, beaconState, blockHeader, err := h.resolveExecutionID(
-		params.ExecutionID,
+	slot, beaconState, blockHeader, err := h.resolveTimestampID(
+		params.TimestampID,
 	)
 	if err != nil {
 		return nil, err
diff --git a/mod/node-api/handlers/proof/execution_number.go b/mod/node-api/handlers/proof/execution_number.go
index 1fe9e4a8f..4c128de2c 100644
--- a/mod/node-api/handlers/proof/execution_number.go
+++ b/mod/node-api/handlers/proof/execution_number.go
@@ -27,7 +27,7 @@ import (
 )
 
 // GetExecutionNumber returns the block number from the latest execution
-// payload header for the given block id, along with the proof that can be
+// payload header for the given timestamp id, along with the proof that can be
 // verified against the beacon block root.
 func (h *Handler[
 	BeaconBlockHeaderT, _, _, ContextT, _, _,
@@ -38,8 +38,8 @@ func (h *Handler[
 	if err != nil {
 		return nil, err
 	}
-	slot, beaconState, blockHeader, err := h.resolveExecutionID(
-		params.ExecutionID,
+	slot, beaconState, blockHeader, err := h.resolveTimestampID(
+		params.TimestampID,
 	)
 	if err != nil {
 		return nil, err
diff --git a/mod/node-api/handlers/proof/handler.go b/mod/node-api/handlers/proof/handler.go
index c70eba6e5..d96dfc8f0 100644
--- a/mod/node-api/handlers/proof/handler.go
+++ b/mod/node-api/handlers/proof/handler.go
@@ -71,11 +71,11 @@ func NewHandler[
 	return h
 }
 
-// Get the slot from the given input of execution id, beacon state, and beacon
+// Get the slot from the given input of timestamp id, beacon state, and beacon
 // block header for the resolved slot.
 func (h *Handler[
 	BeaconBlockHeaderT, BeaconStateT, _, _, _, _,
-]) resolveExecutionID(executionID string) (
+]) resolveTimestampID(timestampID string) (
 	math.Slot, BeaconStateT, BeaconBlockHeaderT, error,
 ) {
 	var (
@@ -83,7 +83,7 @@ func (h *Handler[
 		blockHeader BeaconBlockHeaderT
 	)
 
-	slot, err := utils.SlotFromExecutionID(executionID, h.backend)
+	slot, err := utils.ParentSlotFromTimestampID(timestampID, h.backend)
 	if err != nil {
 		return 0, beaconState, blockHeader, err
 	}
diff --git a/mod/node-api/handlers/proof/merkle/beacon_state.go b/mod/node-api/handlers/proof/merkle/beacon_state.go
index bef6b6933..13b9cd3c7 100644
--- a/mod/node-api/handlers/proof/merkle/beacon_state.go
+++ b/mod/node-api/handlers/proof/merkle/beacon_state.go
@@ -21,14 +21,16 @@
 package merkle
 
 import (
+	"github.com/berachain/beacon-kit/mod/errors"
 	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/types"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/ssz/merkle"
 )
 
 // ProveBeaconStateInBlock generates a proof for the beacon state in the
 // beacon block. It uses the fastssz library to generate the proof.
 func ProveBeaconStateInBlock(
-	bbh types.BeaconBlockHeader,
+	bbh types.BeaconBlockHeader, verifyProof bool,
 ) ([]common.Root, error) {
 	blockProofTree, err := bbh.GetTree()
 	if err != nil {
@@ -42,7 +44,35 @@ func ProveBeaconStateInBlock(
 
 	proof := make([]common.Root, len(stateInBlockProof.Hashes))
 	for i, hash := range stateInBlockProof.Hashes {
-		proof[i] = common.Root(hash)
+		proof[i] = common.NewRootFromBytes(hash)
 	}
+
+	if verifyProof {
+		if err = verifyBeaconStateInBlock(
+			bbh, proof, common.NewRootFromBytes(stateInBlockProof.Leaf),
+		); err != nil {
+			return nil, err
+		}
+	}
+
 	return proof, nil
 }
+
+// verifyBeaconStateInBlock verifies the beacon state proof in the block.
+//
+// TODO: verifying the proof is not absolutely necessary.
+func verifyBeaconStateInBlock(
+	bbh types.BeaconBlockHeader, proof []common.Root, leaf common.Root,
+) error {
+	beaconRoot := bbh.HashTreeRoot()
+	if beaconRootVerified, err := merkle.VerifyProof(
+		StateGIndexDenebBlock, leaf, proof, beaconRoot,
+	); err != nil {
+		return err
+	} else if !beaconRootVerified {
+		return errors.New(
+			"beacon state proof failed to verify against beacon root",
+		)
+	}
+	return nil
+}
diff --git a/mod/node-api/handlers/proof/merkle/beacon_state_test.go b/mod/node-api/handlers/proof/merkle/beacon_state_test.go
new file mode 100644
index 000000000..159546952
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/beacon_state_test.go
@@ -0,0 +1,76 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package merkle_test
+
+import (
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	"github.com/stretchr/testify/require"
+)
+
+// TestProveBeaconStateInBlock tests the ProveBeaconStateInBlock function and
+// that the generated proof correctly verifies.
+func TestProveBeaconStateInBlock(t *testing.T) {
+	bbh := (&types.BeaconBlockHeader{}).Empty()
+
+	testCases := []struct {
+		name              string
+		slot              math.Slot
+		proposerIndex     math.ValidatorIndex
+		parentBlockRoot   common.Root
+		bodyRoot          common.Root
+		stateRoot         common.Root
+		expectedProofFile string
+	}{
+		{
+			name:              "Empty block with non-empty state root",
+			stateRoot:         common.Root{1, 2, 3, 4, 5, 6, 7, 8, 9},
+			expectedProofFile: "empty_state_proof.json",
+		},
+		{
+			name:              "Non-empty block with empty state root",
+			slot:              4,
+			proposerIndex:     5,
+			parentBlockRoot:   common.Root{1, 2, 3, 4, 5, 6, 7, 8, 9},
+			bodyRoot:          common.Root{9, 8, 7, 6, 5, 4, 3, 2, 1},
+			expectedProofFile: "non_empty_state_proof.json",
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.name, func(t *testing.T) {
+			bbh.SetSlot(tc.slot)
+			bbh.SetProposerIndex(tc.proposerIndex)
+			bbh.SetParentBlockRoot(tc.parentBlockRoot)
+			bbh.SetBodyRoot(tc.bodyRoot)
+			bbh.SetStateRoot(tc.stateRoot)
+
+			proof, err := merkle.ProveBeaconStateInBlock(bbh, true)
+			require.NoError(t, err)
+			expectedProof := ReadProofFromFile(t, tc.expectedProofFile)
+			require.Equal(t, expectedProof, proof)
+		})
+	}
+}
diff --git a/mod/node-api/handlers/proof/merkle/block_proposer_index.go b/mod/node-api/handlers/proof/merkle/block_proposer_index.go
new file mode 100644
index 000000000..19e0a1129
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/block_proposer_index.go
@@ -0,0 +1,82 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package merkle
+
+import (
+	"github.com/berachain/beacon-kit/mod/errors"
+	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/types"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/ssz/merkle"
+)
+
+// ProveProposerIndexInBlock generates a proof for the proposer index in the
+// beacon block. The proof is then verified against the beacon block root as a
+// sanity check. Returns the proof along with the beacon block root. It uses
+// the fastssz library to generate the proof.
+func ProveProposerIndexInBlock[
+	BeaconBlockHeaderT types.BeaconBlockHeader,
+](bbh BeaconBlockHeaderT) ([]common.Root, common.Root, error) {
+	blockProofTree, err := bbh.GetTree()
+	if err != nil {
+		return nil, common.Root{}, err
+	}
+
+	proposerIndexProof, err := blockProofTree.Prove(
+		ProposerIndexGIndexDenebBlock,
+	)
+	if err != nil {
+		return nil, common.Root{}, err
+	}
+
+	proof := make([]common.Root, len(proposerIndexProof.Hashes))
+	for i, hash := range proposerIndexProof.Hashes {
+		proof[i] = common.NewRootFromBytes(hash)
+	}
+
+	beaconRoot, err := verifyProposerIndexInBlock(
+		bbh, proof, common.NewRootFromBytes(proposerIndexProof.Leaf),
+	)
+	if err != nil {
+		return nil, common.Root{}, err
+	}
+
+	return proof, beaconRoot, nil
+}
+
+// verifyProposerIndexInBlock verifies the proposer index proof in the block.
+//
+// TODO: verifying the proof is not absolutely necessary.
+func verifyProposerIndexInBlock(
+	bbh types.BeaconBlockHeader, proof []common.Root, leaf common.Root,
+) (common.Root, error) {
+	beaconRoot := bbh.HashTreeRoot()
+	if beaconRootVerified, err := merkle.VerifyProof(
+		ProposerIndexGIndexDenebBlock, leaf, proof, beaconRoot,
+	); err != nil {
+		return common.Root{}, err
+	} else if !beaconRootVerified {
+		return common.Root{}, errors.New(
+			"proposer index proof failed to verify against beacon root",
+		)
+	}
+
+	return beaconRoot, nil
+}
diff --git a/mod/node-api/handlers/proof/merkle/block_proposer_index_test.go b/mod/node-api/handlers/proof/merkle/block_proposer_index_test.go
new file mode 100644
index 000000000..5b8afcd15
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/block_proposer_index_test.go
@@ -0,0 +1,84 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package merkle_test
+
+import (
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	"github.com/stretchr/testify/require"
+)
+
+// TestBlockProposerIndexProof tests the ProveProposerIndexInBlock function
+// and that the generated proof correctly verifies.
+func TestBlockProposerIndexProof(t *testing.T) {
+	testCases := []struct {
+		name              string
+		slot              math.Slot
+		proposerIndex     math.ValidatorIndex
+		parentBlockRoot   common.Root
+		stateRoot         common.Root
+		bodyRoot          common.Root
+		expectedProofFile string
+	}{
+		{
+			name:              "1 Validator Set",
+			slot:              69,
+			proposerIndex:     0,
+			parentBlockRoot:   common.Root{1, 2, 3},
+			stateRoot:         common.Root{4, 5, 6},
+			bodyRoot:          common.Root{7, 8, 9},
+			expectedProofFile: "one_validator_proposer_index_proof.json",
+		},
+		{
+			name:              "Many Validator Set",
+			slot:              420,
+			proposerIndex:     69,
+			parentBlockRoot:   common.Root{1, 2, 3},
+			stateRoot:         common.Root{4, 5, 6},
+			bodyRoot:          common.Root{7, 8, 9},
+			expectedProofFile: "many_validators_proposer_index_proof.json",
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.name, func(t *testing.T) {
+			bbh := (&types.BeaconBlockHeader{}).New(
+				tc.slot,
+				tc.proposerIndex,
+				tc.parentBlockRoot,
+				tc.stateRoot,
+				tc.bodyRoot,
+			)
+
+			proof, beaconRoot, err := merkle.ProveProposerIndexInBlock(bbh)
+			require.NoError(t, err)
+
+			require.Equal(t, bbh.HashTreeRoot(), beaconRoot)
+
+			expectedProof := ReadProofFromFile(t, tc.expectedProofFile)
+			require.Equal(t, expectedProof, proof)
+		})
+	}
+}
diff --git a/mod/node-api/handlers/proof/merkle/block_proposer.go b/mod/node-api/handlers/proof/merkle/block_proposer_pubkey.go
similarity index 93%
rename from mod/node-api/handlers/proof/merkle/block_proposer.go
rename to mod/node-api/handlers/proof/merkle/block_proposer_pubkey.go
index 3c2828b13..90a641b7d 100644
--- a/mod/node-api/handlers/proof/merkle/block_proposer.go
+++ b/mod/node-api/handlers/proof/merkle/block_proposer_pubkey.go
@@ -28,11 +28,11 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 )
 
-// ProveProposerInBlock generates a proof for the proposer pubkey in the
+// ProveProposerPubkeyInBlock generates a proof for the proposer pubkey in the
 // beacon block. The proof is then verified against the beacon block root as a
 // sanity check. Returns the proof along with the beacon block root. It uses
 // the fastssz library to generate the proof.
-func ProveProposerInBlock[
+func ProveProposerPubkeyInBlock[
 	BeaconBlockHeaderT types.BeaconBlockHeader,
 	BeaconStateMarshallableT types.BeaconStateMarshallable,
 	ExecutionPayloadHeaderT types.ExecutionPayloadHeader,
@@ -53,7 +53,7 @@ func ProveProposerInBlock[
 	}
 
 	// Then get the proof of the beacon state in the beacon block.
-	stateInBlockProof, err := ProveBeaconStateInBlock(bbh)
+	stateInBlockProof, err := ProveBeaconStateInBlock(bbh, false)
 	if err != nil {
 		return nil, common.Root{}, err
 	}
@@ -102,9 +102,9 @@ func ProveProposerPubkeyInState[
 
 	proof := make([]common.Root, len(valPubkeyInStateProof.Hashes))
 	for i, hash := range valPubkeyInStateProof.Hashes {
-		proof[i] = common.Root(hash)
+		proof[i] = common.NewRootFromBytes(hash)
 	}
-	return proof, common.Root(valPubkeyInStateProof.Leaf), nil
+	return proof, common.NewRootFromBytes(valPubkeyInStateProof.Leaf), nil
 }
 
 // verifyProposerInBlock verifies the proposer pubkey in the beacon block,
diff --git a/mod/node-api/handlers/proof/merkle/block_proposer_pubkey_test.go b/mod/node-api/handlers/proof/merkle/block_proposer_pubkey_test.go
new file mode 100644
index 000000000..881398a3f
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/block_proposer_pubkey_test.go
@@ -0,0 +1,97 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package merkle_test
+
+import (
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle"
+	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle/mock"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	"github.com/stretchr/testify/require"
+)
+
+// TestBlockProposerPubkeyProof tests the ProveProposerPubkeyInBlock function
+// and that the generated proof correctly verifies.
+func TestBlockProposerPubkeyProof(t *testing.T) {
+	testCases := []struct {
+		name              string
+		numValidators     int
+		slot              math.Slot
+		proposerIndex     math.ValidatorIndex
+		parentBlockRoot   common.Root
+		bodyRoot          common.Root
+		pubKey            crypto.BLSPubkey
+		expectedProofFile string
+	}{
+		{
+			name:              "1 Validator Set",
+			numValidators:     1,
+			slot:              4,
+			proposerIndex:     0,
+			parentBlockRoot:   common.Root{1, 2, 3},
+			bodyRoot:          common.Root{3, 2, 1},
+			pubKey:            [48]byte{9, 8, 7, 6, 5, 4, 3, 2, 1},
+			expectedProofFile: "one_validator_proposer_pubkey_proof.json",
+		},
+		{
+			name:              "Many Validator Set",
+			numValidators:     100,
+			slot:              5,
+			proposerIndex:     95,
+			parentBlockRoot:   common.Root{1, 2, 3, 4, 5, 6},
+			bodyRoot:          common.Root{3, 2, 1, 9, 8, 7},
+			pubKey:            [48]byte{9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2},
+			expectedProofFile: "many_validators_proposer_pubkey_proof.json",
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.name, func(t *testing.T) {
+			vals := make(types.Validators, tc.numValidators)
+			for i := range vals {
+				vals[i] = &types.Validator{}
+			}
+			vals[tc.proposerIndex] = &types.Validator{Pubkey: tc.pubKey}
+
+			bs, err := mock.NewBeaconState(
+				tc.slot, vals, 0, common.ExecutionAddress{},
+			)
+			require.NoError(t, err)
+
+			bbh := (&types.BeaconBlockHeader{}).New(
+				tc.slot,
+				tc.proposerIndex,
+				tc.parentBlockRoot,
+				bs.HashTreeRoot(),
+				tc.bodyRoot,
+			)
+
+			proof, _, err := merkle.ProveProposerPubkeyInBlock(bbh, bs)
+			require.NoError(t, err)
+			expectedProof := ReadProofFromFile(t, tc.expectedProofFile)
+			require.Equal(t, expectedProof, proof)
+		})
+	}
+}
diff --git a/mod/node-api/handlers/proof/merkle/constants.go b/mod/node-api/handlers/proof/merkle/constants.go
index e2c315f2a..f6edc48a4 100644
--- a/mod/node-api/handlers/proof/merkle/constants.go
+++ b/mod/node-api/handlers/proof/merkle/constants.go
@@ -21,6 +21,10 @@
 package merkle
 
 const (
+	// ProposerIndexGIndexDenebBlock is the generalized index of the proposer
+	// index in the beacon block in the Deneb fork.
+	ProposerIndexGIndexDenebBlock = 9
+
 	// StateGIndexDenebBlock is the generalized index of the beacon state in
 	// the beacon block in the Deneb fork.
 	StateGIndexDenebBlock = 11
diff --git a/mod/node-api/handlers/proof/merkle/constants_test.go b/mod/node-api/handlers/proof/merkle/constants_test.go
new file mode 100644
index 000000000..32630d08f
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/constants_test.go
@@ -0,0 +1,248 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package merkle_test
+
+import (
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle"
+	mlib "github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/ssz/merkle"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/ssz/schema"
+	"github.com/stretchr/testify/require"
+)
+
+var (
+	// beaconStateSchema is the schema for the BeaconState struct defined in
+	// beacon-kit/mod/consensus-types/pkg/types/state.go.
+	beaconStateSchema = schema.DefineContainer(
+		schema.NewField("GenesisValidatorsRoot", schema.B32()),
+		schema.NewField("Slot", schema.U64()),
+		schema.NewField("Fork", schema.DefineContainer(
+			schema.NewField("PreviousVersion", schema.B4()),
+			schema.NewField("CurrentVersion", schema.B4()),
+			schema.NewField("Epoch", schema.U64()),
+		)),
+		schema.NewField("LatestBlockHeader", schema.DefineContainer(
+			schema.NewField("Slot", schema.U64()),
+			schema.NewField("ProposerIndex", schema.U64()),
+			schema.NewField("ParentBlockRoot", schema.B32()),
+			schema.NewField("StateRoot", schema.B32()),
+			schema.NewField("BodyRoot", schema.B32()),
+		)),
+		schema.NewField("BlockRoots", schema.DefineList(schema.B32(), 8192)),
+		schema.NewField("StateRoots", schema.DefineList(schema.B32(), 8192)),
+		schema.NewField("Eth1Data", schema.DefineContainer(
+			schema.NewField("DepositRoot", schema.B32()),
+			schema.NewField("DepositCount", schema.U64()),
+			schema.NewField("BlockHash", schema.B32()),
+		)),
+		schema.NewField("Eth1DepositIndex", schema.U64()),
+		schema.NewField("LatestExecutionPayloadHeader", schema.DefineContainer(
+			schema.NewField("ParentHash", schema.B32()),
+			schema.NewField("FeeRecipient", schema.B20()),
+			schema.NewField("StateRoot", schema.B32()),
+			schema.NewField("ReceiptsRoot", schema.B32()),
+			schema.NewField("LogsBloom", schema.B256()),
+			schema.NewField("Random", schema.U64()),
+			schema.NewField("Number", schema.U64()),
+			schema.NewField("GasLimit", schema.U64()),
+			schema.NewField("GasUsed", schema.U64()),
+			schema.NewField("Timestamp", schema.U64()),
+			schema.NewField("ExtraData", schema.DefineByteList(32)),
+			schema.NewField("BaseFeePerGas", schema.B32()),
+			schema.NewField("BlockHash", schema.B32()),
+			schema.NewField("TransactionsRoot", schema.B32()),
+			schema.NewField("WithdrawalsRoot", schema.B32()),
+			schema.NewField("BlobGasUsed", schema.U64()),
+			schema.NewField("ExcessBlobGas", schema.U64()),
+		)),
+		schema.NewField("Validators", schema.DefineList(schema.DefineContainer(
+			schema.NewField("Pubkey", schema.B48()),
+			schema.NewField("WithdrawalCredentials", schema.B32()),
+			schema.NewField("EffectiveBalance", schema.U64()),
+			schema.NewField("Slashed", schema.Bool()),
+			schema.NewField("ActivationEligibilityEpoch", schema.U64()),
+			schema.NewField("ActivationEpoch", schema.U64()),
+			schema.NewField("ExitEpoch", schema.U64()),
+			schema.NewField("WithdrawableEpoch", schema.U64()),
+		), types.MaxValidators)),
+		schema.NewField(
+			"Balances", schema.DefineList(schema.U64(), types.MaxValidators),
+		),
+		schema.NewField("RandaoMixes", schema.DefineList(schema.B32(), 65536)),
+		schema.NewField("NextWithdrawalIndex", schema.U64()),
+		schema.NewField("NextWithdrawalValidatorIndex", schema.U64()),
+		schema.NewField(
+			"Slashings", schema.DefineList(schema.U64(), types.MaxValidators),
+		),
+		schema.NewField("TotalSlashing", schema.U64()),
+	)
+
+	// beaconHeaderSchema is the schema for the BeaconBlockHeader struct defined
+	// in beacon-kit/mod/consensus-types/pkg/types/header.go, with the SSZ
+	// expansion of StateRoot to use the BeaconState.
+	beaconHeaderSchema = schema.DefineContainer(
+		schema.NewField("Slot", schema.U64()),
+		schema.NewField("ProposerIndex", schema.U64()),
+		schema.NewField("ParentRoot", schema.B32()),
+		schema.NewField("State", beaconStateSchema),
+		schema.NewField("BodyRoot", schema.B32()),
+	)
+)
+
+// TestGIndexProposerIndexDeneb tests the generalized index of the proposer
+// index in the beacon block on the Deneb fork.
+func TestGIndexProposerIndexDeneb(t *testing.T) {
+	// GIndex of the proposer index in the beacon block.
+	_, proposerIndexGIndexDenebBlock, _, err := mlib.ObjectPath[
+		mlib.GeneralizedIndex, [32]byte,
+	]("ProposerIndex").GetGeneralizedIndex(beaconHeaderSchema)
+	require.NoError(t, err)
+	require.Equal(
+		t,
+		merkle.ProposerIndexGIndexDenebBlock,
+		int(proposerIndexGIndexDenebBlock),
+	)
+}
+
+// TestGIndicesValidatorPubkeyDeneb tests the generalized indices used by
+// beacon state proofs for validator pubkeys on the Deneb fork.
+func TestGIndicesValidatorPubkeyDeneb(t *testing.T) {
+	// GIndex of state in the block.
+	_, stateGIndexDenebBlock, _, err := mlib.ObjectPath[
+		mlib.GeneralizedIndex, [32]byte,
+	]("State").GetGeneralizedIndex(beaconHeaderSchema)
+	require.NoError(t, err)
+	require.Equal(t, merkle.StateGIndexDenebBlock, int(stateGIndexDenebBlock))
+
+	// GIndex of the 0 validator's pubkey in the state.
+	_, zeroValidatorPubkeyGIndexDenebState, _, err := mlib.ObjectPath[
+		mlib.GeneralizedIndex, [32]byte,
+	]("Validators/0/Pubkey").GetGeneralizedIndex(beaconStateSchema)
+	require.NoError(t, err)
+	require.Equal(t,
+		merkle.ZeroValidatorPubkeyGIndexDenebState,
+		int(zeroValidatorPubkeyGIndexDenebState),
+	)
+
+	// GIndex of the 0 validator's pubkey in the block.
+	_, zeroValidatorPubkeyGIndexDenebBlock, _, err := mlib.ObjectPath[
+		mlib.GeneralizedIndex, [32]byte,
+	]("State/Validators/0/Pubkey").GetGeneralizedIndex(beaconHeaderSchema)
+	require.NoError(t, err)
+	require.Equal(t,
+		merkle.ZeroValidatorPubkeyGIndexDenebBlock,
+		int(zeroValidatorPubkeyGIndexDenebBlock),
+	)
+
+	// Concatenation is consistent.
+	concatValidatorPubkeyStateToBlock := mlib.GeneralizedIndices{
+		stateGIndexDenebBlock,
+		zeroValidatorPubkeyGIndexDenebState,
+	}.Concat()
+	require.Equal(t,
+		zeroValidatorPubkeyGIndexDenebBlock,
+		concatValidatorPubkeyStateToBlock,
+	)
+
+	// GIndex offset of the next validator's pubkey.
+	_, oneValidatorPubkeyGIndexDenebState, _, err := mlib.ObjectPath[
+		mlib.GeneralizedIndex, [32]byte,
+	]("Validators/1/Pubkey").GetGeneralizedIndex(beaconStateSchema)
+	require.NoError(t, err)
+	require.Equal(t,
+		mlib.GeneralizedIndex(merkle.ValidatorPubkeyGIndexOffset),
+		oneValidatorPubkeyGIndexDenebState-zeroValidatorPubkeyGIndexDenebState,
+	)
+}
+
+// TestGInidicesExecutionDeneb tests the generalized indices used by
+// beacon state proofs from the execution payload header on the Deneb fork.
+func TestGInidicesExecutionDeneb(t *testing.T) {
+	// GIndex of the execution number in the state.
+	_, executionNumberGIndexDenebState, _, err := mlib.ObjectPath[
+		mlib.GeneralizedIndex, [32]byte,
+	]("LatestExecutionPayloadHeader/Number").GetGeneralizedIndex(
+		beaconStateSchema,
+	)
+	require.NoError(t, err)
+	require.Equal(t,
+		merkle.ExecutionNumberGIndexDenebState,
+		int(executionNumberGIndexDenebState),
+	)
+
+	// GIndex of the execution number in the block.
+	_, executionNumberGIndexDenebBlock, _, err := mlib.ObjectPath[
+		mlib.GeneralizedIndex, [32]byte,
+	]("State/LatestExecutionPayloadHeader/Number").GetGeneralizedIndex(
+		beaconHeaderSchema,
+	)
+	require.NoError(t, err)
+	require.Equal(t,
+		merkle.ExecutionNumberGIndexDenebBlock,
+		int(executionNumberGIndexDenebBlock),
+	)
+
+	// Concatenation is consistent.
+	concatExecutionNumberStateToBlock := mlib.GeneralizedIndices{
+		merkle.StateGIndexDenebBlock,
+		executionNumberGIndexDenebState,
+	}.Concat()
+	require.Equal(t,
+		executionNumberGIndexDenebBlock,
+		concatExecutionNumberStateToBlock,
+	)
+
+	// GIndex of the execution fee recipient in the state.
+	_, executionFeeRecipientGIndexDenebState, _, err := mlib.ObjectPath[
+		mlib.GeneralizedIndex, [32]byte,
+	]("LatestExecutionPayloadHeader/FeeRecipient").GetGeneralizedIndex(
+		beaconStateSchema,
+	)
+	require.NoError(t, err)
+	require.Equal(t,
+		merkle.ExecutionFeeRecipientGIndexDenebState,
+		int(executionFeeRecipientGIndexDenebState),
+	)
+
+	// GIndex of the execution fee recipient in the block.
+	_, executionFeeRecipientGIndexDenebBlock, _, err := mlib.ObjectPath[
+		mlib.GeneralizedIndex, [32]byte,
+	]("State/LatestExecutionPayloadHeader/FeeRecipient").GetGeneralizedIndex(
+		beaconHeaderSchema,
+	)
+	require.NoError(t, err)
+	require.Equal(t,
+		merkle.ExecutionFeeRecipientGIndexDenebBlock,
+		int(executionFeeRecipientGIndexDenebBlock),
+	)
+
+	// Concatenation is consistent.
+	concatExecutionFeeRecipientStateToBlock := mlib.GeneralizedIndices{
+		merkle.StateGIndexDenebBlock,
+		executionFeeRecipientGIndexDenebState,
+	}.Concat()
+	require.Equal(t,
+		executionFeeRecipientGIndexDenebBlock,
+		concatExecutionFeeRecipientStateToBlock,
+	)
+}
diff --git a/mod/node-api/handlers/proof/merkle/execution_fee_recipient.go b/mod/node-api/handlers/proof/merkle/execution_fee_recipient.go
index a3e130351..1425fbdef 100644
--- a/mod/node-api/handlers/proof/merkle/execution_fee_recipient.go
+++ b/mod/node-api/handlers/proof/merkle/execution_fee_recipient.go
@@ -51,7 +51,7 @@ func ProveExecutionFeeRecipientInBlock[
 	}
 
 	// Then get the proof of the beacon state in the beacon block.
-	stateInBlockProof, err := ProveBeaconStateInBlock(bbh)
+	stateInBlockProof, err := ProveBeaconStateInBlock(bbh, false)
 	if err != nil {
 		return nil, common.Root{}, err
 	}
@@ -100,9 +100,9 @@ func ProveExecutionFeeRecipientInState[
 
 	proof := make([]common.Root, len(feeRecipientInStateProof.Hashes))
 	for i, hash := range feeRecipientInStateProof.Hashes {
-		proof[i] = common.Root(hash)
+		proof[i] = common.NewRootFromBytes(hash)
 	}
-	return proof, common.Root(feeRecipientInStateProof.Leaf), nil
+	return proof, common.NewRootFromBytes(feeRecipientInStateProof.Leaf), nil
 }
 
 // verifyExecutionFeeRecipientInBlock verifies the execution fee recipient in
diff --git a/mod/node-api/handlers/proof/merkle/execution_fee_recipient_test.go b/mod/node-api/handlers/proof/merkle/execution_fee_recipient_test.go
new file mode 100644
index 000000000..55fcaa004
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/execution_fee_recipient_test.go
@@ -0,0 +1,91 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package merkle_test
+
+import (
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle"
+	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle/mock"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	"github.com/stretchr/testify/require"
+)
+
+// TestExecutionFeeRecipientProof tests the ProveExecutionFeeRecipientInBlock
+// function and that the generated proof correctly verifies.
+func TestExecutionFeeRecipientProof(t *testing.T) {
+	var proof []common.Root
+
+	testCases := []struct {
+		name                  string
+		slot                  math.Slot
+		proposerIndex         math.ValidatorIndex
+		parentBlockRoot       common.Root
+		bodyRoot              common.Root
+		executionFeeRecipient common.ExecutionAddress
+		expectedProofFile     string
+	}{
+		{
+			name:                  "Empty Fee Recipient",
+			slot:                  4,
+			proposerIndex:         0,
+			parentBlockRoot:       common.Root{1, 2, 3},
+			bodyRoot:              common.Root{3, 2, 1},
+			executionFeeRecipient: common.ExecutionAddress{},
+			expectedProofFile:     "empty_fee_recipient_proof.json",
+		},
+		{
+			name:            "Non-empty Fee Recipient",
+			slot:            5,
+			proposerIndex:   95,
+			parentBlockRoot: common.Root{1, 2, 3, 4, 5, 6},
+			bodyRoot:        common.Root{3, 2, 1, 9, 8, 7},
+			executionFeeRecipient: common.NewExecutionAddressFromHex(
+				"0x20f33ce90a13a4b5e7697e3544c3083b8f8a51d4",
+			),
+			expectedProofFile: "non_empty_fee_recipient_proof.json",
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.name, func(t *testing.T) {
+			bs, err := mock.NewBeaconState(
+				tc.slot, nil, 0, tc.executionFeeRecipient,
+			)
+			require.NoError(t, err)
+
+			bbh := (&types.BeaconBlockHeader{}).New(
+				tc.slot,
+				tc.proposerIndex,
+				tc.parentBlockRoot,
+				bs.HashTreeRoot(),
+				tc.bodyRoot,
+			)
+
+			proof, _, err = merkle.ProveExecutionFeeRecipientInBlock(bbh, bs)
+			require.NoError(t, err)
+			expectedProof := ReadProofFromFile(t, tc.expectedProofFile)
+			require.Equal(t, expectedProof, proof)
+		})
+	}
+}
diff --git a/mod/node-api/handlers/proof/merkle/execution_number.go b/mod/node-api/handlers/proof/merkle/execution_number.go
index ffbb0c92c..c98d69d1f 100644
--- a/mod/node-api/handlers/proof/merkle/execution_number.go
+++ b/mod/node-api/handlers/proof/merkle/execution_number.go
@@ -51,7 +51,7 @@ func ProveExecutionNumberInBlock[
 	}
 
 	// Then get the proof of the beacon state in the beacon block.
-	stateInBlockProof, err := ProveBeaconStateInBlock(bbh)
+	stateInBlockProof, err := ProveBeaconStateInBlock(bbh, false)
 	if err != nil {
 		return nil, common.Root{}, err
 	}
@@ -97,9 +97,9 @@ func ProveExecutionNumberInState[
 
 	proof := make([]common.Root, len(numberInStateProof.Hashes))
 	for i, hash := range numberInStateProof.Hashes {
-		proof[i] = common.Root(hash)
+		proof[i] = common.NewRootFromBytes(hash)
 	}
-	return proof, common.Root(numberInStateProof.Leaf), nil
+	return proof, common.NewRootFromBytes(numberInStateProof.Leaf), nil
 }
 
 // verifyExecutionNumberInBlock verifies the execution number in the beacon
diff --git a/mod/node-api/handlers/proof/merkle/execution_number_test.go b/mod/node-api/handlers/proof/merkle/execution_number_test.go
new file mode 100644
index 000000000..41632db33
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/execution_number_test.go
@@ -0,0 +1,90 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package merkle_test
+
+import (
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle"
+	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle/mock"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	"github.com/stretchr/testify/require"
+)
+
+// TestExecutionNumberProof tests the ProveExecutionNumberInBlock
+// function and that the generated proof correctly verifies.
+func TestExecutionNumberProof(t *testing.T) {
+	var proof []common.Root
+
+	testCases := []struct {
+		name              string
+		slot              math.Slot
+		proposerIndex     math.ValidatorIndex
+		parentBlockRoot   common.Root
+		bodyRoot          common.Root
+		executionNumber   math.U64
+		expectedProof     []common.Root
+		expectedProofFile string
+	}{
+		{
+			name:              "Empty Execution Number",
+			slot:              4,
+			proposerIndex:     0,
+			parentBlockRoot:   common.Root{1, 2, 3},
+			bodyRoot:          common.Root{3, 2, 1},
+			executionNumber:   0,
+			expectedProofFile: "empty_execution_number_proof.json",
+		},
+		{
+			name:              "Non-empty Execution Number",
+			slot:              5,
+			proposerIndex:     95,
+			parentBlockRoot:   common.Root{1, 2, 3, 4, 5, 6},
+			bodyRoot:          common.Root{3, 2, 1, 9, 8, 7},
+			executionNumber:   69420,
+			expectedProofFile: "non_empty_execution_number_proof.json",
+		},
+	}
+
+	for _, tc := range testCases {
+		t.Run(tc.name, func(t *testing.T) {
+			bs, err := mock.NewBeaconState(
+				tc.slot, nil, tc.executionNumber, common.ExecutionAddress{},
+			)
+			require.NoError(t, err)
+
+			bbh := (&types.BeaconBlockHeader{}).New(
+				tc.slot,
+				tc.proposerIndex,
+				tc.parentBlockRoot,
+				bs.HashTreeRoot(),
+				tc.bodyRoot,
+			)
+
+			proof, _, err = merkle.ProveExecutionNumberInBlock(bbh, bs)
+			require.NoError(t, err)
+			expectedProof := ReadProofFromFile(t, tc.expectedProofFile)
+			require.Equal(t, expectedProof, proof)
+		})
+	}
+}
diff --git a/mod/primitives/pkg/service/status.go b/mod/node-api/handlers/proof/merkle/merkle_test.go
similarity index 61%
rename from mod/primitives/pkg/service/status.go
rename to mod/node-api/handlers/proof/merkle/merkle_test.go
index 17c444f16..332ae06d8 100644
--- a/mod/primitives/pkg/service/status.go
+++ b/mod/node-api/handlers/proof/merkle/merkle_test.go
@@ -18,30 +18,28 @@
 // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
 // TITLE.
 
-package service
+package merkle_test
 
-// StatusEvent represents a service status event.
-type StatusEvent struct {
-	// name represents the name of the service.
-	name string
-	// healthy indicates whether the service is in a healthy state.
-	healthy bool
-}
+import (
+	"encoding/json"
+	"os"
+	"path/filepath"
+	"testing"
 
-// NewStatusEvent creates a new status service.
-func NewStatusEvent(name string, healthy bool) *StatusEvent {
-	return &StatusEvent{
-		name:    name,
-		healthy: healthy,
-	}
-}
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/stretchr/testify/require"
+)
 
-// Name returns the name of the service.
-func (s *StatusEvent) Name() string {
-	return s.name
-}
+// ReadProofFromFile reads a proof from a JSON file in the testdata directory.
+func ReadProofFromFile(t *testing.T, filename string) []common.Root {
+	t.Helper()
+	path := filepath.Join("testdata", filename)
+	data, err := os.ReadFile(path)
+	require.NoError(t, err)
+
+	var proof []common.Root
+	err = json.Unmarshal(data, &proof)
+	require.NoError(t, err)
 
-// IsHealthy returns the health status of the service.
-func (s *StatusEvent) IsHealthy() bool {
-	return s.healthy
+	return proof
 }
diff --git a/mod/node-api/handlers/proof/merkle/mock/beacon_state.go b/mod/node-api/handlers/proof/merkle/mock/beacon_state.go
new file mode 100644
index 000000000..5d50fcff2
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/mock/beacon_state.go
@@ -0,0 +1,130 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package mock
+
+import (
+	"errors"
+
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	ptypes "github.com/berachain/beacon-kit/mod/node-api/handlers/proof/types"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+)
+
+// Compile time check to ensure BeaconState implements the methods
+// required by the BeaconState for proofs.
+var _ ptypes.BeaconState[
+	*BeaconStateMarshallable,
+	*types.ExecutionPayloadHeader,
+	*types.Validator,
+] = (*BeaconState)(nil)
+
+// BeaconState is a mock implementation of the proof BeaconState interface
+// using the default BeaconState type that is marshallable.
+type (
+	BeaconStateMarshallable = types.BeaconState[
+		*types.BeaconBlockHeader,
+		*types.Eth1Data,
+		*types.ExecutionPayloadHeader,
+		*types.Fork,
+		*types.Validator,
+		types.BeaconBlockHeader,
+		types.Eth1Data,
+		types.ExecutionPayloadHeader,
+		types.Fork,
+		types.Validator,
+	]
+
+	BeaconState struct {
+		*BeaconStateMarshallable
+	}
+)
+
+// NewBeaconState creates a new mock beacon state, with only the given slot,
+// validators, execution number, and execution fee recipient.
+func NewBeaconState(
+	slot math.Slot,
+	vals types.Validators,
+	executionNumber math.U64,
+	executionFeeRecipient common.ExecutionAddress,
+) (*BeaconState, error) {
+	// If no validators are provided, create an empty slice.
+	if len(vals) == 0 {
+		vals = make(types.Validators, 0)
+	}
+
+	// Create an empty execution payload header with the given execution number
+	// and fee recipient.
+	execPayloadHeader := (&types.ExecutionPayloadHeader{}).Empty()
+	execPayloadHeader.Number = executionNumber
+	execPayloadHeader.FeeRecipient = executionFeeRecipient
+
+	var (
+		bsm = &BeaconStateMarshallable{}
+		err error
+	)
+	bsm, err = bsm.New(
+		0,
+		common.Root{},
+		slot,
+		(&types.Fork{}).Empty(),
+		(&types.BeaconBlockHeader{}).Empty(),
+		[]common.Root{},
+		[]common.Root{},
+		(&types.Eth1Data{}).Empty(),
+		0,
+		execPayloadHeader,
+		vals,
+		[]uint64{},
+		[]common.Bytes32{},
+		0,
+		0,
+		[]math.Gwei{},
+		0,
+	)
+	return &BeaconState{BeaconStateMarshallable: bsm}, err
+}
+
+// GetLatestExecutionPayloadHeader implements proof BeaconState.
+func (m *BeaconState) GetLatestExecutionPayloadHeader() (
+	*types.ExecutionPayloadHeader, error,
+) {
+	return m.BeaconStateMarshallable.LatestExecutionPayloadHeader, nil
+}
+
+// GetMarshallable implements proof BeaconState.
+func (m *BeaconState) GetMarshallable() (
+	*BeaconStateMarshallable, error,
+) {
+	return m.BeaconStateMarshallable, nil
+}
+
+// ValidatorByIndex implements proof BeaconState.
+func (m *BeaconState) ValidatorByIndex(
+	index math.ValidatorIndex,
+) (*types.Validator, error) {
+	vals := m.BeaconStateMarshallable.Validators
+	if index >= math.ValidatorIndex(len(vals)) {
+		return nil, errors.New("validator index out of range")
+	}
+
+	return vals[index], nil
+}
diff --git a/mod/node-api/handlers/proof/merkle/testdata/empty_execution_number_proof.json b/mod/node-api/handlers/proof/merkle/testdata/empty_execution_number_proof.json
new file mode 100644
index 000000000..6fa537377
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/testdata/empty_execution_number_proof.json
@@ -0,0 +1,14 @@
+[
+  "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "0xe8e527e84f666163a90ef900e013f56b0a4d020148b2224057b719f351b003a6",
+  "0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71",
+  "0xaa5acb04472b5d189b754cc2b82b4420e5f77aed7059b069bcf5ef0e3ad6d64d",
+  "0x536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c",
+  "0xea569bcb4fbb2ed26d30e997d7337e7e12a43ac115793e9cbe25da401fcbb725",
+  "0x4019708b8a442b0e6fc88b6531e2420811d4833db8e862d75a65501695afed1c",
+  "0x1b8afbf6f0034f939f0cfc6e3b03362631bdce35a43b65cbb8f732fa08373b69",
+  "0xda5a83fdae2974416e891f268f5d29d45f071bb414304bdff46aaaa07a7403cb",
+  "0x0102030000000000000000000000000000000000000000000000000000000000",
+  "0xd6e497b816c27a31acd5d9f3ed670639fef7842fee51f044dfbfb6319c760a5f",
+  "0x7b85fe2a9afab51dcca12b224e10bf25e6cb1cb99ac5d24be8a55fac862b6c90"
+]
diff --git a/mod/node-api/handlers/proof/merkle/testdata/empty_fee_recipient_proof.json b/mod/node-api/handlers/proof/merkle/testdata/empty_fee_recipient_proof.json
new file mode 100644
index 000000000..864c8d9af
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/testdata/empty_fee_recipient_proof.json
@@ -0,0 +1,14 @@
+[
+  "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b",
+  "0xdb2251dcc987017aa2df5016007d6840dfb04c67b6d3535cb43b80ae2f401504",
+  "0xaa5acb04472b5d189b754cc2b82b4420e5f77aed7059b069bcf5ef0e3ad6d64d",
+  "0x536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c",
+  "0xea569bcb4fbb2ed26d30e997d7337e7e12a43ac115793e9cbe25da401fcbb725",
+  "0x4019708b8a442b0e6fc88b6531e2420811d4833db8e862d75a65501695afed1c",
+  "0x1b8afbf6f0034f939f0cfc6e3b03362631bdce35a43b65cbb8f732fa08373b69",
+  "0xda5a83fdae2974416e891f268f5d29d45f071bb414304bdff46aaaa07a7403cb",
+  "0x0102030000000000000000000000000000000000000000000000000000000000",
+  "0xd6e497b816c27a31acd5d9f3ed670639fef7842fee51f044dfbfb6319c760a5f",
+  "0x7b85fe2a9afab51dcca12b224e10bf25e6cb1cb99ac5d24be8a55fac862b6c90"
+]
diff --git a/mod/node-api/handlers/proof/merkle/testdata/empty_state_proof.json b/mod/node-api/handlers/proof/merkle/testdata/empty_state_proof.json
new file mode 100644
index 000000000..51d1b93ae
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/testdata/empty_state_proof.json
@@ -0,0 +1,6 @@
+[
+  "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b",
+  "0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71"
+]
+  
\ No newline at end of file
diff --git a/mod/node-api/handlers/proof/merkle/testdata/many_validators_proposer_index_proof.json b/mod/node-api/handlers/proof/merkle/testdata/many_validators_proposer_index_proof.json
new file mode 100644
index 000000000..f677acbbb
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/testdata/many_validators_proposer_index_proof.json
@@ -0,0 +1,5 @@
+[
+  "0xa401000000000000000000000000000000000000000000000000000000000000",
+  "0x5ca6b806bfaf4c5c16be71ea6ee96e4e05b172144c1e6c2eb5646535896a30ac",
+  "0xfbfd75335009f40216a1ca7e1e9306e76194a2cebd6f7f9e88ea5a471d86b5f9"
+]
diff --git a/mod/node-api/handlers/proof/merkle/testdata/many_validators_proposer_pubkey_proof.json b/mod/node-api/handlers/proof/merkle/testdata/many_validators_proposer_pubkey_proof.json
new file mode 100644
index 000000000..112294a18
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/testdata/many_validators_proposer_pubkey_proof.json
@@ -0,0 +1,53 @@
+[
+  "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b",
+  "0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71",
+  "0xfa324a462bcb0f10c24c9e17c326a4e0ebad204feced523eccaf346c686f06ee",
+  "0x4b71985b48d4d27159fb953494feef9e7eeba75f5acd2d03b1c306a186d0537c",
+  "0x11740281865e8d784f81fc4de65e85e38a6aadd4983586ffeff99d326439a834",
+  "0xb5d7f6be4d62c17c85aad66691b3c8a8ab3efe4305c5c4d09a58c4fce699b191",
+  "0xcba76b0fd6edcfd2c74f6020fa3a249f27f07d0c96237d5826f5c5dddf87d2fc",
+  "0x02460b6ea65b13017a2b5dcd11e5b615b12da48e980ac55b1bc1fbbd7bde8d63",
+  "0x5d91c749461f080b40700a41b1468944bb58fa69ffe0c24af202cefb903b9f6f",
+  "0x87eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c",
+  "0x26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193",
+  "0x506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1",
+  "0xffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92b",
+  "0x6cf04127db05441cd833107a52be852868890e4317e6a02ab47683aa75964220",
+  "0xb7d05f875f140027ef5118a2247bbb84ce8f2f0f1123623085daf7960c329f5f",
+  "0xdf6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85e",
+  "0xb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784",
+  "0xd49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb",
+  "0x8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb",
+  "0x8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab",
+  "0x95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4",
+  "0xf893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17f",
+  "0xcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa",
+  "0x8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9c",
+  "0xfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167",
+  "0xe71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d7",
+  "0x31206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc0",
+  "0x21352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544",
+  "0x619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a46765",
+  "0x7cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4",
+  "0x848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe1",
+  "0x8869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636",
+  "0xb5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c",
+  "0x985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7",
+  "0xc6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff",
+  "0x1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc5",
+  "0x2f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d",
+  "0x328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362c",
+  "0xbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c327",
+  "0x55d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74",
+  "0xf7210d4f8e7e1039790e7bf4efa207555a10a6db1dd4b95da313aaa88b88fe76",
+  "0xad21b516cbc645ffe34ab5de1c8aef8cd4e7f8d2b51e8e1456adc7563cda206f",
+  "0x6400000000000000000000000000000000000000000000000000000000000000",
+  "0x54b4b8b897929a1ede97d29e9551d610229f22c1a59d186d95aed203333b4e5e",
+  "0x4019708b8a442b0e6fc88b6531e2420811d4833db8e862d75a65501695afed1c",
+  "0x1b8afbf6f0034f939f0cfc6e3b03362631bdce35a43b65cbb8f732fa08373b69",
+  "0x70ccdae9a06cda39d93eba92e2692bec147a29ef7e31ad9f4bebb347792d9204",
+  "0x0102030405060000000000000000000000000000000000000000000000000000",
+  "0xe38c573641a369b49f1e77043562c3b6b3932c2cce7fcd4d71d494b4b8d08012",
+  "0xa3df0acb0b3d50f9b7f569ffb440f3a5891a2723a35bd825d6cf271298e616b6"
+]
diff --git a/mod/node-api/handlers/proof/merkle/testdata/non_empty_execution_number_proof.json b/mod/node-api/handlers/proof/merkle/testdata/non_empty_execution_number_proof.json
new file mode 100644
index 000000000..28255a776
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/testdata/non_empty_execution_number_proof.json
@@ -0,0 +1,14 @@
+[
+  "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "0xe8e527e84f666163a90ef900e013f56b0a4d020148b2224057b719f351b003a6",
+  "0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71",
+  "0xaa5acb04472b5d189b754cc2b82b4420e5f77aed7059b069bcf5ef0e3ad6d64d",
+  "0x536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c",
+  "0xea569bcb4fbb2ed26d30e997d7337e7e12a43ac115793e9cbe25da401fcbb725",
+  "0x4019708b8a442b0e6fc88b6531e2420811d4833db8e862d75a65501695afed1c",
+  "0x1b8afbf6f0034f939f0cfc6e3b03362631bdce35a43b65cbb8f732fa08373b69",
+  "0x70ccdae9a06cda39d93eba92e2692bec147a29ef7e31ad9f4bebb347792d9204",
+  "0x0102030405060000000000000000000000000000000000000000000000000000",
+  "0xe38c573641a369b49f1e77043562c3b6b3932c2cce7fcd4d71d494b4b8d08012",
+  "0xa3df0acb0b3d50f9b7f569ffb440f3a5891a2723a35bd825d6cf271298e616b6"
+]
diff --git a/mod/node-api/handlers/proof/merkle/testdata/non_empty_fee_recipient_proof.json b/mod/node-api/handlers/proof/merkle/testdata/non_empty_fee_recipient_proof.json
new file mode 100644
index 000000000..25e3bd4b3
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/testdata/non_empty_fee_recipient_proof.json
@@ -0,0 +1,14 @@
+[
+  "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b",
+  "0xdb2251dcc987017aa2df5016007d6840dfb04c67b6d3535cb43b80ae2f401504",
+  "0xaa5acb04472b5d189b754cc2b82b4420e5f77aed7059b069bcf5ef0e3ad6d64d",
+  "0x536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c",
+  "0xea569bcb4fbb2ed26d30e997d7337e7e12a43ac115793e9cbe25da401fcbb725",
+  "0x4019708b8a442b0e6fc88b6531e2420811d4833db8e862d75a65501695afed1c",
+  "0x1b8afbf6f0034f939f0cfc6e3b03362631bdce35a43b65cbb8f732fa08373b69",
+  "0x70ccdae9a06cda39d93eba92e2692bec147a29ef7e31ad9f4bebb347792d9204",
+  "0x0102030405060000000000000000000000000000000000000000000000000000",
+  "0xe38c573641a369b49f1e77043562c3b6b3932c2cce7fcd4d71d494b4b8d08012",
+  "0xa3df0acb0b3d50f9b7f569ffb440f3a5891a2723a35bd825d6cf271298e616b6"
+]
diff --git a/mod/node-api/handlers/proof/merkle/testdata/non_empty_state_proof.json b/mod/node-api/handlers/proof/merkle/testdata/non_empty_state_proof.json
new file mode 100644
index 000000000..1c1a9eca1
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/testdata/non_empty_state_proof.json
@@ -0,0 +1,6 @@
+[
+  "0x0102030405060708090000000000000000000000000000000000000000000000",
+  "0xbd50456d5ad175ae99a1612a53ca229124b65d3eaabd9ff9c7ab979a385cf6b3",
+  "0x2137a0ff622bd6e30728bc64e7deed6ea418596c772143e232cfea9d88babd58"
+]
+  
\ No newline at end of file
diff --git a/mod/node-api/handlers/proof/merkle/testdata/one_validator_proposer_index_proof.json b/mod/node-api/handlers/proof/merkle/testdata/one_validator_proposer_index_proof.json
new file mode 100644
index 000000000..c3dceb51e
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/testdata/one_validator_proposer_index_proof.json
@@ -0,0 +1,5 @@
+[
+  "0x4500000000000000000000000000000000000000000000000000000000000000",
+  "0x5ca6b806bfaf4c5c16be71ea6ee96e4e05b172144c1e6c2eb5646535896a30ac",
+  "0xfbfd75335009f40216a1ca7e1e9306e76194a2cebd6f7f9e88ea5a471d86b5f9"
+]
diff --git a/mod/node-api/handlers/proof/merkle/testdata/one_validator_proposer_pubkey_proof.json b/mod/node-api/handlers/proof/merkle/testdata/one_validator_proposer_pubkey_proof.json
new file mode 100644
index 000000000..0f3763e5e
--- /dev/null
+++ b/mod/node-api/handlers/proof/merkle/testdata/one_validator_proposer_pubkey_proof.json
@@ -0,0 +1,53 @@
+[
+  "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b",
+  "0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71",
+  "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b",
+  "0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71",
+  "0xc78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c",
+  "0x536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c",
+  "0x9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30",
+  "0xd88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa1",
+  "0x87eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c",
+  "0x26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193",
+  "0x506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1",
+  "0xffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92b",
+  "0x6cf04127db05441cd833107a52be852868890e4317e6a02ab47683aa75964220",
+  "0xb7d05f875f140027ef5118a2247bbb84ce8f2f0f1123623085daf7960c329f5f",
+  "0xdf6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85e",
+  "0xb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784",
+  "0xd49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb",
+  "0x8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb",
+  "0x8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab",
+  "0x95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4",
+  "0xf893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17f",
+  "0xcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa",
+  "0x8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9c",
+  "0xfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167",
+  "0xe71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d7",
+  "0x31206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc0",
+  "0x21352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544",
+  "0x619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a46765",
+  "0x7cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4",
+  "0x848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe1",
+  "0x8869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636",
+  "0xb5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c",
+  "0x985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7",
+  "0xc6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff",
+  "0x1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc5",
+  "0x2f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d",
+  "0x328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362c",
+  "0xbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c327",
+  "0x55d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74",
+  "0xf7210d4f8e7e1039790e7bf4efa207555a10a6db1dd4b95da313aaa88b88fe76",
+  "0xad21b516cbc645ffe34ab5de1c8aef8cd4e7f8d2b51e8e1456adc7563cda206f",
+  "0x0100000000000000000000000000000000000000000000000000000000000000",
+  "0x54b4b8b897929a1ede97d29e9551d610229f22c1a59d186d95aed203333b4e5e",
+  "0x4019708b8a442b0e6fc88b6531e2420811d4833db8e862d75a65501695afed1c",
+  "0x1b8afbf6f0034f939f0cfc6e3b03362631bdce35a43b65cbb8f732fa08373b69",
+  "0xda5a83fdae2974416e891f268f5d29d45f071bb414304bdff46aaaa07a7403cb",
+  "0x0102030000000000000000000000000000000000000000000000000000000000",
+  "0xd6e497b816c27a31acd5d9f3ed670639fef7842fee51f044dfbfb6319c760a5f",
+  "0x7b85fe2a9afab51dcca12b224e10bf25e6cb1cb99ac5d24be8a55fac862b6c90"
+]
diff --git a/mod/node-api/handlers/proof/routes.go b/mod/node-api/handlers/proof/routes.go
index d82927e14..3b8aa838c 100644
--- a/mod/node-api/handlers/proof/routes.go
+++ b/mod/node-api/handlers/proof/routes.go
@@ -34,17 +34,17 @@ func (
 	h.BaseHandler.AddRoutes([]*handlers.Route[ContextT]{
 		{
 			Method:  http.MethodGet,
-			Path:    "bkit/v1/proof/block_proposer/:execution_id",
+			Path:    "bkit/v1/proof/block_proposer/:timestamp_id",
 			Handler: h.GetBlockProposer,
 		},
 		{
 			Method:  http.MethodGet,
-			Path:    "bkit/v1/proof/execution_number/:execution_id",
+			Path:    "bkit/v1/proof/execution_number/:timestamp_id",
 			Handler: h.GetExecutionNumber,
 		},
 		{
 			Method:  http.MethodGet,
-			Path:    "bkit/v1/proof/execution_fee_recipient/:execution_id",
+			Path:    "bkit/v1/proof/execution_fee_recipient/:timestamp_id",
 			Handler: h.GetExecutionFeeRecipient,
 		},
 	})
diff --git a/mod/node-api/handlers/proof/types/request.go b/mod/node-api/handlers/proof/types/request.go
index 9d782025a..649543c54 100644
--- a/mod/node-api/handlers/proof/types/request.go
+++ b/mod/node-api/handlers/proof/types/request.go
@@ -23,19 +23,19 @@ package types
 import "github.com/berachain/beacon-kit/mod/node-api/handlers/types"
 
 // BlockProposerRequest is the request for the
-// `/proof/block_proposer/{execution_id}` endpoint.
+// `/proof/block_proposer/{timestamp_id}` endpoint.
 type BlockProposerRequest struct {
-	types.ExecutionIDRequest
+	types.TimestampIDRequest
 }
 
 // ExecutionNumberRequest is the request for the
-// `/proof/execution_number/{execution_id}` endpoint.
+// `/proof/execution_number/{timestamp_id}` endpoint.
 type ExecutionNumberRequest struct {
-	types.ExecutionIDRequest
+	types.TimestampIDRequest
 }
 
 // ExecutionFeeRecipientRequest is the request for the
-// `/proof/execution_fee_recipient/{execution_id}` endpoint.
+// `/proof/execution_fee_recipient/{timestamp_id}` endpoint.
 type ExecutionFeeRecipientRequest struct {
-	types.ExecutionIDRequest
+	types.TimestampIDRequest
 }
diff --git a/mod/node-api/handlers/proof/types/response.go b/mod/node-api/handlers/proof/types/response.go
index a668823a8..ebe457ec0 100644
--- a/mod/node-api/handlers/proof/types/response.go
+++ b/mod/node-api/handlers/proof/types/response.go
@@ -27,7 +27,7 @@ import (
 )
 
 // BlockProposerResponse is the response for the
-// `/proof/block_proposer/{execution_id}` endpoint.
+// `/proof/block_proposer/{timestamp_id}` endpoint.
 type BlockProposerResponse[BeaconBlockHeaderT any] struct {
 	// BeaconBlockHeader is the block header of which the hash tree root is the
 	// beacon block root to verify against.
@@ -44,10 +44,14 @@ type BlockProposerResponse[BeaconBlockHeaderT any] struct {
 	// Generalized Index of the 0 validator pubkey in the beacon block. In
 	// the Deneb fork, z is 3254554418216960.
 	ValidatorPubkeyProof []common.Root `json:"validator_pubkey_proof"`
+
+	// ProposerIndexProof can be verified against the beacon block root. Use
+	// a Generalized Index of 9 in the Deneb fork.
+	ProposerIndexProof []common.Root `json:"proposer_index_proof"`
 }
 
 // ExecutionNumberResponse is the response for the
-// `/proof/execution_number/{execution_id}` endpoint.
+// `/proof/execution_number/{timestamp_id}` endpoint.
 type ExecutionNumberResponse[BeaconBlockHeaderT any] struct {
 	// BeaconBlockHeader is the block header of which the hash tree root is the
 	// beacon block root to verify against.
@@ -65,7 +69,7 @@ type ExecutionNumberResponse[BeaconBlockHeaderT any] struct {
 }
 
 // ExecutionFeeRecipientResponse is the response for the
-// `/proof/execution_fee_recipient/{execution_id}` endpoint.
+// `/proof/execution_fee_recipient/{timestamp_id}` endpoint.
 type ExecutionFeeRecipientResponse[BeaconBlockHeaderT any] struct {
 	// BeaconBlockHeader is the block header of which the hash tree root is the
 	// beacon block root to verify against.
diff --git a/mod/node-api/handlers/types/request.go b/mod/node-api/handlers/types/request.go
index 81df7c22a..7d2c81aa7 100644
--- a/mod/node-api/handlers/types/request.go
+++ b/mod/node-api/handlers/types/request.go
@@ -28,6 +28,6 @@ type BlockIDRequest struct {
 	BlockID string `param:"block_id" validate:"required,block_id"`
 }
 
-type ExecutionIDRequest struct {
-	ExecutionID string `param:"execution_id" validate:"required,execution_id"`
+type TimestampIDRequest struct {
+	TimestampID string `param:"timestamp_id" validate:"required,timestamp_id"`
 }
diff --git a/mod/node-api/handlers/utils/constants.go b/mod/node-api/handlers/utils/constants.go
index 6f9025223..63b5a91e6 100644
--- a/mod/node-api/handlers/utils/constants.go
+++ b/mod/node-api/handlers/utils/constants.go
@@ -27,7 +27,7 @@ const (
 	StateIDFinalized  = "finalized"
 	StateIDJustified  = "justified"
 	StateIDHead       = "head"
-	ExecutionIDPrefix = "n"
+	TimestampIDPrefix = "t"
 )
 
 const (
diff --git a/mod/node-api/handlers/utils/id.go b/mod/node-api/handlers/utils/id.go
index eced1532f..a9ed20691 100644
--- a/mod/node-api/handlers/utils/id.go
+++ b/mod/node-api/handlers/utils/id.go
@@ -24,6 +24,7 @@ import (
 	"strconv"
 	"strings"
 
+	"github.com/berachain/beacon-kit/mod/errors"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 )
@@ -70,36 +71,39 @@ func SlotFromBlockID[StorageBackendT interface {
 	return storage.GetSlotByBlockRoot(root)
 }
 
-// SlotFromExecutionID returns a slot from the execution number ID.
+// ParentSlotFromTimestampID returns the parent slot corresponding to the
+// timestamp ID.
 //
-// NOTE: `executionID` shares the same semantics as `stateID`, with the
-// modification of being able to query by beacon block <executionNumber>
-// instead of <stateRoot>.
+// NOTE: `timestampID` shares the same semantics as `stateID`, with the
+// modification of being able to query by next block's <timestamp> instead of
+// the current block's <stateRoot>.
 //
-// The <executionNumber> must be prefixed by the 'n', followed by the execution
-// number in decimal notation. For example 'n1722463215' corresponds to
-// the slot with execution number 1722463215. Providing just the string
-// '1722463215' (without the prefix 'n') will query for the beacon block with
-// slot 1722463215.
-func SlotFromExecutionID[StorageBackendT interface {
-	GetSlotByExecutionNumber(executionNumber math.U64) (math.Slot, error)
-}](executionID string, storage StorageBackendT) (math.Slot, error) {
-	if !IsExecutionNumberPrefix(executionID) {
-		return slotFromStateID(executionID)
+// The <timestamp> must be prefixed by the 't', followed by the timestamp
+// in decimal UNIX notation. For example 't1728681738' corresponds to the slot
+// which has the next block with a timestamp of 1728681738. Providing just the
+// string '1728681738' (without the prefix 't') will query for the beacon block
+// for slot 1728681738.
+func ParentSlotFromTimestampID[StorageBackendT interface {
+	GetParentSlotByTimestamp(timestamp math.U64) (math.Slot, error)
+}](timestampID string, storage StorageBackendT) (math.Slot, error) {
+	if !IsTimestampIDPrefix(timestampID) {
+		return slotFromStateID(timestampID)
 	}
 
-	// Parse the execution number from the executionID.
-	executionNumber, err := U64FromString(executionID[1:])
+	// Parse the timestamp from the timestampID.
+	timestamp, err := U64FromString(timestampID[1:])
 	if err != nil {
-		return 0, err
+		return 0, errors.Wrapf(
+			err, "failed to parse timestamp from timestampID: %s", timestampID,
+		)
 	}
-	return storage.GetSlotByExecutionNumber(executionNumber)
+	return storage.GetParentSlotByTimestamp(timestamp)
 }
 
-// IsExecutionNumberPrefix checks if the given executionID is prefixed
-// with the execution number prefix.
-func IsExecutionNumberPrefix(executionID string) bool {
-	return strings.HasPrefix(executionID, ExecutionIDPrefix)
+// IsTimestampIDPrefix checks if the given timestampID is prefixed with the
+// correct prefix 't'.
+func IsTimestampIDPrefix(timestampID string) bool {
+	return strings.HasPrefix(timestampID, TimestampIDPrefix)
 }
 
 // U64FromString returns a math.U64 from the given string. Errors if the given
diff --git a/mod/node-api/server/config.go b/mod/node-api/server/config.go
index 61c9c6210..91864780c 100644
--- a/mod/node-api/server/config.go
+++ b/mod/node-api/server/config.go
@@ -21,7 +21,7 @@
 package server
 
 const (
-	defaultAddress = "0.0.0.0:3500"
+	defaultAddress = "127.0.0.1:3500"
 )
 
 // Config is the configuration for the node API server.
diff --git a/mod/node-core/go.mod b/mod/node-core/go.mod
index f043f6336..ca567e548 100644
--- a/mod/node-core/go.mod
+++ b/mod/node-core/go.mod
@@ -22,18 +22,18 @@ require (
 	cosmossdk.io/depinject v1.0.0
 	cosmossdk.io/store/v2 v2.0.0-20240821144902-e88c138760a3
 	github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e
-	github.com/berachain/beacon-kit/mod/cli v0.0.0-20240822173558-4e2a8018ae21
-	github.com/berachain/beacon-kit/mod/config v0.0.0-20240705193247-d464364483df
-	github.com/berachain/beacon-kit/mod/consensus v0.0.0-20240821053614-036c5d2945f0
-	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685
+	github.com/berachain/beacon-kit/mod/cli v0.0.0-20241107170417-7905e3d59a1d
+	github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad
+	github.com/berachain/beacon-kit/mod/consensus v0.0.0-20241107170417-7905e3d59a1d
+	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f
 	github.com/berachain/beacon-kit/mod/da v0.0.0-20240820191615-398849c34954
 	github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0
 	github.com/berachain/beacon-kit/mod/execution v0.0.0-20240820191615-398849c34954
 	github.com/berachain/beacon-kit/mod/log v0.0.0-20240821000339-4d4242ba4a50
-	github.com/berachain/beacon-kit/mod/node-api v0.0.0-20240806160829-cde2d1347e7e
+	github.com/berachain/beacon-kit/mod/node-api v0.0.0-20241107170417-7905e3d59a1d
 	github.com/berachain/beacon-kit/mod/node-api/engines v0.0.0-20240806160829-cde2d1347e7e
-	github.com/berachain/beacon-kit/mod/observability v0.0.0-00010101000000-000000000000
+	github.com/berachain/beacon-kit/mod/observability v0.0.0-unpublished
 	github.com/berachain/beacon-kit/mod/payload v0.0.0-20240705193247-d464364483df
 	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570
 	github.com/berachain/beacon-kit/mod/state-transition v0.0.0-20240717225334-64ec6650da31
@@ -58,7 +58,7 @@ require (
 	github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e // indirect
 	github.com/cockroachdb/fifo v0.0.0-20240616162244-4768e80dfb9a // indirect
 	github.com/cosmos/cosmos-proto v1.0.0-beta.5 // indirect
-	github.com/gabriel-vasile/mimetype v1.4.4 // indirect
+	github.com/gabriel-vasile/mimetype v1.4.6 // indirect
 	github.com/go-playground/locales v0.14.1 // indirect
 	github.com/go-playground/universal-translator v0.18.1 // indirect
 	github.com/go-playground/validator/v10 v10.22.0 // indirect
@@ -78,7 +78,7 @@ require (
 	github.com/valyala/bytebufferpool v1.0.0 // indirect
 	github.com/valyala/fasttemplate v1.2.2 // indirect
 	golang.org/x/time v0.5.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 )
 
 require (
@@ -132,7 +132,7 @@ require (
 	github.com/ethereum/c-kzg-4844 v1.0.3 // indirect
 	github.com/ethereum/go-ethereum v1.14.7 // indirect
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81
 	github.com/fsnotify/fsnotify v1.7.0 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
 	github.com/go-faster/xor v1.0.0 // indirect
@@ -183,7 +183,7 @@ require (
 	github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a // indirect
 	github.com/olekukonko/tablewriter v0.0.5 // indirect
 	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
-	github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
 	github.com/prometheus/client_golang v1.20.1 // indirect
@@ -198,7 +198,7 @@ require (
 	github.com/rs/zerolog v1.33.0 // indirect
 	github.com/sagikazarmark/locafero v0.6.0 // indirect
 	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
-	github.com/sasha-s/go-deadlock v0.3.1 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
 	github.com/shirou/gopsutil v3.21.11+incompatible // indirect
 	github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8 // indirect
 	github.com/spf13/cobra v1.8.1 // indirect
@@ -218,15 +218,15 @@ require (
 	gitlab.com/yawning/secp256k1-voi v0.0.0-20230925100816-f2616030848b // indirect
 	gitlab.com/yawning/tuplehash v0.0.0-20230713102510-df83abbf9a02 // indirect
 	go.opencensus.io v0.24.0 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
 	golang.org/x/sync v0.8.0
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/term v0.23.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/term v0.25.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
 	google.golang.org/grpc v1.65.0 // indirect
 	gopkg.in/ini.v1 v1.67.0 // indirect
diff --git a/mod/node-core/go.sum b/mod/node-core/go.sum
index f6efa344d..ab3c77072 100644
--- a/mod/node-core/go.sum
+++ b/mod/node-core/go.sum
@@ -79,8 +79,8 @@ github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e h1
 github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e/go.mod h1:hyB6jdTwCalJ6IMwCtYOXjXrqIg3T1QruIzs4NPrNkw=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df h1:mnD1LKqDQ0n+OFdDqOuvKaEiUKRJzsO4V0wyyn/gJYg=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df/go.mod h1:bTFB4Rdvm7D/WdwPYkqQ+8T0XOMBv0pzXfp1E46BFX8=
-github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685 h1:pTvESOpJ0a6oCV81+pec+zoTBmojZ8C1+7fd4HtKpbI=
-github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240821182712-08bbb9c7d685/go.mod h1:jduqdSJEtO5eL43l/MpfnIK81o81m10wzt6Gb++Qi9M=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f h1:Vzglhdv60M7LBS3FBuqK0eUX8vYJBJnL/RwYpxUswpo=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f/go.mod h1:cZd8cFZ+ylhh3/NUbrdXO2ri1/7KOaYBjo1B8MgbgMM=
 github.com/berachain/beacon-kit/mod/da v0.0.0-20240820191615-398849c34954 h1:uFAdG6vtoOFxvz0pjkl5D0XGc4PcR0Ukf3M7gU3B92o=
 github.com/berachain/beacon-kit/mod/da v0.0.0-20240820191615-398849c34954/go.mod h1:n6pq+wYP5+jBZbxsVwL0Y9pspcXhNYcA3gHOaJ4rxeA=
 github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720 h1:rVltwwt4JAhpvqeRDZ8J07e9XM+jzfDCJEghPA4r5lg=
@@ -227,8 +227,8 @@ github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
 github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
 github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
 github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fjl/memsize v0.0.2 h1:27txuSD9or+NZlnOWdKUxeBzTAUkWCVh+4Gf2dWFOzA=
 github.com/fjl/memsize v0.0.2/go.mod h1:VvhXpOYNQvB+uIk2RvXzuaQtkQJzzIx6lSBe1xv7hi0=
 github.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=
@@ -240,8 +240,8 @@ github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
 github.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=
 github.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=
-github.com/gabriel-vasile/mimetype v1.4.4 h1:QjV6pZ7/XZ7ryI2KuyeEDE8wnh7fHP9YnQy+R0LnH8I=
-github.com/gabriel-vasile/mimetype v1.4.4/go.mod h1:JwLei5XPtWdGiMFB5Pjle1oEeoSeEuJfJE+TtfvdB/s=
+github.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=
+github.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=
 github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08 h1:f6D9Hr8xV8uYKlyuj8XIruxlh9WjVjdh1gIicAS7ays=
 github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08/go.mod h1:x7DCsMOv1taUwEWCzT4cmDeAkigA5/QCwUodaVOe8Ww=
 github.com/getsentry/sentry-go v0.28.1 h1:zzaSm/vHmGllRM6Tpx1492r0YDzauArdBfkJRtY6P5k=
@@ -290,8 +290,8 @@ github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
 github.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=
 github.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=
-github.com/golang-jwt/jwt/v4 v4.5.0 h1:7cYmW1XlMY7h7ii7UhUyChSgS5wUJEnm9uZVTGqOWzg=
-github.com/golang-jwt/jwt/v4 v4.5.0/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
+github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
+github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
 github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
 github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
@@ -508,9 +508,8 @@ github.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0Mw
 github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
 github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
 github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
-github.com/petermattis/goid v0.0.0-20180202154549-b0b1615b78e5/go.mod h1:jvVRKCrJTQWu0XVbaOlby/2lO20uSCHEMzzplHXte1o=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 h1:CtBLeckhC0zAXgp5V8uR30CNYH0JgCJoxCg5+6i2zQk=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
 github.com/phuslu/log v1.0.110 h1:9WQnpL1/CBi3IwZaVadYnI/i0bgobTvit2ayXIgSg4c=
 github.com/phuslu/log v1.0.110/go.mod h1:F8osGJADo5qLK/0F88djWwdyoZZ9xDJQL1HYRHFEkS0=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
@@ -567,8 +566,8 @@ github.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3
 github.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=
 github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
 github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
-github.com/sasha-s/go-deadlock v0.3.1 h1:sqv7fDNShgjcaxkO0JNcOAlr8B9+cV5Ey/OB71efZx0=
-github.com/sasha-s/go-deadlock v0.3.1/go.mod h1:F73l+cr82YSh10GxyRI6qZiCgK64VaZjwesgfQ1/iLM=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=
 github.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
 github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
@@ -653,8 +652,8 @@ golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACk
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200728195943-123391ffb6de/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
@@ -681,8 +680,8 @@ golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -724,18 +723,18 @@ golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/sys v0.21.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.23.0 h1:F6D4vR+EHoL9/sWAWgAR1H2DcHr4PareCbAaCo1RpuU=
-golang.org/x/term v0.23.0/go.mod h1:DgV24QBUrK6jhZXl+20l6UWznPlwAHm1Q1mGHtydmSk=
+golang.org/x/term v0.25.0 h1:WtHI/ltw4NvSUig5KARz9h521QvRC8RmF/cuYqifU24=
+golang.org/x/term v0.25.0/go.mod h1:RPyXicDX+6vLxogjjRxjgD2TKtmAO6NZBsBRfrOLu7M=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
 golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -759,10 +758,10 @@ google.golang.org/genproto v0.0.0-20180831171423-11092d34479b/go.mod h1:JiN7NxoA
 google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
 google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 h1:CUiCqkPw1nNrNQzCCG4WA65m0nAmQiwXHpub3dNyruU=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4/go.mod h1:EvuUDCulqGgV80RvP1BHuom+smhX4qtlhnNatHuroGQ=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d h1:PksQg4dV6Sem3/HkBX+Ltq8T0ke0PKIRBNBatoDTVls=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d/go.mod h1:s7iA721uChleev562UJO2OYB0PPT9CMFjV+Ce7VJH5M=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 h1:0+ozOGcrp+Y8Aq8TLNN2Aliibms5LEzsq99ZZmAGYm0=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094/go.mod h1:fJ/e3If/Q67Mj99hin0hMhiNyCRmt6BQ2aWIJshUSJw=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d h1:JU0iKnSg02Gmb5ZdV8nYsKEKsP6o/FGVWTrw4i1DA9A=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
@@ -784,8 +783,8 @@ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpAD
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
diff --git a/mod/node-core/pkg/builder/baseapp_options.go b/mod/node-core/pkg/builder/baseapp_options.go
index c01ac3b40..a7ddcd2ba 100644
--- a/mod/node-core/pkg/builder/baseapp_options.go
+++ b/mod/node-core/pkg/builder/baseapp_options.go
@@ -21,6 +21,7 @@
 package builder
 
 import (
+	"errors"
 	"fmt"
 	"os"
 	"path/filepath"
@@ -58,28 +59,13 @@ func DefaultServiceOptions[
 		panic(err)
 	}
 
-	homeDir := cast.ToString(appOpts.Get(flags.FlagHome))
+	// get chainID, possibly falling back to genesis if flag is not set
 	chainID := cast.ToString(appOpts.Get(flags.FlagChainID))
-	var reader *os.File
 	if chainID == "" {
-		// fallback to genesis chain-id
-		//#nosec:G304 // bet.
-		reader, err = os.Open(filepath.Join(homeDir, "config", "genesis.json"))
+		chainID, err = loadChainIDFromGenesis(appOpts)
 		if err != nil {
 			panic(err)
 		}
-		//#nosec:307 // bet.
-		defer reader.Close()
-
-		chainID, err = genutiltypes.ParseChainIDFromGenesis(reader)
-		if err != nil {
-			panic(
-				fmt.Errorf(
-					"failed to parse chain-id from genesis file: %w",
-					err,
-				),
-			)
-		}
 	}
 
 	return []func(*cometbft.Service[LoggerT]){
@@ -98,3 +84,28 @@ func DefaultServiceOptions[
 		cometbft.SetChainID[LoggerT](chainID),
 	}
 }
+
+func loadChainIDFromGenesis(appOpts config.AppOptions) (string, error) {
+	var (
+		homeDir = cast.ToString(appOpts.Get(flags.FlagHome))
+		fp      = filepath.Join(homeDir, "config", "genesis.json")
+	)
+
+	f, err := os.Open(filepath.Clean(fp))
+	if err != nil {
+		return "", err
+	}
+
+	chainID, err := genutiltypes.ParseChainIDFromGenesis(f)
+	if err != nil {
+		return "",
+			errors.Join(
+				f.Close(),
+				fmt.Errorf(
+					"failed to parse chain-id from genesis file: %w",
+					err,
+				),
+			)
+	}
+	return chainID, f.Close()
+}
diff --git a/mod/node-core/pkg/components/blobs.go b/mod/node-core/pkg/components/blobs.go
index d7fb582c6..7fc97405f 100644
--- a/mod/node-core/pkg/components/blobs.go
+++ b/mod/node-core/pkg/components/blobs.go
@@ -54,40 +54,18 @@ func ProvideBlobProofVerifier(
 	)
 }
 
-// BlobVerifierInput is the input for the BlobVerifier.
-type BlobVerifierInput struct {
-	depinject.In
-	BlobProofVerifier kzg.BlobProofVerifier
-	TelemetrySink     *metrics.TelemetrySink
-}
-
-// ProvideBlobVerifier is a function that provides the BlobVerifier to the
-// depinject framework.
-func ProvideBlobVerifier[
-	BeaconBlockHeaderT BeaconBlockHeader[BeaconBlockHeaderT],
-	BlobSidecarT BlobSidecar[BeaconBlockHeaderT],
-	BlobSidecarsT BlobSidecars[BlobSidecarsT, BlobSidecarT],
-](in BlobVerifierInput) *dablob.Verifier[
-	BeaconBlockHeaderT, BlobSidecarT, BlobSidecarsT,
-] {
-	return dablob.NewVerifier[
-		BeaconBlockHeaderT,
-		BlobSidecarT,
-		BlobSidecarsT,
-	](in.BlobProofVerifier, in.TelemetrySink)
-}
-
 // BlobProcessorIn is the input for the BlobProcessor.
 type BlobProcessorIn[
 	BlobSidecarsT any,
+	BeaconBlockHeaderT BeaconBlockHeader[BeaconBlockHeaderT],
 	LoggerT any,
 ] struct {
 	depinject.In
 
-	BlobVerifier  BlobVerifier[BlobSidecarsT]
-	ChainSpec     common.ChainSpec
-	Logger        LoggerT
-	TelemetrySink *metrics.TelemetrySink
+	BlobProofVerifier kzg.BlobProofVerifier
+	ChainSpec         common.ChainSpec
+	Logger            LoggerT
+	TelemetrySink     *metrics.TelemetrySink
 }
 
 // ProvideBlobProcessor is a function that provides the BlobProcessor to the
@@ -96,25 +74,27 @@ func ProvideBlobProcessor[
 	AvailabilityStoreT AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT],
 	BeaconBlockBodyT any,
 	BeaconBlockHeaderT BeaconBlockHeader[BeaconBlockHeaderT],
+	ConsensusSidecarsT ConsensusSidecars[BlobSidecarsT, BeaconBlockHeaderT],
 	BlobSidecarT BlobSidecar[BeaconBlockHeaderT],
 	BlobSidecarsT BlobSidecars[BlobSidecarsT, BlobSidecarT],
 	LoggerT log.AdvancedLogger[LoggerT],
 ](
-	in BlobProcessorIn[BlobSidecarsT, LoggerT],
+	in BlobProcessorIn[BlobSidecarsT, BeaconBlockHeaderT, LoggerT],
 ) *dablob.Processor[
 	AvailabilityStoreT, BeaconBlockBodyT, BeaconBlockHeaderT,
-	BlobSidecarT, BlobSidecarsT,
+	ConsensusSidecarsT, BlobSidecarT, BlobSidecarsT,
 ] {
 	return dablob.NewProcessor[
 		AvailabilityStoreT,
 		BeaconBlockBodyT,
 		BeaconBlockHeaderT,
+		ConsensusSidecarsT,
 		BlobSidecarT,
 		BlobSidecarsT,
 	](
 		in.Logger.With("service", "blob-processor"),
 		in.ChainSpec,
-		in.BlobVerifier,
+		in.BlobProofVerifier,
 		types.BlockBodyKZGOffset,
 		in.TelemetrySink,
 	)
@@ -123,7 +103,7 @@ func ProvideBlobProcessor[
 // DAServiceIn is the input for the BlobService.
 type DAServiceIn[
 	AvailabilityStoreT any,
-	BeaconBlockBodyT any,
+	ConsensusSidecarsT any,
 	BlobSidecarsT any,
 	LoggerT any,
 ] struct {
@@ -131,7 +111,7 @@ type DAServiceIn[
 
 	AvailabilityStore AvailabilityStoreT
 	BlobProcessor     BlobProcessor[
-		AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT,
+		AvailabilityStoreT, ConsensusSidecarsT, BlobSidecarsT,
 	]
 	Dispatcher Dispatcher
 	Logger     LoggerT
@@ -142,17 +122,24 @@ type DAServiceIn[
 func ProvideDAService[
 	AvailabilityStoreT AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT],
 	BeaconBlockBodyT any,
+	BeaconBlockHeaderT any,
+	ConsensusSidecarsT ConsensusSidecars[BlobSidecarsT, BeaconBlockHeaderT],
 	BlobSidecarT any,
 	BlobSidecarsT BlobSidecars[BlobSidecarsT, BlobSidecarT],
 	LoggerT log.AdvancedLogger[LoggerT],
 ](
 	in DAServiceIn[
-		AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, LoggerT,
+		AvailabilityStoreT, ConsensusSidecarsT, BlobSidecarsT, LoggerT,
 	],
-) *da.Service[AvailabilityStoreT, BlobSidecarsT] {
+) *da.Service[
+	AvailabilityStoreT,
+	ConsensusSidecarsT, BlobSidecarsT, BeaconBlockHeaderT,
+] {
 	return da.NewService[
 		AvailabilityStoreT,
+		ConsensusSidecarsT,
 		BlobSidecarsT,
+		BeaconBlockHeaderT,
 	](
 		in.AvailabilityStore,
 		in.BlobProcessor,
diff --git a/mod/node-core/pkg/components/chain_service.go b/mod/node-core/pkg/components/chain_service.go
index 50ba9c525..ca7e48887 100644
--- a/mod/node-core/pkg/components/chain_service.go
+++ b/mod/node-core/pkg/components/chain_service.go
@@ -76,6 +76,7 @@ type ChainServiceInput[
 // ProvideChainService is a depinject provider for the blockchain service.
 func ProvideChainService[
 	AvailabilityStoreT AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT],
+	ConsensusBlockT ConsensusBlock[BeaconBlockT],
 	BeaconBlockT BeaconBlock[BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT],
 	BeaconBlockBodyT BeaconBlockBody[
 		BeaconBlockBodyT, *AttestationData, DepositT,
@@ -111,13 +112,15 @@ func ProvideChainService[
 		WithdrawalT, WithdrawalsT,
 	],
 ) *blockchain.Service[
-	AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT,
+	AvailabilityStoreT,
+	ConsensusBlockT, BeaconBlockT, BeaconBlockBodyT,
 	BeaconBlockHeaderT, BeaconStateT, DepositT, ExecutionPayloadT,
 	ExecutionPayloadHeaderT, GenesisT,
 	*engineprimitives.PayloadAttributes[WithdrawalT],
 ] {
 	return blockchain.NewService[
 		AvailabilityStoreT,
+		ConsensusBlockT,
 		BeaconBlockT,
 		BeaconBlockBodyT,
 		BeaconBlockHeaderT,
diff --git a/mod/node-core/pkg/components/chain_spec.go b/mod/node-core/pkg/components/chain_spec.go
index bec3ad9d6..c70bb3b9f 100644
--- a/mod/node-core/pkg/components/chain_spec.go
+++ b/mod/node-core/pkg/components/chain_spec.go
@@ -31,6 +31,7 @@ const (
 	ChainSpecTypeEnvVar = "CHAIN_SPEC"
 	DevnetChainSpecType = "devnet"
 	BetnetChainSpecType = "betnet"
+	BoonetChainSpecType = "boonet"
 )
 
 // ProvideChainSpec provides the chain spec based on the environment variable.
@@ -44,6 +45,8 @@ func ProvideChainSpec() common.ChainSpec {
 		chainSpec = spec.DevnetChainSpec()
 	case BetnetChainSpecType:
 		chainSpec = spec.BetnetChainSpec()
+	case BoonetChainSpecType:
+		chainSpec = spec.BoonetChainSpec()
 	default:
 		chainSpec = spec.TestnetChainSpec()
 	}
diff --git a/mod/node-core/pkg/components/cometbft_service.go b/mod/node-core/pkg/components/cometbft_service.go
index edc91f8a9..735ec1fdb 100644
--- a/mod/node-core/pkg/components/cometbft_service.go
+++ b/mod/node-core/pkg/components/cometbft_service.go
@@ -36,7 +36,7 @@ func ProvideCometBFTService[
 	LoggerT log.AdvancedLogger[LoggerT],
 ](
 	logger LoggerT,
-	storeKey **storetypes.KVStoreKey,
+	storeKey *storetypes.KVStoreKey,
 	abciMiddleware cometbft.MiddlewareI,
 	db dbm.DB,
 	cmtCfg *cmtcfg.Config,
@@ -44,11 +44,10 @@ func ProvideCometBFTService[
 	chainSpec common.ChainSpec,
 ) *cometbft.Service[LoggerT] {
 	return cometbft.NewService(
-		*storeKey,
+		storeKey,
 		logger,
 		db,
 		abciMiddleware,
-		true,
 		cmtCfg,
 		chainSpec,
 		builder.DefaultServiceOptions[LoggerT](appOpts)...,
diff --git a/mod/node-core/pkg/components/depinject.go b/mod/node-core/pkg/components/depinject.go
index c137d2d96..dffb76b19 100644
--- a/mod/node-core/pkg/components/depinject.go
+++ b/mod/node-core/pkg/components/depinject.go
@@ -28,16 +28,18 @@ import (
 	sdk "github.com/cosmos/cosmos-sdk/types"
 )
 
-func ProvideKVStoreKey() **storetypes.KVStoreKey {
-	storeKey := storetypes.NewKVStoreKey("beacon")
-	return &storeKey
+//nolint:gochecknoglobals // storeKey is a singleton.
+var storeKey = storetypes.NewKVStoreKey("beacon")
+
+func ProvideKVStoreKey() *storetypes.KVStoreKey {
+	return storeKey
 }
 
 func ProvideKVStoreService(
-	storeKey **storetypes.KVStoreKey,
+	storeKey *storetypes.KVStoreKey,
 ) store.KVStoreService {
 	// skips modules that have no store
-	return kvStoreService{key: *storeKey}
+	return kvStoreService{key: storeKey}
 }
 
 func NewKVStoreService(storeKey *storetypes.KVStoreKey) store.KVStoreService {
@@ -49,7 +51,7 @@ type kvStoreService struct {
 }
 
 func (k kvStoreService) OpenKVStore(ctx context.Context) store.KVStore {
-	return newKVStore(sdk.UnwrapSDKContext(ctx).KVStore(k.key))
+	return NewKVStore(sdk.UnwrapSDKContext(ctx).KVStore(k.key))
 }
 
 // CoreKVStore is a wrapper of Core/Store kvstore interface
@@ -60,7 +62,7 @@ type coreKVStore struct {
 
 // NewKVStore returns a wrapper of Core/Store kvstore interface
 // Remove once store migrates to core/store kvstore interface.
-func newKVStore(store storetypes.KVStore) store.KVStore {
+func NewKVStore(store storetypes.KVStore) store.KVStore {
 	return coreKVStore{kvStore: store}
 }
 
diff --git a/mod/node-core/pkg/components/dispatcher.go b/mod/node-core/pkg/components/dispatcher.go
index 4612f2929..5ba612bca 100644
--- a/mod/node-core/pkg/components/dispatcher.go
+++ b/mod/node-core/pkg/components/dispatcher.go
@@ -37,7 +37,9 @@ type DispatcherInput[
 
 // ProvideDispatcher provides a new Dispatcher.
 func ProvideDispatcher[
+	ConsensusBlockT any,
 	BeaconBlockT any,
+	ConsensusSidecars any,
 	BlobSidecarsT any,
 	GenesisT any,
 	LoggerT log.AdvancedLogger[LoggerT],
@@ -51,11 +53,13 @@ func ProvideDispatcher[
 		dp.WithEvent[SlotEvent](async.NewSlot),
 		dp.WithEvent[async.Event[BeaconBlockT]](async.BuiltBeaconBlock),
 		dp.WithEvent[async.Event[BlobSidecarsT]](async.BuiltSidecars),
-		dp.WithEvent[async.Event[BeaconBlockT]](async.BeaconBlockReceived),
-		dp.WithEvent[async.Event[BlobSidecarsT]](async.SidecarsReceived),
+		dp.WithEvent[async.Event[ConsensusBlockT]](async.BeaconBlockReceived),
+		dp.WithEvent[async.Event[ConsensusSidecars]](async.SidecarsReceived),
 		dp.WithEvent[async.Event[BeaconBlockT]](async.BeaconBlockVerified),
 		dp.WithEvent[async.Event[BlobSidecarsT]](async.SidecarsVerified),
-		dp.WithEvent[async.Event[BeaconBlockT]](async.FinalBeaconBlockReceived),
+		dp.WithEvent[async.Event[ConsensusBlockT]](
+			async.FinalBeaconBlockReceived,
+		),
 		dp.WithEvent[async.Event[BlobSidecarsT]](async.FinalSidecarsReceived),
 		dp.WithEvent[ValidatorUpdateEvent](
 			async.FinalValidatorUpdatesProcessed,
diff --git a/mod/node-core/pkg/components/interfaces.go b/mod/node-core/pkg/components/interfaces.go
index ab9899312..a5687910b 100644
--- a/mod/node-core/pkg/components/interfaces.go
+++ b/mod/node-core/pkg/components/interfaces.go
@@ -80,6 +80,18 @@ type (
 		Persist(math.Slot, BlobSidecarsT) error
 	}
 
+	ConsensusBlock[BeaconBlockT any] interface {
+		GetBeaconBlock() BeaconBlockT
+
+		// GetProposerAddress returns the address of the validator
+		// selected by consensus to propose the block
+		GetProposerAddress() []byte
+
+		// GetConsensusTime returns the timestamp of current consensus request.
+		// It is used to build next payload and to validate currentpayload.
+		GetConsensusTime() math.U64
+	}
+
 	// BeaconBlock represents a generic interface for a beacon block.
 	BeaconBlock[
 		T any,
@@ -113,7 +125,9 @@ type (
 		GetParentBlockRoot() common.Root
 		// GetStateRoot returns the state root of the block.
 		GetStateRoot() common.Root
-		GetExecutionNumber() math.U64
+		// GetTimestamp returns the timestamp of the block from the execution
+		// payload.
+		GetTimestamp() math.U64
 	}
 
 	// BeaconBlockBody represents a generic interface for the body of a beacon
@@ -176,12 +190,13 @@ type (
 		SetStateRoot(common.Root)
 		GetBodyRoot() common.Root
 		GetTree() (*fastssz.Node, error)
+		Equals(T) bool
 	}
 
 	// BeaconStateMarshallable represents an interface for a beacon state
 	// with generic types.
 	BeaconStateMarshallable[
-		T any,
+		T,
 		BeaconBlockHeaderT,
 		Eth1DataT,
 		ExecutionPayloadHeaderT,
@@ -207,14 +222,14 @@ type (
 			randaoMixes []common.Bytes32,
 			nextWithdrawalIndex uint64,
 			nextWithdrawalValidatorIndex math.U64,
-			slashings []uint64, totalSlashing math.U64,
+			slashings []math.U64, totalSlashing math.U64,
 		) (T, error)
 	}
 
 	// BlobProcessor is the interface for the blobs processor.
 	BlobProcessor[
 		AvailabilityStoreT any,
-		BeaconBlockBodyT any,
+		ConsensusSidecarsT any,
 		BlobSidecarsT any,
 	] interface {
 		// ProcessSidecars processes the blobs and ensures they match the local
@@ -226,7 +241,7 @@ type (
 		// VerifySidecars verifies the blobs and ensures they match the local
 		// state.
 		VerifySidecars(
-			sidecars BlobSidecarsT,
+			sidecars ConsensusSidecarsT,
 		) error
 	}
 
@@ -237,6 +252,14 @@ type (
 		GetKzgCommitment() eip4844.KZGCommitment
 	}
 
+	ConsensusSidecars[
+		BlobSidecarsT any,
+		BeaconBlockHeaderT any,
+	] interface {
+		GetSidecars() BlobSidecarsT
+		GetHeader() BeaconBlockHeaderT
+	}
+
 	// BlobSidecars is the interface for blobs sidecars.
 	BlobSidecars[T, BlobSidecarT any] interface {
 		constraints.Nillable
@@ -249,10 +272,14 @@ type (
 		VerifyInclusionProofs(kzgOffset uint64) error
 	}
 
-	BlobVerifier[BlobSidecarsT any] interface {
+	BlobVerifier[BlobSidecarsT, BeaconBlockHeaderT any] interface {
 		VerifyInclusionProofs(scs BlobSidecarsT, kzgOffset uint64) error
 		VerifyKZGProofs(scs BlobSidecarsT) error
-		VerifySidecars(sidecars BlobSidecarsT, kzgOffset uint64) error
+		VerifySidecars(
+			sidecars BlobSidecarsT,
+			kzgOffset uint64,
+			blkHeader BeaconBlockHeaderT,
+		) error
 	}
 
 	// 	// BlockchainService defines the interface for interacting with the
@@ -293,10 +320,9 @@ type (
 		GetSlotByBlockRoot(root common.Root) (math.Slot, error)
 		// GetSlotByStateRoot retrieves the slot by a given root from the store.
 		GetSlotByStateRoot(root common.Root) (math.Slot, error)
-		// GetSlotByExecutionNumber retrieves the slot by a given execution
-		// number
-		// from the store.
-		GetSlotByExecutionNumber(executionNumber math.U64) (math.Slot, error)
+		// GetParentSlotByTimestamp retrieves the parent slot by a given
+		// timestamp from the store.
+		GetParentSlotByTimestamp(timestamp math.U64) (math.Slot, error)
 	}
 
 	ConsensusEngine interface {
@@ -487,10 +513,7 @@ type (
 		GetBaseFeePerGas() *math.U256
 		GetBlobGasUsed() math.U64
 		GetExcessBlobGas() math.U64
-		ToHeader(
-			maxWithdrawalsPerPayload uint64,
-			eth1ChainID uint64,
-		) (ExecutionPayloadHeaderT, error)
+		ToHeader() (ExecutionPayloadHeaderT, error)
 	}
 
 	// ExecutionPayloadHeader is the interface for the execution payload
@@ -894,7 +917,7 @@ type (
 		// GetRandaoMixAtIndex retrieves the randao mix at the given index.
 		GetRandaoMixAtIndex(index uint64) (common.Bytes32, error)
 		// GetSlashings retrieves all slashings.
-		GetSlashings() ([]uint64, error)
+		GetSlashings() ([]math.Gwei, error)
 		// SetSlashingAtIndex sets the slashing at the given index.
 		SetSlashingAtIndex(index uint64, amount math.Gwei) error
 		// GetSlashingAtIndex retrieves the slashing at the given index.
@@ -1090,7 +1113,7 @@ type (
 		ChainSpec() common.ChainSpec
 		GetSlotByBlockRoot(root common.Root) (math.Slot, error)
 		GetSlotByStateRoot(root common.Root) (math.Slot, error)
-		GetSlotByExecutionNumber(executionNumber math.U64) (math.Slot, error)
+		GetParentSlotByTimestamp(timestamp math.U64) (math.Slot, error)
 
 		NodeAPIBeaconBackend[
 			BeaconStateT, BeaconBlockHeaderT, ForkT, ValidatorT,
@@ -1122,7 +1145,7 @@ type (
 	] interface {
 		BlockBackend[BeaconBlockHeaderT]
 		StateBackend[BeaconStateT, ForkT]
-		GetSlotByExecutionNumber(executionNumber math.U64) (math.Slot, error)
+		GetParentSlotByTimestamp(timestamp math.U64) (math.Slot, error)
 	}
 
 	GenesisBackend interface {
diff --git a/mod/node-core/pkg/components/middleware.go b/mod/node-core/pkg/components/middleware.go
index f49411d81..6c8ad1d1f 100644
--- a/mod/node-core/pkg/components/middleware.go
+++ b/mod/node-core/pkg/components/middleware.go
@@ -56,10 +56,11 @@ func ProvideABCIMiddleware[
 ](
 	in ABCIMiddlewareInput[BeaconBlockT, BlobSidecarsT, LoggerT],
 ) (*middleware.ABCIMiddleware[
-	BeaconBlockT, BlobSidecarsT, GenesisT, *SlotData,
+	BeaconBlockT, BeaconBlockHeaderT, BlobSidecarsT, GenesisT, *SlotData,
 ], error) {
 	return middleware.NewABCIMiddleware[
 		BeaconBlockT,
+		BeaconBlockHeaderT,
 		BlobSidecarsT,
 		GenesisT,
 		*SlotData,
diff --git a/mod/node-core/pkg/components/service_registry.go b/mod/node-core/pkg/components/service_registry.go
index db930d419..332df87ad 100644
--- a/mod/node-core/pkg/components/service_registry.go
+++ b/mod/node-core/pkg/components/service_registry.go
@@ -41,6 +41,7 @@ import (
 // ServiceRegistryInput is the input for the service registry provider.
 type ServiceRegistryInput[
 	AvailabilityStoreT AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT],
+	ConsensusBlockT ConsensusBlock[BeaconBlockT],
 	BeaconBlockT BeaconBlock[BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT],
 	BeaconBlockBodyT BeaconBlockBody[
 		BeaconBlockBodyT, *AttestationData, DepositT,
@@ -54,6 +55,7 @@ type ServiceRegistryInput[
 		*Validator, Validators, WithdrawalT,
 	],
 	BeaconStateMarshallableT any,
+	ConsensusSidecarsT ConsensusSidecars[BlobSidecarsT, BeaconBlockHeaderT],
 	BlobSidecarT any,
 	BlobSidecarsT BlobSidecars[BlobSidecarsT, BlobSidecarT],
 	DepositT Deposit[DepositT, *ForkData, WithdrawalCredentials],
@@ -71,18 +73,22 @@ type ServiceRegistryInput[
 ] struct {
 	depinject.In
 	ABCIService *middleware.ABCIMiddleware[
-		BeaconBlockT, BlobSidecarsT, GenesisT, *SlotData,
+		BeaconBlockT, BeaconBlockHeaderT, BlobSidecarsT, GenesisT, *SlotData,
 	]
 	BlockStoreService *blockstore.Service[
 		BeaconBlockT, BeaconBlockStoreT,
 	]
 	ChainService *blockchain.Service[
-		AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT,
+		AvailabilityStoreT,
+		ConsensusBlockT, BeaconBlockT, BeaconBlockBodyT,
 		BeaconBlockHeaderT, BeaconStateT, DepositT, ExecutionPayloadT,
 		ExecutionPayloadHeaderT, GenesisT,
 		*engineprimitives.PayloadAttributes[WithdrawalT],
 	]
-	DAService      *da.Service[AvailabilityStoreT, BlobSidecarsT]
+	DAService *da.Service[
+		AvailabilityStoreT,
+		ConsensusSidecarsT, BlobSidecarsT, BeaconBlockHeaderT,
+	]
 	DBManager      *DBManager
 	DepositService *deposit.Service[
 		BeaconBlockT, BeaconBlockBodyT, DepositT,
@@ -110,6 +116,7 @@ type ServiceRegistryInput[
 // ProvideServiceRegistry is the depinject provider for the service registry.
 func ProvideServiceRegistry[
 	AvailabilityStoreT AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT],
+	ConsensusBlockT ConsensusBlock[BeaconBlockT],
 	BeaconBlockT BeaconBlock[BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT],
 	BeaconBlockBodyT BeaconBlockBody[
 		BeaconBlockBodyT, *AttestationData, DepositT,
@@ -123,6 +130,7 @@ func ProvideServiceRegistry[
 		*Validator, Validators, WithdrawalT,
 	],
 	BeaconStateMarshallableT any,
+	ConsensusSidecarsT ConsensusSidecars[BlobSidecarsT, BeaconBlockHeaderT],
 	BlobSidecarT any,
 	BlobSidecarsT BlobSidecars[BlobSidecarsT, BlobSidecarT],
 	DepositT Deposit[DepositT, *ForkData, WithdrawalCredentials],
@@ -138,9 +146,11 @@ func ProvideServiceRegistry[
 	WithdrawalsT Withdrawals[WithdrawalT],
 ](
 	in ServiceRegistryInput[
-		AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT,
+		AvailabilityStoreT,
+		ConsensusBlockT, BeaconBlockT, BeaconBlockBodyT,
 		BeaconBlockHeaderT, BeaconBlockStoreT, BeaconStateT,
-		BeaconStateMarshallableT, BlobSidecarT, BlobSidecarsT,
+		BeaconStateMarshallableT,
+		ConsensusSidecarsT, BlobSidecarT, BlobSidecarsT,
 		DepositT, DepositStoreT, ExecutionPayloadT, ExecutionPayloadHeaderT,
 		GenesisT, KVStoreT, LoggerT, NodeAPIContextT, WithdrawalT, WithdrawalsT,
 	],
diff --git a/mod/node-core/pkg/components/state_processor.go b/mod/node-core/pkg/components/state_processor.go
index 269154b8e..bef50d3a7 100644
--- a/mod/node-core/pkg/components/state_processor.go
+++ b/mod/node-core/pkg/components/state_processor.go
@@ -24,6 +24,7 @@ import (
 	"cosmossdk.io/depinject"
 	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
 	"github.com/berachain/beacon-kit/mod/execution/pkg/engine"
+	"github.com/berachain/beacon-kit/mod/log"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
 	"github.com/berachain/beacon-kit/mod/state-transition/pkg/core"
@@ -32,6 +33,7 @@ import (
 // StateProcessorInput is the input for the state processor for the depinject
 // framework.
 type StateProcessorInput[
+	LoggerT log.AdvancedLogger[LoggerT],
 	ExecutionPayloadT ExecutionPayload[
 		ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT,
 	],
@@ -40,6 +42,7 @@ type StateProcessorInput[
 	WithdrawalsT Withdrawals[WithdrawalT],
 ] struct {
 	depinject.In
+	Logger          LoggerT
 	ChainSpec       common.ChainSpec
 	ExecutionEngine *engine.Engine[
 		ExecutionPayloadT,
@@ -53,6 +56,7 @@ type StateProcessorInput[
 // ProvideStateProcessor provides the state processor to the depinject
 // framework.
 func ProvideStateProcessor[
+	LoggerT log.AdvancedLogger[LoggerT],
 	BeaconBlockT BeaconBlock[BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT],
 	BeaconBlockBodyT BeaconBlockBody[
 		BeaconBlockBodyT, *AttestationData, DepositT,
@@ -78,7 +82,9 @@ func ProvideStateProcessor[
 	WithdrawalT Withdrawal[WithdrawalT],
 ](
 	in StateProcessorInput[
-		ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT, WithdrawalsT,
+		LoggerT,
+		ExecutionPayloadT, ExecutionPayloadHeaderT,
+		WithdrawalT, WithdrawalsT,
 	],
 ) *core.StateProcessor[
 	BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT,
@@ -105,8 +111,10 @@ func ProvideStateProcessor[
 		WithdrawalsT,
 		WithdrawalCredentials,
 	](
+		in.Logger.With("service", "state-processor"),
 		in.ChainSpec,
 		in.ExecutionEngine,
 		in.Signer,
+		crypto.GetAddressFromPubKey,
 	)
 }
diff --git a/mod/node-core/pkg/components/types.go b/mod/node-core/pkg/components/types.go
index 5cd9c14aa..2abea7cca 100644
--- a/mod/node-core/pkg/components/types.go
+++ b/mod/node-core/pkg/components/types.go
@@ -29,7 +29,6 @@ import (
 	"github.com/berachain/beacon-kit/mod/node-core/pkg/components/signer"
 	"github.com/berachain/beacon-kit/mod/node-core/pkg/services/version"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/async"
-	"github.com/berachain/beacon-kit/mod/primitives/pkg/service"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/transition"
 	"github.com/berachain/beacon-kit/mod/storage/pkg/manager"
 )
@@ -125,15 +124,6 @@ type (
 	ValidatorUpdateEvent = async.Event[transition.ValidatorUpdates]
 )
 
-// Messages.
-type (
-	// SlotMessage is a type alias for the slot message.
-	SlotMessage = async.Event[*SlotData]
-
-	// StatusMessage is a type alias for the status message.
-	StatusMessage = async.Event[*service.StatusEvent]
-)
-
 /* -------------------------------------------------------------------------- */
 /*                                   Dispatcher                               */
 /* -------------------------------------------------------------------------- */
diff --git a/mod/node-core/pkg/services/registry/mocks/basic.mock.go b/mod/node-core/pkg/services/registry/mocks/basic.mock.go
index b1be2c1cb..5636cc249 100644
--- a/mod/node-core/pkg/services/registry/mocks/basic.mock.go
+++ b/mod/node-core/pkg/services/registry/mocks/basic.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
diff --git a/mod/node-core/pkg/services/registry/mocks/dispatcher.mock.go b/mod/node-core/pkg/services/registry/mocks/dispatcher.mock.go
index 5e698780d..8c02d2646 100644
--- a/mod/node-core/pkg/services/registry/mocks/dispatcher.mock.go
+++ b/mod/node-core/pkg/services/registry/mocks/dispatcher.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
diff --git a/mod/node-core/pkg/services/registry/mocks/registry_option.mock.go b/mod/node-core/pkg/services/registry/mocks/registry_option.mock.go
index 09bf85448..cf55bbcda 100644
--- a/mod/node-core/pkg/services/registry/mocks/registry_option.mock.go
+++ b/mod/node-core/pkg/services/registry/mocks/registry_option.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
diff --git a/mod/node-core/pkg/services/version/version.go b/mod/node-core/pkg/services/version/version.go
index 8e7d98578..b204bcc9e 100644
--- a/mod/node-core/pkg/services/version/version.go
+++ b/mod/node-core/pkg/services/version/version.go
@@ -68,13 +68,13 @@ func (v *ReportingService) Start(ctx context.Context) error {
 	ticker := time.NewTicker(v.reportingInterval)
 	v.metrics.reportVersion(v.version)
 	go func() {
+		defer ticker.Stop()
 		for {
 			select {
 			case <-ticker.C:
 				v.metrics.reportVersion(v.version)
 				continue
 			case <-ctx.Done():
-				ticker.Stop()
 				return
 			}
 		}
diff --git a/mod/payload/go.mod b/mod/payload/go.mod
index ce96a1d5d..1aa0aa49b 100644
--- a/mod/payload/go.mod
+++ b/mod/payload/go.mod
@@ -33,10 +33,11 @@ require (
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
 	github.com/deckarep/golang-set/v2 v2.6.0 // indirect
 	github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
 	github.com/ethereum/c-kzg-4844 v1.0.3 // indirect
 	github.com/ethereum/go-ethereum v1.14.7 // indirect
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 // indirect
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
 	github.com/go-ole/go-ole v1.3.0 // indirect
 	github.com/goccy/go-json v0.10.3 // indirect
@@ -75,13 +76,13 @@ require (
 	github.com/tklauser/numcpus v0.8.0 // indirect
 	github.com/umbracle/fastrlp v0.1.0 // indirect
 	github.com/yusufpapurcu/wmi v1.2.4 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
 	golang.org/x/sync v0.8.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 	rsc.io/tmplfunc v0.0.3 // indirect
diff --git a/mod/payload/go.sum b/mod/payload/go.sum
index a0164bbf6..fe4449f46 100644
--- a/mod/payload/go.sum
+++ b/mod/payload/go.sum
@@ -65,14 +65,16 @@ github.com/decred/dcrd/crypto/blake256 v1.0.1 h1:7PltbUIQB7u/FfZ39+DGa/ShuMyJ5il
 github.com/decred/dcrd/crypto/blake256 v1.0.1/go.mod h1:2OfgNZ5wDpcsFmHmCK5gZTPcCXqlm2ArzUIkw9czNJo=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 h1:rpfIENRNNilwHwZeG5+P150SMrnNEcHYvcCuK6dPZSg=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0/go.mod h1:v57UDF4pDQJcEfFUCRop3lJL149eHGSe9Jvczhzjo/0=
+github.com/emicklei/dot v1.6.2 h1:08GN+DD79cy/tzN6uLCT84+2Wk9u+wvqP+Hkx/dIR8A=
+github.com/emicklei/dot v1.6.2/go.mod h1:DeV7GvQtIw4h2u73RKBkkFdvVAz0D9fzeJrgPW6gy/s=
 github.com/ethereum/c-kzg-4844 v1.0.3 h1:IEnbOHwjixW2cTvKRUlAAUOeleV7nNM/umJR+qy4WDs=
 github.com/ethereum/c-kzg-4844 v1.0.3/go.mod h1:VewdlzQmpT5QSrVhbBuGoCdFJkpaJlO1aQputP83wc0=
 github.com/ethereum/go-ethereum v1.14.7 h1:EHpv3dE8evQmpVEQ/Ne2ahB06n2mQptdwqaMNhAT29g=
 github.com/ethereum/go-ethereum v1.14.7/go.mod h1:Mq0biU2jbdmKSZoqOj29017ygFrMnB5/Rifwp980W4o=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 h1:KrE8I4reeVvf7C1tm8elRjj4BdscTYzz/WAbYyf/JI4=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0/go.mod h1:D9AJLVXSyZQXJQVk8oh1EwjISE+sJTn2duYIZC0dy3w=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
 github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
@@ -221,8 +223,8 @@ github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQ
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
@@ -236,8 +238,8 @@ golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -264,16 +266,16 @@ golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
@@ -292,8 +294,8 @@ google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzi
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
diff --git a/mod/payload/pkg/attributes/factory.go b/mod/payload/pkg/attributes/factory.go
index d2b918399..865828fa0 100644
--- a/mod/payload/pkg/attributes/factory.go
+++ b/mod/payload/pkg/attributes/factory.go
@@ -58,7 +58,7 @@ func NewAttributesFactory[
 	}
 }
 
-// CreateAttributes creates a new instance of PayloadAttributes.
+// BuildPayloadAttributes creates a new instance of PayloadAttributes.
 func (f *Factory[
 	BeaconStateT,
 	PayloadAttributesT,
diff --git a/mod/payload/pkg/builder/payload.go b/mod/payload/pkg/builder/payload.go
index 4a692bc38..60ae90845 100644
--- a/mod/payload/pkg/builder/payload.go
+++ b/mod/payload/pkg/builder/payload.go
@@ -121,7 +121,8 @@ func (pb *PayloadBuilder[
 	)
 	if err != nil {
 		return nil, err
-	} else if payloadID == nil {
+	}
+	if payloadID == nil {
 		return nil, ErrNilPayloadID
 	}
 
@@ -140,13 +141,7 @@ func (pb *PayloadBuilder[
 	}
 
 	// Get the payload from the execution client.
-	return pb.ee.GetPayload(
-		ctx,
-		&engineprimitives.GetPayloadRequest[PayloadIDT]{
-			PayloadID:   *payloadID,
-			ForkVersion: pb.chainSpec.ActiveForkVersionForSlot(slot),
-		},
-	)
+	return pb.getPayload(ctx, *payloadID, slot)
 }
 
 // RetrievePayload attempts to pull a previously built payload
@@ -172,17 +167,10 @@ func (pb *PayloadBuilder[
 		return nil, ErrPayloadIDNotFound
 	}
 
-	envelope, err := pb.ee.GetPayload(
-		ctx,
-		&engineprimitives.GetPayloadRequest[PayloadIDT]{
-			PayloadID:   payloadID,
-			ForkVersion: pb.chainSpec.ActiveForkVersionForSlot(slot),
-		},
-	)
+	// Get the payload from the execution client.
+	envelope, err := pb.getPayload(ctx, payloadID, slot)
 	if err != nil {
 		return nil, err
-	} else if envelope == nil {
-		return nil, ErrNilPayloadEnvelope
 	}
 
 	overrideBuilder := envelope.ShouldOverrideBuilder()
@@ -232,6 +220,10 @@ func (pb *PayloadBuilder[
 	st BeaconStateT,
 	slot math.Slot,
 ) error {
+	if !pb.Enabled() {
+		return ErrPayloadBuilderDisabled
+	}
+
 	lph, err := st.GetLatestExecutionPayloadHeader()
 	if err != nil {
 		return err
@@ -260,3 +252,27 @@ func (pb *PayloadBuilder[
 	)
 	return err
 }
+
+func (pb *PayloadBuilder[
+	_, ExecutionPayloadT, _,
+	_, PayloadIDT, _,
+]) getPayload(
+	ctx context.Context,
+	payloadID PayloadIDT,
+	slot math.U64,
+) (engineprimitives.BuiltExecutionPayloadEnv[ExecutionPayloadT], error) {
+	envelope, err := pb.ee.GetPayload(
+		ctx,
+		&engineprimitives.GetPayloadRequest[PayloadIDT]{
+			PayloadID:   payloadID,
+			ForkVersion: pb.chainSpec.ActiveForkVersionForSlot(slot),
+		},
+	)
+	if err != nil {
+		return nil, err
+	}
+	if envelope == nil {
+		return nil, ErrNilPayloadEnvelope
+	}
+	return envelope, nil
+}
diff --git a/mod/payload/pkg/cache/payload_id.go b/mod/payload/pkg/cache/payload_id.go
index 6582b978d..0514e436a 100644
--- a/mod/payload/pkg/cache/payload_id.go
+++ b/mod/payload/pkg/cache/payload_id.go
@@ -117,9 +117,9 @@ func (p *PayloadIDCache[_, _, SlotT]) UnsafePrunePrior(
 	p.prunePrior(slot)
 }
 
-// Prune removes payload IDs from the cache for slots less than the specified
-// slot. This method helps in managing the memory usage of the cache by
-// discarding outdated entries.
+// prunePrior removes payload IDs from the cache for slots less than
+// the specified slot. This method helps in managing the memory usage
+// of the cache by discarding outdated entries.
 func (p *PayloadIDCache[_, _, SlotT]) prunePrior(slot SlotT) {
 	for s := range p.slotToStateRootToPayloadID {
 		if s < slot {
diff --git a/mod/primitives/go.mod b/mod/primitives/go.mod
index 02637436e..6ba584f83 100644
--- a/mod/primitives/go.mod
+++ b/mod/primitives/go.mod
@@ -5,36 +5,48 @@ go 1.23.0
 require (
 	github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240703145037-b5612ab256db
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240610210054-bfdc14c4013c
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79
-	github.com/goccy/go-json v0.10.3
+	github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81
 	github.com/golang-jwt/jwt/v5 v5.2.1
 	github.com/holiman/uint256 v1.3.1
 	github.com/karalabe/ssz v0.2.1-0.20240724074312-3d1ff7a6f7c4
 	github.com/minio/sha256-simd v1.0.1
 	github.com/prysmaticlabs/gohashtree v0.0.4-beta.0.20240624100937-73632381301b
 	github.com/stretchr/testify v1.9.0
-	golang.org/x/crypto v0.26.0
+	golang.org/x/crypto v0.28.0
 	golang.org/x/sync v0.8.0
 )
 
 require (
+	github.com/btcsuite/btcd/btcec/v2 v2.3.3 // indirect
+	github.com/btcsuite/btcd/chaincfg/chainhash v1.1.0 // indirect
 	github.com/cockroachdb/errors v1.11.3 // indirect
 	github.com/cockroachdb/logtags v0.0.0-20230118201751-21c54148d20b // indirect
 	github.com/cockroachdb/redact v1.1.5 // indirect
+	github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 // indirect
+	github.com/cosmos/gogoproto v1.7.0 // indirect
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
+	github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
 	github.com/gogo/protobuf v1.3.2 // indirect
+	github.com/google/go-cmp v0.6.0 // indirect
 	github.com/klauspost/cpuid/v2 v2.2.8 // indirect
 	github.com/kr/pretty v0.3.1 // indirect
 	github.com/kr/text v0.2.0 // indirect
 	github.com/mitchellh/mapstructure v1.5.0 // indirect
+	github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
 	github.com/prysmaticlabs/go-bitfield v0.0.0-20240618144021-706c95b2dd15 // indirect
 	github.com/rogpeppe/go-internal v1.12.0 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
 	github.com/stretchr/objx v0.5.2 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
+	github.com/supranational/blst v0.3.13 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 )
diff --git a/mod/primitives/go.sum b/mod/primitives/go.sum
index e5cb4b5ff..680ebefa9 100644
--- a/mod/primitives/go.sum
+++ b/mod/primitives/go.sum
@@ -2,27 +2,45 @@ github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240703145037-b5612ab256d
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240703145037-b5612ab256db/go.mod h1:rbvfJqTKUIckels2AlWy+XuG+UGnegoFQuHC+TUg+zA=
 github.com/berachain/beacon-kit/mod/errors v0.0.0-20240610210054-bfdc14c4013c h1:rPoD2zVkIzuMC4R/XMuwx6eanJL8ccu37sLro+eIj3Y=
 github.com/berachain/beacon-kit/mod/errors v0.0.0-20240610210054-bfdc14c4013c/go.mod h1:xgngH5/PYbyW+YDEmRhbBy3V333GXsNWF4DAkjYCmfs=
+github.com/btcsuite/btcd/btcec/v2 v2.3.3 h1:6+iXlDKE8RMtKsvK0gshlXIuPbyWM/h84Ensb7o3sC0=
+github.com/btcsuite/btcd/btcec/v2 v2.3.3/go.mod h1:zYzJ8etWJQIv1Ogk7OzpWjowwOdXY1W/17j2MW85J04=
+github.com/btcsuite/btcd/btcutil v1.1.5 h1:+wER79R5670vs/ZusMTF1yTcRYE5GUsFbdjdisflzM8=
+github.com/btcsuite/btcd/btcutil v1.1.5/go.mod h1:PSZZ4UitpLBWzxGd5VGOrLnmOjtPP/a6HaFo12zMs00=
+github.com/btcsuite/btcd/chaincfg/chainhash v1.1.0 h1:59Kx4K6lzOW5w6nFlA0v5+lk/6sjybR934QNHSJZPTQ=
+github.com/btcsuite/btcd/chaincfg/chainhash v1.1.0/go.mod h1:7SFka0XMvUgj3hfZtydOrQY2mwhPclbT2snogU7SQQc=
 github.com/cockroachdb/errors v1.11.3 h1:5bA+k2Y6r+oz/6Z/RFlNeVCesGARKuC6YymtcDrbC/I=
 github.com/cockroachdb/errors v1.11.3/go.mod h1:m4UIW4CDjx+R5cybPsNrRbreomiFqt8o1h1wUVazSd8=
 github.com/cockroachdb/logtags v0.0.0-20230118201751-21c54148d20b h1:r6VH0faHjZeQy818SGhaone5OnYfxFR/+AzdY3sf5aE=
 github.com/cockroachdb/logtags v0.0.0-20230118201751-21c54148d20b/go.mod h1:Vz9DsVWQQhf3vs21MhPMZpMGSht7O/2vFW2xusFUVOs=
 github.com/cockroachdb/redact v1.1.5 h1:u1PMllDkdFfPWaNGMyLD1+so+aq3uUItthCFqzwPJ30=
 github.com/cockroachdb/redact v1.1.5/go.mod h1:BVNblN9mBWFyMyqK1k3AAiSxhvhfK2oOZZ2lK+dpvRg=
+github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4 h1:LyYO/PPHwQsnGhTNJzWfCi9xg7EEyuMORRqrQZJQjYc=
+github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4/go.mod h1:gYT9oZe8H3xTWgocfjbnOV4v7IjzaEWqM+JJO3Z3R60=
+github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 h1:dEOaTNsJrOTOSysBgAE9pK6zeNASUR6gsFW8s0zcRRU=
+github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4/go.mod h1:NDFKiBBD8HJC6QQLAoUI99YhsiRZtg2+FJWfk6A6m6o=
+github.com/cosmos/gogoproto v1.7.0 h1:79USr0oyXAbxg3rspGh/m4SWNyoz/GLaAh0QlCe2fro=
+github.com/cosmos/gogoproto v1.7.0/go.mod h1:yWChEv5IUEYURQasfyBW5ffkMHR/90hiHgbNgrtp4j0=
 github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
 github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=
 github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/decred/dcrd/crypto/blake256 v1.0.1 h1:7PltbUIQB7u/FfZ39+DGa/ShuMyJ5ilcvdfma9wOH6Y=
+github.com/decred/dcrd/crypto/blake256 v1.0.1/go.mod h1:2OfgNZ5wDpcsFmHmCK5gZTPcCXqlm2ArzUIkw9czNJo=
+github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 h1:rpfIENRNNilwHwZeG5+P150SMrnNEcHYvcCuK6dPZSg=
+github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0/go.mod h1:v57UDF4pDQJcEfFUCRop3lJL149eHGSe9Jvczhzjo/0=
+github.com/emicklei/dot v1.6.2 h1:08GN+DD79cy/tzN6uLCT84+2Wk9u+wvqP+Hkx/dIR8A=
+github.com/emicklei/dot v1.6.2/go.mod h1:DeV7GvQtIw4h2u73RKBkkFdvVAz0D9fzeJrgPW6gy/s=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/getsentry/sentry-go v0.28.1 h1:zzaSm/vHmGllRM6Tpx1492r0YDzauArdBfkJRtY6P5k=
 github.com/getsentry/sentry-go v0.28.1/go.mod h1:1fQZ+7l7eeJ3wYi82q5Hg8GqAPgefRq+FP/QhafYVgg=
 github.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=
 github.com/go-errors/errors v1.4.2/go.mod h1:sIVyrIiJhuEF+Pj9Ebtd6P/rEYROXFi3BopGUQ5a5Og=
-github.com/goccy/go-json v0.10.3 h1:KZ5WoDbxAIgm2HNbYckL0se1fHD6rz5j4ywS6ebzDqA=
-github.com/goccy/go-json v0.10.3/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=
 github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
 github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
 github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
+github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=
+github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
 github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
 github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/holiman/uint256 v1.3.1 h1:JfTzmih28bittyHM8z360dCjIA9dbPIBlcTI6lmctQs=
@@ -41,6 +59,10 @@ github.com/minio/sha256-simd v1.0.1 h1:6kaan5IFmwTNynnKKpDHe6FWHohJOHhCPchzK49dz
 github.com/minio/sha256-simd v1.0.1/go.mod h1:Pz6AKMiUdngCLpeTL/RJY1M9rUuPMYujV5xJjtbRSN8=
 github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=
 github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
+github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a h1:dlRvE5fWabOchtH7znfiFCcOvmIYgOeAS5ifBXBlh9Q=
+github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a/go.mod h1:hVoHR2EVESiICEMbg137etN/Lx+lSrHPTD39Z/uE+2s=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
 github.com/pingcap/errors v0.11.4/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
@@ -55,17 +77,21 @@ github.com/prysmaticlabs/gohashtree v0.0.4-beta.0.20240624100937-73632381301b/go
 github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
 github.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=
 github.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/stretchr/objx v0.5.2 h1:xuMeJ0Sdp5ZMRXx/aWO6RZxdr3beISkG5/G/aIRr3pY=
 github.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=
 github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
 github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
+github.com/supranational/blst v0.3.13 h1:AYeSxdOMacwu7FBmpfloBz5pbFXDmJL33RuwnKtmTjk=
+github.com/supranational/blst v0.3.13/go.mod h1:jZJtfjgudtNl4en1tzwPIV3KjUnQUvG3/j+w+fVonLw=
 github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
@@ -81,12 +107,12 @@ golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5h
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
@@ -95,6 +121,8 @@ golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8T
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
diff --git a/mod/primitives/pkg/bytes/b.go b/mod/primitives/pkg/bytes/b.go
index 479b6d5b7..8c550115a 100644
--- a/mod/primitives/pkg/bytes/b.go
+++ b/mod/primitives/pkg/bytes/b.go
@@ -31,12 +31,16 @@ type Bytes []byte
 
 // MarshalText implements encoding.TextMarshaler.
 func (b Bytes) MarshalText() ([]byte, error) {
-	return hex.EncodeBytes(b), nil
+	return []byte(hex.EncodeBytes(b)), nil
 }
 
 // UnmarshalJSON implements json.Unmarshaler.
 func (b *Bytes) UnmarshalJSON(input []byte) error {
-	return hex.UnmarshalJSONText(input, b)
+	strippedInput, err := hex.ValidateQuotedString(input)
+	if err != nil {
+		return err
+	}
+	return b.UnmarshalText(strippedInput)
 }
 
 // UnmarshalText implements encoding.TextUnmarshaler.
@@ -50,6 +54,6 @@ func (b *Bytes) UnmarshalText(input []byte) error {
 }
 
 // String returns the hex encoding of b.
-func (b Bytes) String() hex.String {
-	return hex.FromBytes(b)
+func (b Bytes) String() string {
+	return hex.EncodeBytes(b)
 }
diff --git a/mod/primitives/pkg/bytes/b20.go b/mod/primitives/pkg/bytes/b20.go
index f7e3ed8a3..022181713 100644
--- a/mod/primitives/pkg/bytes/b20.go
+++ b/mod/primitives/pkg/bytes/b20.go
@@ -22,6 +22,8 @@
 package bytes
 
 import (
+	"fmt"
+
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
 )
 
@@ -35,9 +37,17 @@ const (
 type B20 [20]byte
 
 // ToBytes20 is a utility function that transforms a byte slice into a fixed
-// 20-byte array. If the input exceeds 20 bytes, it gets truncated.
-func ToBytes20(input []byte) B20 {
-	return B20(ExtendToSize(input, B20Size))
+// 20-byte array. It errs if input has not the required size.
+func ToBytes20(input []byte) (B20, error) {
+	if len(input) != B20Size {
+		return B20{}, fmt.Errorf(
+			"%w, got %d, expected %d",
+			ErrIncorrectLength,
+			len(input),
+			B20Size,
+		)
+	}
+	return B20(input), nil
 }
 
 /* -------------------------------------------------------------------------- */
@@ -56,7 +66,7 @@ func (h *B20) UnmarshalText(text []byte) error {
 
 // String returns the hex string representation of B20.
 func (h *B20) String() string {
-	return hex.FromBytes(h[:]).Unwrap()
+	return hex.EncodeBytes(h[:])
 }
 
 /* -------------------------------------------------------------------------- */
@@ -78,6 +88,6 @@ func (h B20) MarshalSSZ() ([]byte, error) {
 }
 
 // HashTreeRoot returns the hash tree root of the B20.
-func (h B20) HashTreeRoot() B32 {
-	return ToBytes32(h[:])
+func (h B20) HashTreeRoot() (B32, error) {
+	return ToBytes32(ExtendToSize(h[:], B32Size))
 }
diff --git a/mod/primitives/pkg/bytes/b20_test.go b/mod/primitives/pkg/bytes/b20_test.go
index ef7aedfd7..bd6601145 100644
--- a/mod/primitives/pkg/bytes/b20_test.go
+++ b/mod/primitives/pkg/bytes/b20_test.go
@@ -66,9 +66,8 @@ func TestBytes20MarshalText(t *testing.T) {
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			got, err := tt.input.MarshalText()
-			require.NoError(t, err, "Test case: %s", tt.name)
-			require.Equal(t, tt.want, string(got),
-				"Test case: %s", tt.name)
+			require.NoError(t, err)
+			require.Equal(t, tt.want, string(got))
 		})
 	}
 }
@@ -95,8 +94,8 @@ func TestBytes20MarshalSSZ(t *testing.T) {
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			got, err := tt.input.MarshalSSZ()
-			require.NoError(t, err, "Test case: %s", tt.name)
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+			require.NoError(t, err)
+			require.Equal(t, tt.want, got)
 		})
 	}
 }
@@ -123,8 +122,9 @@ func TestBytes20HashTreeRoot(t *testing.T) {
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			got := tt.input.HashTreeRoot()
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+			got, err := tt.input.HashTreeRoot()
+			require.NoError(t, err)
+			require.Equal(t, tt.want, got)
 		})
 	}
 }
@@ -157,10 +157,10 @@ func TestBytes20UnmarshalText(t *testing.T) {
 			var got bytes.B20
 			err := got.UnmarshalText([]byte(tt.input))
 			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
+				require.Error(t, err)
 			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+				require.NoError(t, err)
+				require.Equal(t, tt.want, got)
 			}
 		})
 	}
@@ -194,10 +194,10 @@ func TestBytes20UnmarshalJSON(t *testing.T) {
 			var got bytes.B20
 			err := got.UnmarshalJSON([]byte(tt.input))
 			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
+				require.Error(t, err)
 			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+				require.NoError(t, err)
+				require.Equal(t, tt.want, got)
 			}
 		})
 	}
@@ -205,68 +205,49 @@ func TestBytes20UnmarshalJSON(t *testing.T) {
 
 func TestToBytes20(t *testing.T) {
 	tests := []struct {
-		name  string
-		input []byte
-		want  bytes.B20
+		name    string
+		input   []byte
+		wantRes bytes.B20
+		wantErr error
 	}{
 		{
 			name: "exact 20 bytes",
-			input: []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
-				0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14},
-			want: bytes.B20{
+			input: []byte{
 				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
 				0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
 			},
-		},
-		{
-			name:  "less than 20 bytes",
-			input: []byte{0x01, 0x02, 0x03, 0x04, 0x05},
-			want: bytes.B20{
-				0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
-				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			wantRes: bytes.B20{
+				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
+				0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
 			},
+			wantErr: nil,
 		},
 		{
-			name:  "less than 20 bytes",
-			input: []byte{0x01, 0x02, 0x03, 0x04, 0x05},
-			want: bytes.B20{
-				0x01,
-				0x02,
-				0x03,
-				0x04,
-				0x05,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-				0x00,
-			},
+			name:    "less than 20 bytes",
+			input:   []byte{0x01, 0x02, 0x03, 0x04, 0x05},
+			wantRes: bytes.B20{},
+			wantErr: bytes.ErrIncorrectLength,
 		},
 		{
 			name: "more than 20 bytes",
 			input: []byte{
 				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,
-				0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16},
-			want: bytes.B20{
-				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,
-				0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14},
+				0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
+			},
+			wantRes: bytes.B20{},
+			wantErr: bytes.ErrIncorrectLength,
 		},
 	}
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			got := bytes.ToBytes20(tt.input)
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+			result, err := bytes.ToBytes20(tt.input)
+			if tt.wantErr != nil {
+				require.ErrorIs(t, err, tt.wantErr)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.wantRes, result)
+			}
 		})
 	}
 }
diff --git a/mod/primitives/pkg/bytes/b256.go b/mod/primitives/pkg/bytes/b256.go
index 6cf80e71f..80daf0829 100644
--- a/mod/primitives/pkg/bytes/b256.go
+++ b/mod/primitives/pkg/bytes/b256.go
@@ -22,6 +22,8 @@
 package bytes
 
 import (
+	"fmt"
+
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
 	"github.com/prysmaticlabs/gohashtree"
 )
@@ -36,9 +38,17 @@ const (
 type B256 [256]byte
 
 // ToBytes256 is a utility function that transforms a byte slice into a fixed
-// 256-byte array. If the input exceeds 256 bytes, it gets truncated.
-func ToBytes256(input []byte) B256 {
-	return B256(ExtendToSize(input, B256Size))
+// 256-byte array. It errs if input has not the required size.
+func ToBytes256(input []byte) (B256, error) {
+	if len(input) != B256Size {
+		return B256{}, fmt.Errorf(
+			"%w, got %d, expected %d",
+			ErrIncorrectLength,
+			len(input),
+			B256Size,
+		)
+	}
+	return B256(input), nil
 }
 
 /* -------------------------------------------------------------------------- */
@@ -57,7 +67,7 @@ func (h *B256) UnmarshalText(text []byte) error {
 
 // String returns the hex string representation of B256.
 func (h *B256) String() string {
-	return hex.FromBytes(h[:]).Unwrap()
+	return hex.EncodeBytes(h[:])
 }
 
 /* -------------------------------------------------------------------------- */
diff --git a/mod/primitives/pkg/bytes/b32.go b/mod/primitives/pkg/bytes/b32.go
index f8444875f..701c9822d 100644
--- a/mod/primitives/pkg/bytes/b32.go
+++ b/mod/primitives/pkg/bytes/b32.go
@@ -22,6 +22,8 @@
 package bytes
 
 import (
+	"fmt"
+
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
 )
 
@@ -32,14 +34,20 @@ const (
 
 // B32 represents a 32-byte fixed-size byte array.
 // For SSZ purposes it is serialized a `Vector[Byte, 32]`.
-type B32 [32]byte
+type B32 [B32Size]byte
 
 // ToBytes32 is a utility function that transforms a byte slice into a fixed
-// 32-byte array. If the input exceeds 32 bytes, it gets truncated.
-func ToBytes32(input []byte) B32 {
-	var b B32
-	copy(b[:], input)
-	return b
+// 32-byte array It errs if input has not the required size.
+func ToBytes32(input []byte) (B32, error) {
+	if len(input) != B32Size {
+		return B32{}, fmt.Errorf(
+			"%w, got %d, expected %d",
+			ErrIncorrectLength,
+			len(input),
+			B32Size,
+		)
+	}
+	return B32(input), nil
 }
 
 /* -------------------------------------------------------------------------- */
@@ -58,7 +66,7 @@ func (h *B32) UnmarshalText(text []byte) error {
 
 // String returns the hex string representation of B32.
 func (h B32) String() string {
-	return hex.FromBytes(h[:]).Unwrap()
+	return hex.EncodeBytes(h[:])
 }
 
 /* -------------------------------------------------------------------------- */
diff --git a/mod/primitives/pkg/bytes/b32_test.go b/mod/primitives/pkg/bytes/b32_test.go
index 5409d0886..9844f1b9d 100644
--- a/mod/primitives/pkg/bytes/b32_test.go
+++ b/mod/primitives/pkg/bytes/b32_test.go
@@ -18,6 +18,7 @@
 // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
 // TITLE.
 
+//nolint:lll // long strings.
 package bytes_test
 
 import (
@@ -27,6 +28,254 @@ import (
 	"github.com/stretchr/testify/require"
 )
 
+func TestBytes32UnmarshalText(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   string
+		want    bytes.B32
+		wantErr bool
+	}{
+		{
+			name:  "valid input",
+			input: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
+			want: bytes.B32{
+				0x01,
+				0x02,
+				0x03,
+				0x04,
+				0x05,
+				0x06,
+				0x07,
+				0x08,
+				0x09,
+				0x0a,
+				0x0b,
+				0x0c,
+				0x0d,
+				0x0e,
+				0x0f,
+				0x10,
+				0x11,
+				0x12,
+				0x13,
+				0x14,
+				0x15,
+				0x16,
+				0x17,
+				0x18,
+				0x19,
+				0x1a,
+				0x1b,
+				0x1c,
+				0x1d,
+				0x1e,
+				0x1f,
+				0x20,
+			},
+			wantErr: false,
+		},
+		{
+			name:    "invalid input - not hex",
+			input:   "0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
+			wantErr: true,
+		},
+		{
+			name:    "invalid input - wrong length",
+			input:   "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
+			wantErr: true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var got bytes.B32
+			err := got.UnmarshalText([]byte(tt.input))
+			if tt.wantErr {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.want, got)
+			}
+		})
+	}
+}
+
+func TestBytes32UnmarshalJSON(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   string
+		want    bytes.B32
+		wantErr bool
+	}{
+		{
+			name:  "valid input",
+			input: `"0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20"`,
+			want: bytes.B32{
+				0x01,
+				0x02,
+				0x03,
+				0x04,
+				0x05,
+				0x06,
+				0x07,
+				0x08,
+				0x09,
+				0x0a,
+				0x0b,
+				0x0c,
+				0x0d,
+				0x0e,
+				0x0f,
+				0x10,
+				0x11,
+				0x12,
+				0x13,
+				0x14,
+				0x15,
+				0x16,
+				0x17,
+				0x18,
+				0x19,
+				0x1a,
+				0x1b,
+				0x1c,
+				0x1d,
+				0x1e,
+				0x1f,
+				0x20,
+			},
+			wantErr: false,
+		},
+		{
+			name:    "invalid input - not hex",
+			input:   `"0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20"`,
+			wantErr: true,
+		},
+		{
+			name:    "invalid input - wrong length",
+			input:   `"0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"`,
+			wantErr: true,
+		},
+		{
+			name:    "invalid input - extra characters",
+			input:   `"0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122"`,
+			wantErr: true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var got bytes.B32
+			err := got.UnmarshalJSON([]byte(tt.input))
+			if tt.wantErr {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.want, got)
+			}
+		})
+	}
+}
+
+func TestBytes32MarshalText(t *testing.T) {
+	tests := []struct {
+		name  string
+		input bytes.B32
+		want  string
+	}{
+		{
+			name: "valid input",
+			input: bytes.B32{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
+				0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12,
+				0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
+				0x1e, 0x1f, 0x20},
+			want: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
+		},
+		{
+			name:  "empty input",
+			input: bytes.B32{},
+			want:  "0x0000000000000000000000000000000000000000000000000000000000000000",
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got, err := tt.input.MarshalText()
+			require.NoError(t, err)
+			require.Equal(t, tt.want, string(got))
+		})
+	}
+}
+
+func TestBytes32String(t *testing.T) {
+	tests := []struct {
+		name  string
+		input bytes.B32
+		want  string
+	}{
+		{
+			name: "valid input",
+			input: bytes.B32{0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
+				0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
+				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a,
+				0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20},
+			want: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
+		},
+		{
+			name:  "empty input",
+			input: bytes.B32{},
+			want:  "0x0000000000000000000000000000000000000000000000000000000000000000",
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got := tt.input.String()
+			require.Equal(t, tt.want, got)
+		})
+	}
+}
+
+func TestToBytes32(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   []byte
+		wantRes bytes.B32
+		wantErr error
+	}{
+		{
+			name:    "Input less than 32 bytes",
+			input:   []byte{1, 2, 3},
+			wantRes: bytes.B32{},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+		{
+			name:    "Input exactly 32 bytes",
+			input:   make([]byte, 32),
+			wantRes: bytes.B32{},
+			wantErr: nil,
+		},
+		{
+			name:    "Input more than 32 bytes",
+			input:   make([]byte, 40),
+			wantRes: bytes.B32{},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			result, err := bytes.ToBytes32(tt.input)
+			if tt.wantErr != nil {
+				require.ErrorIs(t, err, tt.wantErr)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.wantRes, result)
+			}
+		})
+	}
+}
+
 func TestB32MarshalSSZ(t *testing.T) {
 	tests := []struct {
 		name  string
@@ -49,8 +298,8 @@ func TestB32MarshalSSZ(t *testing.T) {
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			got, err := tt.input.MarshalSSZ()
-			require.NoError(t, err, "Test case: %s", tt.name)
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+			require.NoError(t, err)
+			require.Equal(t, tt.want, got)
 		})
 	}
 }
diff --git a/mod/primitives/pkg/bytes/b4.go b/mod/primitives/pkg/bytes/b4.go
index e9aac71b0..44e26b71e 100644
--- a/mod/primitives/pkg/bytes/b4.go
+++ b/mod/primitives/pkg/bytes/b4.go
@@ -22,6 +22,8 @@
 package bytes
 
 import (
+	"fmt"
+
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
 )
 
@@ -35,9 +37,17 @@ const (
 type B4 [4]byte
 
 // ToBytes4 is a utility function that transforms a byte slice into a fixed
-// 4-byte array. If the input exceeds 4 bytes, it gets truncated.
-func ToBytes4(input []byte) B4 {
-	return B4(ExtendToSize(input, B4Size))
+// 4-byte array. It errs if input has not the required size.
+func ToBytes4(input []byte) (B4, error) {
+	if len(input) != B4Size {
+		return B4{}, fmt.Errorf(
+			"%w, got %d, expected %d",
+			ErrIncorrectLength,
+			len(input),
+			B4Size,
+		)
+	}
+	return B4(input), nil
 }
 
 /* -------------------------------------------------------------------------- */
@@ -56,7 +66,7 @@ func (h *B4) UnmarshalText(text []byte) error {
 
 // String returns the hex string representation of B4.
 func (h B4) String() string {
-	return hex.FromBytes(h[:]).Unwrap()
+	return hex.EncodeBytes(h[:])
 }
 
 /* -------------------------------------------------------------------------- */
@@ -78,6 +88,6 @@ func (h B4) MarshalSSZ() ([]byte, error) {
 }
 
 // HashTreeRoot returns the hash tree root of the B8.
-func (h B4) HashTreeRoot() B32 {
-	return ToBytes32(h[:])
+func (h B4) HashTreeRoot() (B32, error) {
+	return ToBytes32(ExtendToSize(h[:], B32Size))
 }
diff --git a/mod/primitives/pkg/bytes/b48.go b/mod/primitives/pkg/bytes/b48.go
index 8f82085af..ddee763d1 100644
--- a/mod/primitives/pkg/bytes/b48.go
+++ b/mod/primitives/pkg/bytes/b48.go
@@ -22,6 +22,8 @@
 package bytes
 
 import (
+	"fmt"
+
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
 	"github.com/prysmaticlabs/gohashtree"
 )
@@ -36,9 +38,17 @@ const (
 type B48 [48]byte
 
 // ToBytes48 is a utility function that transforms a byte slice into a fixed
-// 48-byte array. If the input exceeds 48 bytes, it gets truncated.
-func ToBytes48(input []byte) B48 {
-	return B48(ExtendToSize(input, B48Size))
+// 48-byte array. It errs if input has not the required size.
+func ToBytes48(input []byte) (B48, error) {
+	if len(input) != B48Size {
+		return B48{}, fmt.Errorf(
+			"%w, got %d, expected %d",
+			ErrIncorrectLength,
+			len(input),
+			B48Size,
+		)
+	}
+	return B48(input), nil
 }
 
 /* -------------------------------------------------------------------------- */
@@ -57,7 +67,7 @@ func (h *B48) UnmarshalText(text []byte) error {
 
 // String returns the hex string representation of B48.
 func (h B48) String() string {
-	return hex.FromBytes(h[:]).Unwrap()
+	return hex.EncodeBytes(h[:])
 }
 
 /* -------------------------------------------------------------------------- */
diff --git a/mod/primitives/pkg/bytes/b48_test.go b/mod/primitives/pkg/bytes/b48_test.go
index 979b4b245..56615d7a7 100644
--- a/mod/primitives/pkg/bytes/b48_test.go
+++ b/mod/primitives/pkg/bytes/b48_test.go
@@ -18,6 +18,7 @@
 // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
 // TITLE.
 
+//nolint:lll // long strings.
 package bytes_test
 
 import (
@@ -28,6 +29,330 @@ import (
 	"github.com/stretchr/testify/require"
 )
 
+func TestBytes48String(t *testing.T) {
+	tests := []struct {
+		name  string
+		input bytes.B48
+		want  string
+	}{
+		{
+			name: "valid input",
+			input: bytes.B48{
+				0x01,
+				0x02,
+				0x03,
+				0x04,
+				0x05,
+				0x06,
+				0x07,
+				0x08,
+				0x09,
+				0x0a,
+				0x0b,
+				0x0c,
+				0x0d,
+				0x0e,
+				0x0f,
+				0x10,
+				0x11,
+				0x12,
+				0x13,
+				0x14,
+				0x15,
+				0x16,
+				0x17,
+				0x18,
+				0x19,
+				0x1a,
+				0x1b,
+				0x1c,
+				0x1d,
+				0x1e,
+				0x1f,
+				0x20,
+				0x21,
+				0x22,
+				0x23,
+				0x24,
+				0x25,
+				0x26,
+				0x27,
+				0x28,
+				0x29,
+				0x2a,
+				0x2b,
+				0x2c,
+				0x2d,
+				0x2e,
+				0x2f,
+				0x30,
+			},
+			want: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
+		},
+		{
+			name:  "empty input",
+			input: bytes.B48{},
+			want:  "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got := tt.input.String()
+			require.Equal(t, tt.want, got)
+		})
+	}
+}
+
+func TestBytes48MarshalText(t *testing.T) {
+	tests := []struct {
+		name  string
+		input bytes.B48
+		want  string
+	}{
+		{
+			name: "valid input",
+			input: bytes.B48{
+				0x01,
+				0x02,
+				0x03,
+				0x04,
+				0x05,
+				0x06,
+				0x07,
+				0x08,
+				0x09,
+				0x0a,
+				0x0b,
+				0x0c,
+				0x0d,
+				0x0e,
+				0x0f,
+				0x10,
+				0x11,
+				0x12,
+				0x13,
+				0x14,
+				0x15,
+				0x16,
+				0x17,
+				0x18,
+				0x19,
+				0x1a,
+				0x1b,
+				0x1c,
+				0x1d,
+				0x1e,
+				0x1f,
+				0x20,
+				0x21,
+				0x22,
+				0x23,
+				0x24,
+				0x25,
+				0x26,
+				0x27,
+				0x28,
+				0x29,
+				0x2a,
+				0x2b,
+				0x2c,
+				0x2d,
+				0x2e,
+				0x2f,
+				0x30,
+			},
+			want: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
+		},
+		{
+			name:  "empty input",
+			input: bytes.B48{},
+			want:  "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got, err := tt.input.MarshalText()
+			require.NoError(t, err)
+			require.Equal(t, tt.want, string(got))
+		})
+	}
+}
+
+func TestBytes48UnmarshalText(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   string
+		want    bytes.B48
+		wantErr bool
+	}{
+		{
+			name:  "valid input",
+			input: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
+			want: bytes.B48{
+				0x01,
+				0x02,
+				0x03,
+				0x04,
+				0x05,
+				0x06,
+				0x07,
+				0x08,
+				0x09,
+				0x0a,
+				0x0b,
+				0x0c,
+				0x0d,
+				0x0e,
+				0x0f,
+				0x10,
+				0x11,
+				0x12,
+				0x13,
+				0x14,
+				0x15,
+				0x16,
+				0x17,
+				0x18,
+				0x19,
+				0x1a,
+				0x1b,
+				0x1c,
+				0x1d,
+				0x1e,
+				0x1f,
+				0x20,
+				0x21,
+				0x22,
+				0x23,
+				0x24,
+				0x25,
+				0x26,
+				0x27,
+				0x28,
+				0x29,
+				0x2a,
+				0x2b,
+				0x2c,
+				0x2d,
+				0x2e,
+				0x2f,
+				0x30,
+			},
+		},
+		{
+			name:    "invalid input - not hex",
+			input:   "0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
+			wantErr: true,
+		},
+		{
+			name:    "invalid input - wrong length",
+			input:   "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e",
+			wantErr: true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var got bytes.B48
+			err := got.UnmarshalText([]byte(tt.input))
+			if tt.wantErr {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.want, got)
+			}
+		})
+	}
+}
+
+func TestToBytes48(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   []byte
+		wantRes bytes.B48
+		wantErr error
+	}{
+		{
+			name:    "Input less than 48 bytes",
+			input:   []byte{1, 2, 3},
+			wantRes: bytes.B48{},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+		{
+			name:    "Input exactly 48 bytes",
+			input:   make([]byte, 48),
+			wantRes: bytes.B48{},
+		},
+		{
+			name:    "Input more than 48 bytes",
+			input:   make([]byte, 60),
+			wantRes: bytes.B48{},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			result, err := bytes.ToBytes48(tt.input)
+			if tt.wantErr != nil {
+				require.ErrorIs(t, err, tt.wantErr)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.wantRes, result)
+			}
+		})
+	}
+}
+
+func TestB48UnmarshalJSON(t *testing.T) {
+	tests := []struct {
+		name     string
+		input    string
+		expected bytes.B48
+		wantErr  bool
+	}{
+		{
+			name:     "Valid input",
+			input:    `"0x010203000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"`,
+			expected: bytes.B48{1, 2, 3},
+			wantErr:  false,
+		},
+		{
+			name:     "Empty input",
+			input:    `"0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"`,
+			expected: bytes.B48{},
+			wantErr:  false,
+		},
+		{
+			name:     "Invalid input - not hex",
+			input:    `"invalid"`,
+			expected: bytes.B48{},
+			wantErr:  true,
+		},
+		{
+			name:     "Invalid input - odd length",
+			input:    `"0x010203"`,
+			expected: bytes.B48{},
+			wantErr:  true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var got bytes.B48
+			err := got.UnmarshalJSON([]byte(tt.input))
+			if tt.wantErr {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.expected, got)
+			}
+		})
+	}
+}
+
 func TestB48_HashTreeRoot(t *testing.T) {
 	tests := []struct {
 		name  string
@@ -75,8 +400,8 @@ func TestB48MarshalSSZ(t *testing.T) {
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			got, err := tt.input.MarshalSSZ()
-			require.NoError(t, err, "Test case: %s", tt.name)
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+			require.NoError(t, err)
+			require.Equal(t, tt.want, got)
 		})
 	}
 }
diff --git a/mod/primitives/pkg/bytes/b4_test.go b/mod/primitives/pkg/bytes/b4_test.go
new file mode 100644
index 000000000..2fbb3d25e
--- /dev/null
+++ b/mod/primitives/pkg/bytes/b4_test.go
@@ -0,0 +1,258 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package bytes_test
+
+import (
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
+	"github.com/stretchr/testify/require"
+)
+
+func TestBytes4UnmarshalJSON(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   string
+		want    bytes.B4
+		wantErr bool
+	}{
+		{
+			name:    "valid input",
+			input:   `"0x01020304"`,
+			want:    bytes.B4{0x01, 0x02, 0x03, 0x04},
+			wantErr: false,
+		},
+		{
+			name:    "invalid input - not hex",
+			input:   `"01020304"`,
+			wantErr: true,
+		},
+		{
+			name:    "invalid input - wrong length",
+			input:   `"0x010203"`,
+			wantErr: true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var got bytes.B4
+			err := got.UnmarshalJSON([]byte(tt.input))
+			if tt.wantErr {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.want, got)
+			}
+		})
+	}
+}
+
+func TestBytes4String(t *testing.T) {
+	tests := []struct {
+		name string
+		h    bytes.B4
+		want string
+	}{
+		{
+			name: "non-empty bytes",
+			h:    bytes.B4{0x01, 0x02, 0x03, 0x04},
+			want: "0x01020304",
+		},
+		{
+			name: "empty bytes",
+			h:    bytes.B4{},
+			want: "0x00000000",
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got := tt.h.String()
+			require.Equal(t, tt.want, got)
+		})
+	}
+}
+
+func TestBytes4MarshalText(t *testing.T) {
+	tests := []struct {
+		name string
+		h    bytes.B4
+		want string
+	}{
+		{
+			name: "valid bytes",
+			h:    bytes.B4{0x01, 0x02, 0x03, 0x04},
+			want: "0x01020304",
+		},
+		{
+			name: "all zeros",
+			h:    bytes.B4{0x00, 0x00, 0x00, 0x00},
+			want: "0x00000000",
+		},
+		{
+			name: "all ones",
+			h:    bytes.B4{0xFF, 0xFF, 0xFF, 0xFF},
+			want: "0xffffffff",
+		},
+		{
+			name: "mixed bytes",
+			h:    bytes.B4{0xAA, 0xBB, 0xCC, 0xDD},
+			want: "0xaabbccdd",
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got, err := tt.h.MarshalText()
+			require.NoError(t, err)
+			require.Equal(t, tt.want, string(got))
+		})
+	}
+}
+
+func TestBytes4UnmarshalText(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   string
+		want    bytes.B4
+		wantErr bool
+	}{
+		{
+			name:    "valid input",
+			input:   "0x01020304",
+			want:    bytes.B4{0x01, 0x02, 0x03, 0x04},
+			wantErr: false,
+		},
+		{
+			name:    "invalid input - not hex",
+			input:   "01020304",
+			wantErr: true,
+		},
+		{
+			name:    "invalid input - wrong length",
+			input:   "0x010203",
+			wantErr: true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var got bytes.B4
+			err := got.UnmarshalText([]byte(tt.input))
+			if tt.wantErr {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.want, got)
+			}
+		})
+	}
+}
+
+func TestToBytes4(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   []byte
+		wantRes bytes.B4
+		wantErr error
+	}{
+		{
+			name:    "Input less than 4 bytes",
+			input:   []byte{0x01, 0x02},
+			wantRes: bytes.B4{},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+		{
+			name:    "Input exactly 4 bytes",
+			input:   []byte{0x01, 0x02, 0x03, 0x04},
+			wantRes: bytes.B4{0x01, 0x02, 0x03, 0x04},
+		},
+		{
+			name:    "Input more than 4 bytes",
+			input:   []byte{0x01, 0x02, 0x03, 0x04, 0x05},
+			wantRes: bytes.B4{},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+		{
+			name:    "Empty input",
+			input:   []byte{},
+			wantRes: bytes.B4{},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			result, err := bytes.ToBytes4(tt.input)
+			if tt.wantErr != nil {
+				require.ErrorIs(t, err, tt.wantErr)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.wantRes, result)
+			}
+		})
+	}
+}
+
+func TestBytes4MarshalSSZ(t *testing.T) {
+	tests := []struct {
+		name  string
+		input bytes.B4
+		want  []byte
+	}{
+		{
+			name:  "marshal B4",
+			input: bytes.B4{0x01, 0x02, 0x03, 0x04},
+			want:  []byte{0x01, 0x02, 0x03, 0x04},
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got, err := tt.input.MarshalSSZ()
+			require.NoError(t, err)
+			require.Equal(t, tt.want, got)
+		})
+	}
+}
+
+func TestBytes4HashTreeRoot(t *testing.T) {
+	tests := []struct {
+		name  string
+		input bytes.B4
+		want  bytes.B32
+	}{
+		{
+			name:  "hash tree root",
+			input: bytes.B4{0x01, 0x02, 0x03, 0x04},
+			want:  bytes.B32{0x01, 0x02, 0x03, 0x04},
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got, err := tt.input.HashTreeRoot()
+			require.NoError(t, err)
+			require.Equal(t, tt.want, got)
+		})
+	}
+}
diff --git a/mod/primitives/pkg/bytes/b8.go b/mod/primitives/pkg/bytes/b8.go
index 38de94548..14252bfed 100644
--- a/mod/primitives/pkg/bytes/b8.go
+++ b/mod/primitives/pkg/bytes/b8.go
@@ -22,6 +22,8 @@
 package bytes
 
 import (
+	"fmt"
+
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
 )
 
@@ -35,9 +37,17 @@ const (
 type B8 [8]byte
 
 // ToBytes8 is a utility function that transforms a byte slice into a fixed
-// 8-byte array. If the input exceeds 8 bytes, it gets truncated.
-func ToBytes8(input []byte) B8 {
-	return B8(ExtendToSize(input, B8Size))
+// 8-byte array. It errs if input has not the required size.
+func ToBytes8(input []byte) (B8, error) {
+	if len(input) != B8Size {
+		return B8{}, fmt.Errorf(
+			"%w, got %d, expected %d",
+			ErrIncorrectLength,
+			len(input),
+			B8Size,
+		)
+	}
+	return B8(input), nil
 }
 
 /* -------------------------------------------------------------------------- */
@@ -56,7 +66,7 @@ func (h *B8) UnmarshalText(text []byte) error {
 
 // String returns the hex string representation of B8.
 func (h B8) String() string {
-	return hex.FromBytes(h[:]).Unwrap()
+	return hex.EncodeBytes(h[:])
 }
 
 /* -------------------------------------------------------------------------- */
@@ -78,6 +88,6 @@ func (h B8) MarshalSSZ() ([]byte, error) {
 }
 
 // HashTreeRoot returns the hash tree root of the B8.
-func (h B8) HashTreeRoot() B32 {
-	return ToBytes32(h[:])
+func (h B8) HashTreeRoot() (B32, error) {
+	return ToBytes32(ExtendToSize(h[:], B32Size))
 }
diff --git a/mod/primitives/pkg/bytes/b8_test.go b/mod/primitives/pkg/bytes/b8_test.go
index 8fac38bd6..91d49d776 100644
--- a/mod/primitives/pkg/bytes/b8_test.go
+++ b/mod/primitives/pkg/bytes/b8_test.go
@@ -27,6 +27,198 @@ import (
 	"github.com/stretchr/testify/require"
 )
 
+func TestBytes8UnmarshalJSON(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   string
+		want    bytes.B8
+		wantErr bool
+	}{
+		{
+			name:    "valid input",
+			input:   `"0x0102030405060708"`,
+			want:    bytes.B8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
+			wantErr: false,
+		},
+		{
+			name:    "invalid input - not hex",
+			input:   `"0102030405060708"`,
+			wantErr: true,
+		},
+		{
+			name:    "invalid input - wrong length",
+			input:   `"0x01020304"`,
+			wantErr: true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var got bytes.B8
+			err := got.UnmarshalJSON([]byte(tt.input))
+			if tt.wantErr {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+			}
+		})
+	}
+}
+
+func TestBytes8String(t *testing.T) {
+	tests := []struct {
+		name string
+		h    bytes.B8
+		want string
+	}{
+		{
+			name: "non-empty bytes",
+			h:    bytes.B8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
+			want: "0x0102030405060708",
+		},
+		{
+			name: "empty bytes",
+			h:    bytes.B8{},
+			want: "0x0000000000000000",
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got := tt.h.String()
+			require.Equal(t, tt.want, got)
+		})
+	}
+}
+
+func TestBytes8MarshalText(t *testing.T) {
+	tests := []struct {
+		name string
+		h    bytes.B8
+		want string
+	}{
+		{
+			name: "valid bytes",
+			h:    bytes.B8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
+			want: "0x0102030405060708",
+		},
+		{
+			name: "empty bytes",
+			h:    bytes.B8{},
+			want: "0x0000000000000000",
+		},
+		{
+			name: "all zeros",
+			h:    bytes.B8{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
+			want: "0x0000000000000000",
+		},
+		{
+			name: "all ones",
+			h:    bytes.B8{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
+			want: "0xffffffffffffffff",
+		},
+		{
+			name: "mixed bytes",
+			h:    bytes.B8{0xaa, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x11, 0x22},
+			want: "0xaabbccddeeff1122",
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got, err := tt.h.MarshalText()
+			require.NoError(t, err)
+			require.Equal(t, tt.want, string(got))
+		})
+	}
+}
+
+func TestBytes8UnmarshalText(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   string
+		want    bytes.B8
+		wantErr bool
+	}{
+		{
+			name:    "valid input",
+			input:   "0x0102030405060708",
+			want:    bytes.B8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
+			wantErr: false,
+		},
+		{
+			name:    "invalid input - not hex",
+			input:   "0102030405060708",
+			wantErr: true,
+		},
+		{
+			name:    "invalid input - wrong length",
+			input:   "0x01020304",
+			wantErr: true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var got bytes.B8
+			err := got.UnmarshalText([]byte(tt.input))
+			if tt.wantErr {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+			}
+		})
+	}
+}
+
+func TestToBytes8(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   []byte
+		wantRes bytes.B8
+		wantErr error
+	}{
+		{
+			name:    "Exact 8 bytes",
+			input:   []byte{1, 2, 3, 4, 5, 6, 7, 8},
+			wantRes: bytes.B8{1, 2, 3, 4, 5, 6, 7, 8},
+			wantErr: nil,
+		},
+		{
+			name:    "Less than 8 bytes",
+			input:   []byte{1, 2, 3, 4},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+		{
+			name:    "Two bytes",
+			input:   []byte{1, 2},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+		{
+			name:    "Empty input",
+			input:   []byte{},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+		{
+			name:    "More than 8 bytes",
+			input:   []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			result, err := bytes.ToBytes8(tt.input)
+			if tt.wantErr != nil {
+				require.ErrorIs(t, err, tt.wantErr)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.wantRes, result)
+			}
+		})
+	}
+}
+
 func TestBytes8MarshalSSZ(t *testing.T) {
 	tests := []struct {
 		name  string
@@ -43,8 +235,8 @@ func TestBytes8MarshalSSZ(t *testing.T) {
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			got, err := tt.input.MarshalSSZ()
-			require.NoError(t, err, "Test case: %s", tt.name)
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+			require.NoError(t, err)
+			require.Equal(t, tt.want, got)
 		})
 	}
 }
@@ -64,8 +256,9 @@ func TestBytes8HashTreeRoot(t *testing.T) {
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			got := tt.input.HashTreeRoot()
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+			got, err := tt.input.HashTreeRoot()
+			require.NoError(t, err)
+			require.Equal(t, tt.want, got)
 		})
 	}
 }
diff --git a/mod/primitives/pkg/bytes/b96.go b/mod/primitives/pkg/bytes/b96.go
index 952c6803f..5e7d313a9 100644
--- a/mod/primitives/pkg/bytes/b96.go
+++ b/mod/primitives/pkg/bytes/b96.go
@@ -22,6 +22,8 @@
 package bytes
 
 import (
+	"fmt"
+
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
 	"github.com/prysmaticlabs/gohashtree"
 )
@@ -36,9 +38,17 @@ const (
 type B96 [96]byte
 
 // ToBytes96 is a utility function that transforms a byte slice into a fixed
-// 96-byte array. If the input exceeds 96 bytes, it gets truncated.
-func ToBytes96(input []byte) B96 {
-	return B96(ExtendToSize(input, B96Size))
+// 96-byte array. It errs if input has not the required size.
+func ToBytes96(input []byte) (B96, error) {
+	if len(input) != B96Size {
+		return B96{}, fmt.Errorf(
+			"%w, got %d, expected %d",
+			ErrIncorrectLength,
+			len(input),
+			B96Size,
+		)
+	}
+	return B96(input), nil
 }
 
 /* -------------------------------------------------------------------------- */
@@ -57,7 +67,7 @@ func (h *B96) UnmarshalText(text []byte) error {
 
 // String returns the hex string representation of B96.
 func (h *B96) String() string {
-	return hex.FromBytes(h[:]).Unwrap()
+	return hex.EncodeBytes(h[:])
 }
 
 /* -------------------------------------------------------------------------- */
diff --git a/mod/primitives/pkg/bytes/b96_test.go b/mod/primitives/pkg/bytes/b96_test.go
index d8e5f1f89..57c414476 100644
--- a/mod/primitives/pkg/bytes/b96_test.go
+++ b/mod/primitives/pkg/bytes/b96_test.go
@@ -22,6 +22,8 @@
 package bytes_test
 
 import (
+	"fmt"
+	"strings"
 	"testing"
 
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
@@ -30,6 +32,214 @@ import (
 	"github.com/stretchr/testify/require"
 )
 
+func TestBytes96UnmarshalText(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   string
+		want    bytes.B96
+		wantErr bool
+	}{
+		{
+			name:  "valid input",
+			input: "0x" + strings.Repeat("01", 96),
+			want: func() bytes.B96 {
+				var b bytes.B96
+				for i := range b {
+					b[i] = 0x01
+				}
+				return b
+			}(),
+		},
+		{
+			name:    "invalid input - not hex",
+			input:   strings.Repeat("01", 96),
+			wantErr: true,
+		},
+		{
+			name:    "invalid input - wrong length",
+			input:   "0x" + strings.Repeat("01", 95),
+			wantErr: true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var got bytes.B96
+			err := got.UnmarshalText([]byte(tt.input))
+			if tt.wantErr {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.want, got)
+			}
+		})
+	}
+}
+
+func TestBytes96UnmarshalJSON(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   string
+		want    bytes.B96
+		wantErr bool
+	}{
+		{
+			name:  "valid input",
+			input: `"0x` + strings.Repeat("01", 96) + `"`,
+			want: func() bytes.B96 {
+				var b bytes.B96
+				for i := range b {
+					b[i] = 0x01
+				}
+				return b
+			}(),
+		},
+		{
+			name:    "invalid input - not hex",
+			input:   `"` + strings.Repeat("01", 96) + `"`,
+			wantErr: true,
+		},
+		{
+			name:    "invalid input - wrong length",
+			input:   `"0x` + strings.Repeat("01", 95) + `"`,
+			wantErr: true,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var got bytes.B96
+			err := got.UnmarshalJSON([]byte(tt.input))
+			if tt.wantErr {
+				require.Error(t, err)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.want, got)
+			}
+		})
+	}
+}
+func TestBytes96MarshalText(t *testing.T) {
+	tests := []struct {
+		name string
+		h    bytes.B96
+		want string
+	}{
+		{
+			name: "valid bytes",
+			h: func() bytes.B96 {
+				var b bytes.B96
+				for i := range b {
+					b[i] = 0x01
+				}
+				return b
+			}(),
+			want: "0x" + strings.Repeat("01", 96),
+		},
+		{
+			name: "empty bytes",
+			h:    bytes.B96{},
+			want: "0x" + strings.Repeat("00", 96),
+		},
+		{
+			name: "mixed bytes",
+			h: func() bytes.B96 {
+				var b bytes.B96
+				for i := 0; i < len(b); i++ {
+					b[i] = byte(i % 256)
+				}
+				return b
+			}(),
+			want: "0x" + func() string {
+				var s string
+				for i := range 96 {
+					s += fmt.Sprintf("%02x", i%256)
+				}
+				return s
+			}(),
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got, err := tt.h.MarshalText()
+			require.NoError(t, err)
+			require.Equal(t, tt.want, string(got))
+		})
+	}
+}
+
+func TestBytes96String(t *testing.T) {
+	tests := []struct {
+		name string
+		h    bytes.B96
+		want string
+	}{
+		{
+			name: "non-empty bytes",
+			h: func() bytes.B96 {
+				var b bytes.B96
+				for i := range b {
+					b[i] = 0x01
+				}
+				return b
+			}(),
+			want: "0x" + strings.Repeat("01", 96),
+		},
+		{
+			name: "empty bytes",
+			h:    bytes.B96{},
+			want: "0x" + strings.Repeat("00", 96),
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got := tt.h.String()
+			require.Equal(t, tt.want, got)
+		})
+	}
+}
+
+func TestToBytes96(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   []byte
+		wantRes bytes.B96
+		wantErr error
+	}{
+		{
+			name:    "Input less than 96 bytes",
+			input:   []byte{1, 2, 3},
+			wantRes: bytes.B96{},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+		{
+			name:    "Input exactly 96 bytes",
+			input:   make([]byte, 96),
+			wantRes: bytes.B96{},
+		},
+		{
+			name:    "Input more than 96 bytes",
+			input:   make([]byte, 100),
+			wantRes: bytes.B96{},
+			wantErr: bytes.ErrIncorrectLength,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			result, err := bytes.ToBytes96(tt.input)
+			if tt.wantErr != nil {
+				require.ErrorIs(t, err, tt.wantErr)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.wantRes, result)
+			}
+		})
+	}
+}
+
 func TestB96_HashTreeRoot(t *testing.T) {
 	tests := []struct {
 		name  string
@@ -107,8 +317,8 @@ func TestB96MarshalSSZ(t *testing.T) {
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			got, err := tt.input.MarshalSSZ()
-			require.NoError(t, err, "Test case: %s", tt.name)
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+			require.NoError(t, err)
+			require.Equal(t, tt.want, got)
 		})
 	}
 }
diff --git a/mod/primitives/pkg/bytes/b_test.go b/mod/primitives/pkg/bytes/b_test.go
index 612d72cd6..ab425b86a 100644
--- a/mod/primitives/pkg/bytes/b_test.go
+++ b/mod/primitives/pkg/bytes/b_test.go
@@ -18,14 +18,11 @@
 // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
 // TITLE.
 
-//nolint:lll // long strings.
 package bytes_test
 
 import (
-	stdbytes "bytes"
-	"fmt"
+	stdhex "encoding/hex"
 	"reflect"
-	"strings"
 	"testing"
 
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
@@ -35,1117 +32,140 @@ import (
 
 func TestFromHex(t *testing.T) {
 	tests := []struct {
-		name    string
-		input   string
-		want    bytes.Bytes
-		wantErr bool
-	}{
-		{
-			name:    "Valid hex string",
-			input:   "0x48656c6c6f",
-			want:    bytes.Bytes{0x48, 0x65, 0x6c, 0x6c, 0x6f},
-			wantErr: false,
-		},
-		{
-			name:    "Empty hex string",
-			input:   "0x",
-			want:    bytes.Bytes{},
-			wantErr: false,
-		},
-		{
-			name:    "Invalid hex string - odd length",
-			input:   "0x12345",
-			want:    nil,
-			wantErr: true,
-		},
-		{
-			name:    "Invalid hex string - no 0x prefix",
-			input:   "12345",
-			want:    nil,
-			wantErr: true,
-		},
-		{
-			name:    "Empty input string",
-			input:   "",
-			want:    nil,
-			wantErr: true,
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			got, err := hex.ToBytes(tt.input)
-			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
-			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.True(t, stdbytes.Equal(got, tt.want), "Test case: %s", tt.name)
-			}
-		})
-	}
-}
-
-func TestMustFromHex(t *testing.T) {
-	tests := []struct {
-		name        string
-		input       string
-		expected    bytes.Bytes
-		shouldPanic bool
-	}{
-		{
-			name:        "Valid hex string",
-			input:       "0x48656c6c6f",
-			expected:    bytes.Bytes{0x48, 0x65, 0x6c, 0x6c, 0x6f},
-			shouldPanic: false,
-		},
-		{
-			name:        "Empty hex string",
-			input:       "0x",
-			expected:    bytes.Bytes{},
-			shouldPanic: false,
-		},
-		{
-			name:        "Invalid hex string",
-			input:       "0x12345",
-			expected:    nil,
-			shouldPanic: true,
-		},
-	}
-
-	for _, test := range tests {
-		t.Run(test.name, func(t *testing.T) {
-			if test.shouldPanic {
-				defer func() {
-					if r := recover(); r == nil {
-						t.Errorf(
-							"MustFromHex did not panic for input: %s",
-							test.input,
-						)
-					}
-				}()
-				_ = hex.MustToBytes(test.input)
-			} else {
-				result := hex.MustToBytes(test.input)
-				require.True(t, stdbytes.Equal(result, test.expected), "Test case %s", test.name)
-			}
-		})
-	}
-}
-
-func TestReverseEndianness(t *testing.T) {
-	tests := []struct {
-		name     string
-		input    []byte
-		expected []byte
-	}{
-		{name: "Even length",
-			input:    []byte{1, 2, 3, 4},
-			expected: []byte{4, 3, 2, 1}},
-		{name: "Odd length",
-			input:    []byte{1, 2, 3, 4, 5},
-			expected: []byte{5, 4, 3, 2, 1}},
-		{name: "Empty slice",
-			input:    []byte{},
-			expected: []byte{}},
-		{name: "Single element",
-			input:    []byte{1},
-			expected: []byte{1}},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			result := bytes.CopyAndReverseEndianess(tt.input)
-			require.Equal(t, tt.expected, result, "Test case %s", tt.name)
-		})
-	}
-}
-
-func TestBytes4UnmarshalJSON(t *testing.T) {
-	tests := []struct {
-		name    string
-		input   string
-		want    bytes.B4
-		wantErr bool
-	}{
-		{
-			name:    "valid input",
-			input:   `"0x01020304"`,
-			want:    bytes.B4{0x01, 0x02, 0x03, 0x04},
-			wantErr: false,
-		},
-		{
-			name:    "invalid input - not hex",
-			input:   `"01020304"`,
-			wantErr: true,
-		},
-		{
-			name:    "invalid input - wrong length",
-			input:   `"0x010203"`,
-			wantErr: true,
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			var got bytes.B4
-			err := got.UnmarshalJSON([]byte(tt.input))
-			if tt.wantErr {
-				require.Error(t, err, "Test case %s", tt.name)
-			} else {
-				require.NoError(t, err, "Test case %s", tt.name)
-				require.Equal(t, tt.want, got, "Test case %s", tt.name)
-			}
-		})
-	}
-}
-
-func TestBytes4String(t *testing.T) {
-	tests := []struct {
-		name string
-		h    bytes.B4
-		want string
-	}{
-		{
-			name: "non-empty bytes",
-			h:    bytes.B4{0x01, 0x02, 0x03, 0x04},
-			want: "0x01020304",
-		},
-		{
-			name: "empty bytes",
-			h:    bytes.B4{},
-			want: "0x00000000",
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			got := tt.h.String()
-			require.Equal(t, tt.want, got, "Test case %s", tt.name)
-		})
-	}
-}
-
-func TestBytes4MarshalText(t *testing.T) {
-	tests := []struct {
-		name string
-		h    bytes.B4
-		want string
-	}{
-		{
-			name: "valid bytes",
-			h:    bytes.B4{0x01, 0x02, 0x03, 0x04},
-			want: "0x01020304",
-		},
-		{
-			name: "all zeros",
-			h:    bytes.B4{0x00, 0x00, 0x00, 0x00},
-			want: "0x00000000",
-		},
-		{
-			name: "all ones",
-			h:    bytes.B4{0xFF, 0xFF, 0xFF, 0xFF},
-			want: "0xffffffff",
-		},
-		{
-			name: "mixed bytes",
-			h:    bytes.B4{0xAA, 0xBB, 0xCC, 0xDD},
-			want: "0xaabbccdd",
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			got, err := tt.h.MarshalText()
-			require.NoError(t, err, "Test case %s", tt.name)
-			require.Equal(t, tt.want, string(got), "Test case %s", tt.name)
-		})
-	}
-}
-
-func TestBytes4UnmarshalText(t *testing.T) {
-	tests := []struct {
-		name    string
-		input   string
-		want    bytes.B4
-		wantErr bool
-	}{
-		{
-			name:    "valid input",
-			input:   "0x01020304",
-			want:    bytes.B4{0x01, 0x02, 0x03, 0x04},
-			wantErr: false,
-		},
-		{
-			name:    "invalid input - not hex",
-			input:   "01020304",
-			wantErr: true,
-		},
-		{
-			name:    "invalid input - wrong length",
-			input:   "0x010203",
-			wantErr: true,
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			var got bytes.B4
-			err := got.UnmarshalText([]byte(tt.input))
-			if tt.wantErr {
-				require.Error(t, err, "Test case %s", tt.name)
-			} else {
-				require.NoError(t, err, "Test case %s", tt.name)
-				require.Equal(t, tt.want, got, "Test case %s", tt.name)
-			}
-		})
-	}
-}
-func TestToBytes4(t *testing.T) {
-	tests := []struct {
-		name     string
-		input    []byte
-		expected bytes.B4
-	}{
-		{
-			name:     "Input less than 4 bytes",
-			input:    []byte{0x01, 0x02},
-			expected: bytes.B4{0x01, 0x02, 0x00, 0x00},
-		},
-		{
-			name:     "Input exactly 4 bytes",
-			input:    []byte{0x01, 0x02, 0x03, 0x04},
-			expected: bytes.B4{0x01, 0x02, 0x03, 0x04},
-		},
-		{
-			name:     "Input more than 4 bytes",
-			input:    []byte{0x01, 0x02, 0x03, 0x04, 0x05},
-			expected: bytes.B4{0x01, 0x02, 0x03, 0x04},
-		},
-		{
-			name:     "Empty input",
-			input:    []byte{},
-			expected: bytes.B4{0x00, 0x00, 0x00, 0x00},
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			result := bytes.ToBytes4(tt.input)
-			require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
-		})
-	}
-}
-func TestBytes32UnmarshalText(t *testing.T) {
-	tests := []struct {
-		name    string
-		input   string
-		want    bytes.B32
-		wantErr bool
-	}{
-		{
-			name:  "valid input",
-			input: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
-			want: bytes.B32{
-				0x01,
-				0x02,
-				0x03,
-				0x04,
-				0x05,
-				0x06,
-				0x07,
-				0x08,
-				0x09,
-				0x0a,
-				0x0b,
-				0x0c,
-				0x0d,
-				0x0e,
-				0x0f,
-				0x10,
-				0x11,
-				0x12,
-				0x13,
-				0x14,
-				0x15,
-				0x16,
-				0x17,
-				0x18,
-				0x19,
-				0x1a,
-				0x1b,
-				0x1c,
-				0x1d,
-				0x1e,
-				0x1f,
-				0x20,
-			},
-			wantErr: false,
-		},
-		{
-			name:    "invalid input - not hex",
-			input:   "0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
-			wantErr: true,
-		},
-		{
-			name:    "invalid input - wrong length",
-			input:   "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
-			wantErr: true,
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			var got bytes.B32
-			err := got.UnmarshalText([]byte(tt.input))
-			if tt.wantErr {
-				require.Error(t, err, "Test case %s", tt.name)
-			} else {
-				require.NoError(t, err)
-				require.Equal(t, tt.want, got, "Test case %s", tt.name)
-			}
-		})
-	}
-}
-
-func TestBytes32UnmarshalJSON(t *testing.T) {
-	tests := []struct {
-		name    string
-		input   string
-		want    bytes.B32
-		wantErr bool
-	}{
-		{
-			name:  "valid input",
-			input: `"0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20"`,
-			want: bytes.B32{
-				0x01,
-				0x02,
-				0x03,
-				0x04,
-				0x05,
-				0x06,
-				0x07,
-				0x08,
-				0x09,
-				0x0a,
-				0x0b,
-				0x0c,
-				0x0d,
-				0x0e,
-				0x0f,
-				0x10,
-				0x11,
-				0x12,
-				0x13,
-				0x14,
-				0x15,
-				0x16,
-				0x17,
-				0x18,
-				0x19,
-				0x1a,
-				0x1b,
-				0x1c,
-				0x1d,
-				0x1e,
-				0x1f,
-				0x20,
-			},
-			wantErr: false,
-		},
-		{
-			name:    "invalid input - not hex",
-			input:   `"0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20"`,
-			wantErr: true,
-		},
-		{
-			name:    "invalid input - wrong length",
-			input:   `"0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"`,
-			wantErr: true,
-		},
-		{
-			name:    "invalid input - extra characters",
-			input:   `"0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122"`,
-			wantErr: true,
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			var got bytes.B32
-			err := got.UnmarshalJSON([]byte(tt.input))
-			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
-			} else {
-				require.NoError(t, err)
-				require.Equal(t, tt.want, got, "Test case: %s", tt.name)
-			}
-		})
-	}
-}
-
-func TestBytes32MarshalText(t *testing.T) {
-	tests := []struct {
-		name  string
-		input bytes.B32
-		want  string
-	}{
-		{
-			name: "valid input",
-			input: bytes.B32{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
-				0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12,
-				0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
-				0x1e, 0x1f, 0x20},
-			want: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
-		},
-		{
-			name:  "empty input",
-			input: bytes.B32{},
-			want:  "0x0000000000000000000000000000000000000000000000000000000000000000",
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			got, err := tt.input.MarshalText()
-			require.NoError(t, err, "Test case: %s", tt.name)
-			require.Equal(t, tt.want, string(got), "Test case: %s", tt.name)
-		})
-	}
-}
-
-func TestBytes32String(t *testing.T) {
-	tests := []struct {
-		name  string
-		input bytes.B32
-		want  string
-	}{
-		{
-			name: "valid input",
-			input: bytes.B32{0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
-				0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
-				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a,
-				0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20},
-			want: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20",
-		},
-		{
-			name:  "empty input",
-			input: bytes.B32{},
-			want:  "0x0000000000000000000000000000000000000000000000000000000000000000",
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			got := tt.input.String()
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
-		})
-	}
-}
-
-func TestToBytes32(t *testing.T) {
-	tests := []struct {
-		name     string
-		input    []byte
-		expected bytes.B32
-	}{
-		{
-			name:     "Input less than 32 bytes",
-			input:    []byte{1, 2, 3},
-			expected: bytes.B32{1, 2, 3},
-		},
-		{
-			name:     "Input exactly 32 bytes",
-			input:    make([]byte, 32),
-			expected: bytes.B32{},
-		},
-		{
-			name:     "Input more than 32 bytes",
-			input:    make([]byte, 40),
-			expected: bytes.B32{},
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			result := bytes.ToBytes32(tt.input)
-			require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
-		})
-	}
-}
-
-func TestHashTreeRoot(t *testing.T) {
-	tests := []struct {
-		name  string
-		input bytes.B32
-		want  bytes.B32
-	}{
-		{
-			name:  "Non-empty input",
-			input: bytes.B32{1, 2, 3},
-			want:  [32]byte{1, 2, 3},
-		},
-		{
-			name:  "Empty input",
-			input: bytes.B32{},
-			want:  [32]byte{},
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			result := tt.input.HashTreeRoot()
-			require.Equal(t, tt.want, result, "Test case: %s", tt.name)
-		})
-	}
-}
-
-func TestBytes48String(t *testing.T) {
-	tests := []struct {
-		name  string
-		input bytes.B48
-		want  string
-	}{
-		{
-			name: "valid input",
-			input: bytes.B48{
-				0x01,
-				0x02,
-				0x03,
-				0x04,
-				0x05,
-				0x06,
-				0x07,
-				0x08,
-				0x09,
-				0x0a,
-				0x0b,
-				0x0c,
-				0x0d,
-				0x0e,
-				0x0f,
-				0x10,
-				0x11,
-				0x12,
-				0x13,
-				0x14,
-				0x15,
-				0x16,
-				0x17,
-				0x18,
-				0x19,
-				0x1a,
-				0x1b,
-				0x1c,
-				0x1d,
-				0x1e,
-				0x1f,
-				0x20,
-				0x21,
-				0x22,
-				0x23,
-				0x24,
-				0x25,
-				0x26,
-				0x27,
-				0x28,
-				0x29,
-				0x2a,
-				0x2b,
-				0x2c,
-				0x2d,
-				0x2e,
-				0x2f,
-				0x30,
-			},
-			want: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
-		},
-		{
-			name:  "empty input",
-			input: bytes.B48{},
-			want:  "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			got := tt.input.String()
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
-		})
-	}
-}
-
-func TestBytes48MarshalText(t *testing.T) {
-	tests := []struct {
-		name  string
-		input bytes.B48
-		want  string
+		name       string
+		input      string
+		wantOutput bytes.Bytes
+		wantErr    error
 	}{
 		{
-			name: "valid input",
-			input: bytes.B48{
-				0x01,
-				0x02,
-				0x03,
-				0x04,
-				0x05,
-				0x06,
-				0x07,
-				0x08,
-				0x09,
-				0x0a,
-				0x0b,
-				0x0c,
-				0x0d,
-				0x0e,
-				0x0f,
-				0x10,
-				0x11,
-				0x12,
-				0x13,
-				0x14,
-				0x15,
-				0x16,
-				0x17,
-				0x18,
-				0x19,
-				0x1a,
-				0x1b,
-				0x1c,
-				0x1d,
-				0x1e,
-				0x1f,
-				0x20,
-				0x21,
-				0x22,
-				0x23,
-				0x24,
-				0x25,
-				0x26,
-				0x27,
-				0x28,
-				0x29,
-				0x2a,
-				0x2b,
-				0x2c,
-				0x2d,
-				0x2e,
-				0x2f,
-				0x30,
-			},
-			want: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
+			name:       "Valid hex string",
+			input:      "0x48656c6c6f",
+			wantOutput: bytes.Bytes{0x48, 0x65, 0x6c, 0x6c, 0x6f},
+			wantErr:    nil,
 		},
 		{
-			name:  "empty input",
-			input: bytes.B48{},
-			want:  "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+			name:       "Empty hex string",
+			input:      "0x",
+			wantOutput: bytes.Bytes{},
+			wantErr:    nil,
 		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			got, err := tt.input.MarshalText()
-			require.NoError(t, err, "Test case: %s", tt.name)
-			require.Equal(t, tt.want, string(got), "Test case: %s", tt.name)
-		})
-	}
-}
-
-func TestBytes48UnmarshalText(t *testing.T) {
-	tests := []struct {
-		name    string
-		input   string
-		want    bytes.B48
-		wantErr bool
-	}{
 		{
-			name:  "valid input",
-			input: "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
-			want: bytes.B48{
-				0x01,
-				0x02,
-				0x03,
-				0x04,
-				0x05,
-				0x06,
-				0x07,
-				0x08,
-				0x09,
-				0x0a,
-				0x0b,
-				0x0c,
-				0x0d,
-				0x0e,
-				0x0f,
-				0x10,
-				0x11,
-				0x12,
-				0x13,
-				0x14,
-				0x15,
-				0x16,
-				0x17,
-				0x18,
-				0x19,
-				0x1a,
-				0x1b,
-				0x1c,
-				0x1d,
-				0x1e,
-				0x1f,
-				0x20,
-				0x21,
-				0x22,
-				0x23,
-				0x24,
-				0x25,
-				0x26,
-				0x27,
-				0x28,
-				0x29,
-				0x2a,
-				0x2b,
-				0x2c,
-				0x2d,
-				0x2e,
-				0x2f,
-				0x30,
-			},
+			name:       "Invalid hex string - odd length",
+			input:      "0x12345",
+			wantOutput: nil,
+			wantErr:    stdhex.ErrLength,
 		},
 		{
-			name:    "invalid input - not hex",
-			input:   "0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30",
-			wantErr: true,
+			name:       "Invalid hex string - no 0x prefix",
+			input:      "12345",
+			wantOutput: nil,
+			wantErr:    hex.ErrMissingPrefix,
 		},
 		{
-			name:    "invalid input - wrong length",
-			input:   "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e",
-			wantErr: true,
+			name:       "Empty input string",
+			input:      "",
+			wantOutput: nil,
+			wantErr:    hex.ErrEmptyString,
 		},
 	}
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			var got bytes.B48
-			err := got.UnmarshalText([]byte(tt.input))
-			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
+			got, err := hex.ToBytes(tt.input)
+			if tt.wantErr != nil {
+				require.ErrorIs(t, err, tt.wantErr)
 			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+				require.NoError(t, err)
+				require.Equal(t, tt.wantOutput, bytes.Bytes(got))
 			}
 		})
 	}
 }
 
-func TestToBytes48(t *testing.T) {
-	tests := []struct {
-		name     string
-		input    []byte
-		expected bytes.B48
-	}{
-		{
-			name:     "Input less than 48 bytes",
-			input:    []byte{1, 2, 3},
-			expected: bytes.B48{1, 2, 3},
-		},
-		{
-			name:     "Input exactly 48 bytes",
-			input:    make([]byte, 48),
-			expected: bytes.B48{},
-		},
-		{
-			name:     "Input more than 48 bytes",
-			input:    make([]byte, 60),
-			expected: bytes.B48{},
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			result := bytes.ToBytes48(tt.input)
-			require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
-		})
-	}
-}
-
-func TestUnmarshalJSON(t *testing.T) {
+func TestMustFromHex(t *testing.T) {
 	tests := []struct {
-		name     string
-		input    string
-		expected bytes.B48
-		wantErr  bool
+		name        string
+		input       string
+		expected    []byte
+		shouldPanic bool
 	}{
 		{
-			name:     "Valid input",
-			input:    `"0x010203000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"`,
-			expected: bytes.B48{1, 2, 3},
-			wantErr:  false,
-		},
-		{
-			name:     "Empty input",
-			input:    `"0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"`,
-			expected: bytes.B48{},
-			wantErr:  false,
-		},
-		{
-			name:     "Invalid input - not hex",
-			input:    `"invalid"`,
-			expected: bytes.B48{},
-			wantErr:  true,
-		},
-		{
-			name:     "Invalid input - odd length",
-			input:    `"0x010203"`,
-			expected: bytes.B48{},
-			wantErr:  true,
+			name:        "Valid hex string",
+			input:       "0x68656c6c6f",
+			expected:    bytes.Bytes("hello"),
+			shouldPanic: false,
 		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			var got bytes.B48
-			err := got.UnmarshalJSON([]byte(tt.input))
-			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
-			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.Equal(t, tt.expected, got, "Test case: %s", tt.name)
-			}
-		})
-	}
-}
-
-func TestBytes96UnmarshalText(t *testing.T) {
-	tests := []struct {
-		name    string
-		input   string
-		want    bytes.B96
-		wantErr bool
-	}{
 		{
-			name:  "valid input",
-			input: "0x" + strings.Repeat("01", 96),
-			want: func() bytes.B96 {
-				var b bytes.B96
-				for i := range b {
-					b[i] = 0x01
-				}
-				return b
-			}(),
+			name:        "Another valid hex string",
+			input:       "0x776f726c64",
+			expected:    bytes.Bytes("world"),
+			shouldPanic: false,
 		},
 		{
-			name:    "invalid input - not hex",
-			input:   strings.Repeat("01", 96),
-			wantErr: true,
+			name:        "Empty hex string",
+			input:       "0x",
+			expected:    bytes.Bytes{},
+			shouldPanic: false,
 		},
 		{
-			name:    "invalid input - wrong length",
-			input:   "0x" + strings.Repeat("01", 95),
-			wantErr: true,
+			name:        "Invalid hex string",
+			input:       "0x12345",
+			expected:    nil,
+			shouldPanic: true,
 		},
 	}
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			var got bytes.B96
-			err := got.UnmarshalText([]byte(tt.input))
-			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
-			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.Equal(t, tt.want, got, "Test case: %s", tt.name)
-			}
-		})
-	}
-}
-
-func TestBytes96UnmarshalJSON(t *testing.T) {
-	tests := []struct {
-		name    string
-		input   string
-		want    bytes.B96
-		wantErr bool
-	}{
-		{
-			name:  "valid input",
-			input: `"0x` + strings.Repeat("01", 96) + `"`,
-			want: func() bytes.B96 {
-				var b bytes.B96
-				for i := range b {
-					b[i] = 0x01
+			var (
+				res []byte
+				f   = func() {
+					res = hex.MustToBytes(tt.input)
 				}
-				return b
-			}(),
-		},
-		{
-			name:    "invalid input - not hex",
-			input:   `"` + strings.Repeat("01", 96) + `"`,
-			wantErr: true,
-		},
-		{
-			name:    "invalid input - wrong length",
-			input:   `"0x` + strings.Repeat("01", 95) + `"`,
-			wantErr: true,
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			var got bytes.B96
-			err := got.UnmarshalJSON([]byte(tt.input))
-			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
+			)
+			if tt.shouldPanic {
+				require.Panics(t, f)
 			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.Equal(t, tt.want, got, "Test case: %s", tt.name)
+				require.NotPanics(t, f)
+				require.Equal(t, tt.expected, res)
 			}
 		})
 	}
 }
-func TestBytes96MarshalText(t *testing.T) {
-	tests := []struct {
-		name string
-		h    bytes.B96
-		want string
-	}{
-		{
-			name: "valid bytes",
-			h: func() bytes.B96 {
-				var b bytes.B96
-				for i := range b {
-					b[i] = 0x01
-				}
-				return b
-			}(),
-			want: "0x" + strings.Repeat("01", 96),
-		},
-		{
-			name: "empty bytes",
-			h:    bytes.B96{},
-			want: "0x" + strings.Repeat("00", 96),
-		},
-		{
-			name: "mixed bytes",
-			h: func() bytes.B96 {
-				var b bytes.B96
-				for i := 0; i < len(b); i++ {
-					b[i] = byte(i % 256)
-				}
-				return b
-			}(),
-			want: "0x" + func() string {
-				var s string
-				for i := range 96 {
-					s += fmt.Sprintf("%02x", i%256)
-				}
-				return s
-			}(),
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			got, err := tt.h.MarshalText()
-			require.NoError(t, err, "Test case: %s", tt.name)
-			require.Equal(t, tt.want, string(got), "Test case: %s", tt.name)
-		})
-	}
-}
-
-func TestBytes96String(t *testing.T) {
-	tests := []struct {
-		name string
-		h    bytes.B96
-		want string
-	}{
-		{
-			name: "non-empty bytes",
-			h: func() bytes.B96 {
-				var b bytes.B96
-				for i := range b {
-					b[i] = 0x01
-				}
-				return b
-			}(),
-			want: "0x" + strings.Repeat("01", 96),
-		},
-		{
-			name: "empty bytes",
-			h:    bytes.B96{},
-			want: "0x" + strings.Repeat("00", 96),
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			got := tt.h.String()
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
-		})
-	}
-}
 
-func TestToBytes96(t *testing.T) {
+func TestBytesUnmarshalJSONText(t *testing.T) {
 	tests := []struct {
-		name     string
-		input    []byte
-		expected bytes.B96
+		name      string
+		input     []byte
+		expectErr bool
 	}{
 		{
-			name:     "Input less than 96 bytes",
-			input:    []byte{1, 2, 3},
-			expected: bytes.B96{1, 2, 3},
-		},
-		{
-			name:     "Input exactly 96 bytes",
-			input:    make([]byte, 96),
-			expected: bytes.B96{},
-		},
-		{
-			name:     "Input more than 96 bytes",
-			input:    make([]byte, 100),
-			expected: bytes.B96{},
+			name:      "Valid JSON text",
+			input:     []byte(`"0x48656c6c6f"`),
+			expectErr: false,
 		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			result := bytes.ToBytes96(tt.input)
-			require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
-		})
-	}
-}
-
-func TestBytes8UnmarshalJSON(t *testing.T) {
-	tests := []struct {
-		name    string
-		input   string
-		want    bytes.B8
-		wantErr bool
-	}{
 		{
-			name:    "valid input",
-			input:   `"0x0102030405060708"`,
-			want:    bytes.B8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
-			wantErr: false,
+			name:      "Invalid JSON text",
+			input:     []byte(`"invalid"`),
+			expectErr: true,
 		},
 		{
-			name:    "invalid input - not hex",
-			input:   `"0102030405060708"`,
-			wantErr: true,
+			name:      "Invalid quoted JSON text",
+			input:     []byte(`"0x`),
+			expectErr: true,
 		},
 		{
-			name:    "invalid input - wrong length",
-			input:   `"0x01020304"`,
-			wantErr: true,
+			name:      "Empty JSON text",
+			input:     []byte(`""`),
+			expectErr: false,
 		},
 	}
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			var got bytes.B8
-			err := got.UnmarshalJSON([]byte(tt.input))
-			if tt.wantErr {
+			b := &bytes.Bytes{}
+			err := b.UnmarshalJSON(tt.input)
+			if tt.expectErr {
 				require.Error(t, err)
 			} else {
 				require.NoError(t, err)
@@ -1154,148 +174,56 @@ func TestBytes8UnmarshalJSON(t *testing.T) {
 	}
 }
 
-func TestBytes8String(t *testing.T) {
-	tests := []struct {
-		name string
-		h    bytes.B8
-		want string
-	}{
-		{
-			name: "non-empty bytes",
-			h:    bytes.B8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
-			want: "0x0102030405060708",
-		},
-		{
-			name: "empty bytes",
-			h:    bytes.B8{},
-			want: "0x0000000000000000",
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			got := tt.h.String()
-			require.Equal(t, tt.want, got, "Test case: %s", tt.name)
-		})
-	}
-}
-
-func TestBytes8MarshalText(t *testing.T) {
+func TestReverseEndianness(t *testing.T) {
 	tests := []struct {
-		name string
-		h    bytes.B8
-		want string
+		name     string
+		input    []byte
+		expected []byte
 	}{
-		{
-			name: "valid bytes",
-			h:    bytes.B8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
-			want: "0x0102030405060708",
-		},
-		{
-			name: "empty bytes",
-			h:    bytes.B8{},
-			want: "0x0000000000000000",
-		},
-		{
-			name: "all zeros",
-			h:    bytes.B8{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
-			want: "0x0000000000000000",
-		},
-		{
-			name: "all ones",
-			h:    bytes.B8{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
-			want: "0xffffffffffffffff",
-		},
-		{
-			name: "mixed bytes",
-			h:    bytes.B8{0xaa, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x11, 0x22},
-			want: "0xaabbccddeeff1122",
-		},
+		{name: "Even length",
+			input:    []byte{1, 2, 3, 4},
+			expected: []byte{4, 3, 2, 1}},
+		{name: "Odd length",
+			input:    []byte{1, 2, 3, 4, 5},
+			expected: []byte{5, 4, 3, 2, 1}},
+		{name: "Empty slice",
+			input:    []byte{},
+			expected: []byte{}},
+		{name: "Single element",
+			input:    []byte{1},
+			expected: []byte{1}},
 	}
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			got, err := tt.h.MarshalText()
-			require.NoError(t, err, "Test case: %s", tt.name)
-			require.Equal(t, tt.want, string(got), "Test case: %s", tt.name)
+			result := bytes.CopyAndReverseEndianess(tt.input)
+			require.Equal(t, tt.expected, result)
 		})
 	}
 }
 
-func TestBytes8UnmarshalText(t *testing.T) {
-	tests := []struct {
-		name    string
-		input   string
-		want    bytes.B8
-		wantErr bool
-	}{
-		{
-			name:    "valid input",
-			input:   "0x0102030405060708",
-			want:    bytes.B8{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
-			wantErr: false,
-		},
-		{
-			name:    "invalid input - not hex",
-			input:   "0102030405060708",
-			wantErr: true,
-		},
-		{
-			name:    "invalid input - wrong length",
-			input:   "0x01020304",
-			wantErr: true,
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			var got bytes.B8
-			err := got.UnmarshalText([]byte(tt.input))
-			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
-			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-			}
-		})
-	}
-}
-func TestToBytes8(t *testing.T) {
+func TestHashTreeRoot(t *testing.T) {
 	tests := []struct {
-		name     string
-		input    []byte
-		expected bytes.B8
+		name  string
+		input bytes.B32
+		want  bytes.B32
 	}{
 		{
-			name:     "Exact 8 bytes",
-			input:    []byte{1, 2, 3, 4, 5, 6, 7, 8},
-			expected: bytes.B8{1, 2, 3, 4, 5, 6, 7, 8},
-		},
-		{
-			name:     "Less than 8 bytes",
-			input:    []byte{1, 2, 3, 4},
-			expected: bytes.B8{1, 2, 3, 4, 0, 0, 0, 0},
-		},
-		{
-			name:     "Two bytes",
-			input:    []byte{1, 2},
-			expected: bytes.B8{1, 2, 0, 0, 0, 0, 0, 0},
-		},
-		{
-			name:     "Empty input",
-			input:    []byte{},
-			expected: bytes.B8{0, 0, 0, 0, 0, 0, 0, 0},
+			name:  "Non-empty input",
+			input: bytes.B32{1, 2, 3},
+			want:  [32]byte{1, 2, 3},
 		},
 		{
-			name:     "More than 8 bytes",
-			input:    []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
-			expected: bytes.B8{1, 2, 3, 4, 5, 6, 7, 8},
+			name:  "Empty input",
+			input: bytes.B32{},
+			want:  [32]byte{},
 		},
 	}
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			result := bytes.ToBytes8(tt.input)
-			require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
+			result := tt.input.HashTreeRoot()
+			require.Equal(t, tt.want, result)
 		})
 	}
 }
@@ -1339,10 +267,10 @@ func TestUnmarshalFixedJSON(t *testing.T) {
 		t.Run(tt.name, func(t *testing.T) {
 			err := bytes.UnmarshalFixedJSON(tt.input, tt.out)
 			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
+				require.Error(t, err)
 			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.Equal(t, tt.expected, tt.out, "Test case: %s", tt.name)
+				require.NoError(t, err)
+				require.Equal(t, tt.expected, tt.out)
 			}
 		})
 	}
@@ -1387,10 +315,10 @@ func TestUnmarshalFixedText(t *testing.T) {
 		t.Run(tt.name, func(t *testing.T) {
 			err := bytes.UnmarshalFixedText(tt.input, tt.out)
 			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
+				require.Error(t, err)
 			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.Equal(t, tt.expected, tt.out, "Test case: %s", tt.name)
+				require.NoError(t, err)
+				require.Equal(t, tt.expected, tt.out)
 			}
 		})
 	}
@@ -1427,13 +355,7 @@ func TestBytes_String(t *testing.T) {
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			result := tt.input.String()
-			require.Equal(
-				t,
-				tt.expected,
-				string(result),
-				"Test case: %s",
-				tt.name,
-			)
+			require.Equal(t, tt.expected, result)
 		})
 	}
 }
@@ -1475,10 +397,10 @@ func TestBytes_MarshalText(t *testing.T) {
 		t.Run(tt.name, func(t *testing.T) {
 			got, err := tt.input.MarshalText()
 			if tt.wantErr {
-				require.Error(t, err, "Test case: %s", tt.name)
+				require.Error(t, err)
 			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.Equal(t, tt.want, string(got), "Test case: %s", tt.name)
+				require.NoError(t, err)
+				require.Equal(t, tt.want, string(got))
 			}
 		})
 	}
diff --git a/mod/primitives/pkg/bytes/utils.go b/mod/primitives/pkg/bytes/utils.go
index 4a3828c75..8152014db 100644
--- a/mod/primitives/pkg/bytes/utils.go
+++ b/mod/primitives/pkg/bytes/utils.go
@@ -25,6 +25,8 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
 )
 
+var ErrIncorrectLength = errors.New("incorrect length")
+
 // ------------------------------ Helpers ------------------------------
 
 // Helper function to unmarshal JSON for various byte types.
@@ -34,7 +36,7 @@ func UnmarshalJSONHelper(target []byte, input []byte) error {
 		return err
 	}
 	if len(bz) != len(target) {
-		return errors.New("incorrect length")
+		return ErrIncorrectLength
 	}
 	copy(target, bz)
 	return nil
@@ -47,7 +49,7 @@ func UnmarshalTextHelper(target []byte, text []byte) error {
 		return err
 	}
 	if len(bz) != len(target) {
-		return errors.New("incorrect length")
+		return ErrIncorrectLength
 	}
 	copy(target, bz)
 	return nil
diff --git a/mod/primitives/pkg/common/consensus.go b/mod/primitives/pkg/common/consensus.go
index 89cc82ffa..50bbc0ed0 100644
--- a/mod/primitives/pkg/common/consensus.go
+++ b/mod/primitives/pkg/common/consensus.go
@@ -46,7 +46,7 @@ type (
 	//nolint:lll
 	DomainType = bytes.B4
 
-	// Hash32 as er the Ethereum 2.0 Specification:
+	// Hash32 as per the Ethereum 2.0 Specification:
 	// https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#custom-types
 	Hash32 = bytes.B32
 
@@ -65,7 +65,9 @@ type (
 
 // Root represents a 32-byte Merkle root.
 // We use this type to represent roots that come from the consensus layer.
-type Root [32]byte
+type Root [RootSize]byte
+
+const RootSize = 32
 
 // NewRootFromHex creates a new root from a hex string.
 func NewRootFromHex(input string) (Root, error) {
@@ -73,6 +75,9 @@ func NewRootFromHex(input string) (Root, error) {
 	if err != nil {
 		return Root{}, err
 	}
+	if len(val) != RootSize {
+		return Root{}, bytes.ErrIncorrectLength
+	}
 	return Root(val), nil
 }
 
@@ -84,7 +89,7 @@ func NewRootFromBytes(input []byte) Root {
 }
 
 // Hex converts a root to a hex string.
-func (r Root) Hex() string { return string(hex.EncodeBytes(r[:])) }
+func (r Root) Hex() string { return hex.EncodeBytes(r[:]) }
 
 // String implements the stringer interface and is used also by the logger when
 // doing full logging into a file.
diff --git a/mod/primitives/pkg/common/consensus_test.go b/mod/primitives/pkg/common/consensus_test.go
new file mode 100644
index 000000000..1f2071391
--- /dev/null
+++ b/mod/primitives/pkg/common/consensus_test.go
@@ -0,0 +1,84 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package common_test
+
+import (
+	"strings"
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
+	"github.com/stretchr/testify/require"
+)
+
+func TestNewRootFromHex(t *testing.T) {
+	tests := []struct {
+		name        string
+		input       func() string
+		expectedErr error
+	}{
+		{
+			name: "EmptyString",
+			input: func() string {
+				return ""
+			},
+			expectedErr: hex.ErrEmptyString,
+		},
+		{
+			name: "ShortSize",
+			input: func() string {
+				return hex.Prefix + strings.Repeat("f", 2*common.RootSize-2)
+			},
+			expectedErr: bytes.ErrIncorrectLength,
+		},
+		{
+			name: "RightSize",
+			input: func() string {
+				return hex.Prefix + strings.Repeat("f", 2*common.RootSize)
+			},
+			expectedErr: nil,
+		},
+		{
+			name: "LongSize",
+			input: func() string {
+				return hex.Prefix + strings.Repeat("f", 2*common.RootSize+2)
+			},
+			expectedErr: bytes.ErrIncorrectLength,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var err error
+			f := func() {
+				input := tt.input()
+				_, err = common.NewRootFromHex(input)
+			}
+			require.NotPanics(t, f)
+			if tt.expectedErr != nil {
+				require.ErrorIs(t, err, tt.expectedErr)
+			} else {
+				require.NoError(t, err)
+			}
+		})
+	}
+}
diff --git a/mod/primitives/pkg/common/execution.go b/mod/primitives/pkg/common/execution.go
index f31c782e9..3addc635f 100644
--- a/mod/primitives/pkg/common/execution.go
+++ b/mod/primitives/pkg/common/execution.go
@@ -55,7 +55,7 @@ func NewExecutionHashFromHex(input string) ExecutionHash {
 }
 
 // Hex converts a hash to a hex string.
-func (h ExecutionHash) Hex() string { return string(hex.EncodeBytes(h[:])) }
+func (h ExecutionHash) Hex() string { return hex.EncodeBytes(h[:]) }
 
 // String implements the stringer interface and is used also by the logger when
 // doing full logging into a file.
@@ -65,7 +65,7 @@ func (h ExecutionHash) String() string {
 
 // MarshalText returns the hex representation of h.
 func (h ExecutionHash) MarshalText() ([]byte, error) {
-	return hex.EncodeBytes(h[:]), nil
+	return []byte(hex.EncodeBytes(h[:])), nil
 }
 
 // UnmarshalText parses a hash in hex syntax.
@@ -113,8 +113,7 @@ func (a ExecutionAddress) MarshalText() ([]byte, error) {
 
 // UnmarshalText parses an address in hex syntax.
 func (a *ExecutionAddress) UnmarshalText(input []byte) error {
-	*a = NewExecutionAddressFromHex(string(input))
-	return nil
+	return hex.DecodeFixedText(input, a[:])
 }
 
 // MarshalJSON returns the JSON representation of a.
@@ -129,7 +128,7 @@ func (a *ExecutionAddress) UnmarshalJSON(input []byte) error {
 
 // checksumHex returns the checksummed hex representation of a.
 func (a *ExecutionAddress) checksumHex() []byte {
-	buf := hex.EncodeBytes(a[:])
+	buf := []byte(hex.EncodeBytes(a[:]))
 
 	// compute checksum
 	sha := sha3.NewLegacyKeccak256()
diff --git a/mod/primitives/pkg/common/execution_test.go b/mod/primitives/pkg/common/execution_test.go
new file mode 100644
index 000000000..75644d4f2
--- /dev/null
+++ b/mod/primitives/pkg/common/execution_test.go
@@ -0,0 +1,69 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package common_test
+
+import (
+	"encoding/json"
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
+	"github.com/stretchr/testify/require"
+)
+
+func TestExecutionAddressMarshalling(t *testing.T) {
+	tests := []struct {
+		name        string
+		input       []byte
+		expectedErr error
+	}{
+		{
+			name:        "address too short",
+			input:       []byte("\"0xab\""),
+			expectedErr: hex.ErrInvalidHexStringLength,
+		},
+		{
+			name:        "address missing hex prefix",
+			input:       []byte("\"abc\""),
+			expectedErr: hex.ErrMissingPrefix,
+		},
+		{
+			name: "address too long",
+			input: []byte(
+				"\"0x000102030405060708090a0b0c0d0e0f101112131415161718\"",
+			),
+			expectedErr: hex.ErrInvalidHexStringLength,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var (
+				v   common.ExecutionAddress
+				err error
+			)
+			require.NotPanics(t, func() {
+				err = json.Unmarshal(tt.input, &v)
+			})
+			require.ErrorIs(t, err, tt.expectedErr)
+		})
+	}
+}
diff --git a/mod/primitives/pkg/constraints/basic.go b/mod/primitives/pkg/constraints/basic.go
index b7c1903ad..3c2bccc65 100644
--- a/mod/primitives/pkg/constraints/basic.go
+++ b/mod/primitives/pkg/constraints/basic.go
@@ -36,7 +36,7 @@ type EngineType[SelfT any] interface {
 	JSONMarshallable
 }
 
-// EmptyWithForkVersion is a constraint that requires a type to have an Empty
+// EmptyWithVersion is a constraint that requires a type to have an Empty
 // method.
 type EmptyWithVersion[SelfT any] interface {
 	Empty(uint32) SelfT
@@ -47,7 +47,7 @@ type Empty[SelfT any] interface {
 	Empty() SelfT
 }
 
-// IsNil is a constraint that requires a type to have an IsNil method.
+// Nillable is a constraint that requires a type to have an IsNil method.
 type Nillable interface {
 	IsNil() bool
 }
diff --git a/mod/primitives/pkg/crypto/bls.go b/mod/primitives/pkg/crypto/bls.go
index cc148ec47..a568de650 100644
--- a/mod/primitives/pkg/crypto/bls.go
+++ b/mod/primitives/pkg/crypto/bls.go
@@ -20,19 +20,17 @@
 
 package crypto
 
-import "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
+import (
+	"fmt"
 
-const (
-	// CometBLSType is the BLS curve type used in the Comet BFT consensus
-	// algorithm.
-	CometBLSType = "bls12_381"
-
-	// CometBLSPower is the voting power given to a validator when they
-	// are in the active set.
-	// TODO: Move this, it doesn't really belong here.
-	CometBLSPower = 1e10
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
+	cometencoding "github.com/cometbft/cometbft/crypto/encoding"
 )
 
+// CometBLSType is the BLS curve type used in the Comet BFT consensus
+// algorithm.
+const CometBLSType = "bls12_381"
+
 //nolint:lll // link.
 type (
 	// BLSPubkey as per the Ethereum 2.0 Specification:
@@ -44,6 +42,14 @@ type (
 	BLSSignature = bytes.B96
 )
 
+func GetAddressFromPubKey(pubKey BLSPubkey) ([]byte, error) {
+	pk, err := cometencoding.PubKeyFromTypeAndBytes(CometBLSType, pubKey[:])
+	if err != nil {
+		return nil, fmt.Errorf("failed retrieving pubKey from bytes: %w", err)
+	}
+	return pk.Address(), nil
+}
+
 // BLSSigner defines an interface for cryptographic signing operations.
 // It uses generic type parameters Signature and Pubkey, both of which are
 // slices of bytes.
diff --git a/mod/primitives/pkg/crypto/mocks/bls_signer.mock.go b/mod/primitives/pkg/crypto/mocks/bls_signer.mock.go
index 7635636e3..4abffe896 100644
--- a/mod/primitives/pkg/crypto/mocks/bls_signer.mock.go
+++ b/mod/primitives/pkg/crypto/mocks/bls_signer.mock.go
@@ -1,10 +1,9 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
 import (
-	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
-
+	crypto "github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
 	mock "github.com/stretchr/testify/mock"
 )
 
@@ -22,19 +21,19 @@ func (_m *BLSSigner) EXPECT() *BLSSigner_Expecter {
 }
 
 // PublicKey provides a mock function with given fields:
-func (_m *BLSSigner) PublicKey() bytes.B48 {
+func (_m *BLSSigner) PublicKey() crypto.BLSPubkey {
 	ret := _m.Called()
 
 	if len(ret) == 0 {
 		panic("no return value specified for PublicKey")
 	}
 
-	var r0 bytes.B48
-	if rf, ok := ret.Get(0).(func() bytes.B48); ok {
+	var r0 crypto.BLSPubkey
+	if rf, ok := ret.Get(0).(func() crypto.BLSPubkey); ok {
 		r0 = rf()
 	} else {
 		if ret.Get(0) != nil {
-			r0 = ret.Get(0).(bytes.B48)
+			r0 = ret.Get(0).(crypto.BLSPubkey)
 		}
 	}
 
@@ -58,34 +57,34 @@ func (_c *BLSSigner_PublicKey_Call) Run(run func()) *BLSSigner_PublicKey_Call {
 	return _c
 }
 
-func (_c *BLSSigner_PublicKey_Call) Return(_a0 bytes.B48) *BLSSigner_PublicKey_Call {
+func (_c *BLSSigner_PublicKey_Call) Return(_a0 crypto.BLSPubkey) *BLSSigner_PublicKey_Call {
 	_c.Call.Return(_a0)
 	return _c
 }
 
-func (_c *BLSSigner_PublicKey_Call) RunAndReturn(run func() bytes.B48) *BLSSigner_PublicKey_Call {
+func (_c *BLSSigner_PublicKey_Call) RunAndReturn(run func() crypto.BLSPubkey) *BLSSigner_PublicKey_Call {
 	_c.Call.Return(run)
 	return _c
 }
 
 // Sign provides a mock function with given fields: _a0
-func (_m *BLSSigner) Sign(_a0 []byte) (bytes.B96, error) {
+func (_m *BLSSigner) Sign(_a0 []byte) (crypto.BLSSignature, error) {
 	ret := _m.Called(_a0)
 
 	if len(ret) == 0 {
 		panic("no return value specified for Sign")
 	}
 
-	var r0 bytes.B96
+	var r0 crypto.BLSSignature
 	var r1 error
-	if rf, ok := ret.Get(0).(func([]byte) (bytes.B96, error)); ok {
+	if rf, ok := ret.Get(0).(func([]byte) (crypto.BLSSignature, error)); ok {
 		return rf(_a0)
 	}
-	if rf, ok := ret.Get(0).(func([]byte) bytes.B96); ok {
+	if rf, ok := ret.Get(0).(func([]byte) crypto.BLSSignature); ok {
 		r0 = rf(_a0)
 	} else {
 		if ret.Get(0) != nil {
-			r0 = ret.Get(0).(bytes.B96)
+			r0 = ret.Get(0).(crypto.BLSSignature)
 		}
 	}
 
@@ -116,18 +115,18 @@ func (_c *BLSSigner_Sign_Call) Run(run func(_a0 []byte)) *BLSSigner_Sign_Call {
 	return _c
 }
 
-func (_c *BLSSigner_Sign_Call) Return(_a0 bytes.B96, _a1 error) *BLSSigner_Sign_Call {
+func (_c *BLSSigner_Sign_Call) Return(_a0 crypto.BLSSignature, _a1 error) *BLSSigner_Sign_Call {
 	_c.Call.Return(_a0, _a1)
 	return _c
 }
 
-func (_c *BLSSigner_Sign_Call) RunAndReturn(run func([]byte) (bytes.B96, error)) *BLSSigner_Sign_Call {
+func (_c *BLSSigner_Sign_Call) RunAndReturn(run func([]byte) (crypto.BLSSignature, error)) *BLSSigner_Sign_Call {
 	_c.Call.Return(run)
 	return _c
 }
 
 // VerifySignature provides a mock function with given fields: pubKey, msg, signature
-func (_m *BLSSigner) VerifySignature(pubKey bytes.B48, msg []byte, signature bytes.B96) error {
+func (_m *BLSSigner) VerifySignature(pubKey crypto.BLSPubkey, msg []byte, signature crypto.BLSSignature) error {
 	ret := _m.Called(pubKey, msg, signature)
 
 	if len(ret) == 0 {
@@ -135,7 +134,7 @@ func (_m *BLSSigner) VerifySignature(pubKey bytes.B48, msg []byte, signature byt
 	}
 
 	var r0 error
-	if rf, ok := ret.Get(0).(func(bytes.B48, []byte, bytes.B96) error); ok {
+	if rf, ok := ret.Get(0).(func(crypto.BLSPubkey, []byte, crypto.BLSSignature) error); ok {
 		r0 = rf(pubKey, msg, signature)
 	} else {
 		r0 = ret.Error(0)
@@ -150,16 +149,16 @@ type BLSSigner_VerifySignature_Call struct {
 }
 
 // VerifySignature is a helper method to define mock.On call
-//   - pubKey bytes.B48
+//   - pubKey crypto.BLSPubkey
 //   - msg []byte
-//   - signature bytes.B96
+//   - signature crypto.BLSSignature
 func (_e *BLSSigner_Expecter) VerifySignature(pubKey interface{}, msg interface{}, signature interface{}) *BLSSigner_VerifySignature_Call {
 	return &BLSSigner_VerifySignature_Call{Call: _e.mock.On("VerifySignature", pubKey, msg, signature)}
 }
 
-func (_c *BLSSigner_VerifySignature_Call) Run(run func(pubKey bytes.B48, msg []byte, signature bytes.B96)) *BLSSigner_VerifySignature_Call {
+func (_c *BLSSigner_VerifySignature_Call) Run(run func(pubKey crypto.BLSPubkey, msg []byte, signature crypto.BLSSignature)) *BLSSigner_VerifySignature_Call {
 	_c.Call.Run(func(args mock.Arguments) {
-		run(args[0].(bytes.B48), args[1].([]byte), args[2].(bytes.B96))
+		run(args[0].(crypto.BLSPubkey), args[1].([]byte), args[2].(crypto.BLSSignature))
 	})
 	return _c
 }
@@ -169,7 +168,7 @@ func (_c *BLSSigner_VerifySignature_Call) Return(_a0 error) *BLSSigner_VerifySig
 	return _c
 }
 
-func (_c *BLSSigner_VerifySignature_Call) RunAndReturn(run func(bytes.B48, []byte, bytes.B96) error) *BLSSigner_VerifySignature_Call {
+func (_c *BLSSigner_VerifySignature_Call) RunAndReturn(run func(crypto.BLSPubkey, []byte, crypto.BLSSignature) error) *BLSSigner_VerifySignature_Call {
 	_c.Call.Return(run)
 	return _c
 }
diff --git a/mod/primitives/pkg/encoding/hex/big_int.go b/mod/primitives/pkg/encoding/hex/big_int.go
new file mode 100644
index 000000000..bc51721e0
--- /dev/null
+++ b/mod/primitives/pkg/encoding/hex/big_int.go
@@ -0,0 +1,81 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package hex
+
+import "math/big"
+
+// FromBigInt encodes bigint as a hex string with 0x prefix.
+// Precondition: bigint is non-negative.
+func FromBigInt(bigint *big.Int) string {
+	switch sign := bigint.Sign(); {
+	case sign == 0:
+		return Prefix + "0"
+	case sign > 0:
+		return Prefix + bigint.Text(hexBase)
+	default:
+		// this return should never reach if precondition is met
+		return Prefix + bigint.Text(hexBase)[1:]
+	}
+}
+
+// ToBigInt decodes a hex string with 0x prefix.
+func ToBigInt(hexStr string) (*big.Int, error) {
+	raw, err := formatAndValidateNumber(hexStr)
+	if err != nil {
+		return nil, err
+	}
+	if len(raw) > nibblesPer256Bits {
+		return nil, ErrBig256Range
+	}
+	bigWordNibbles, err := getBigWordNibbles()
+	if err != nil {
+		return nil, err
+	}
+	words := make([]big.Word, len(raw)/bigWordNibbles+1)
+	end := len(raw)
+	for i := range words {
+		start := end - bigWordNibbles
+		if start < 0 {
+			start = 0
+		}
+		for ri := start; ri < end; ri++ {
+			nib := decodeNibble(raw[ri])
+			if nib == badNibble {
+				return nil, ErrInvalidString
+			}
+			words[i] *= 16
+			words[i] += big.Word(nib)
+		}
+		end = start
+	}
+	dec := new(big.Int).SetBits(words)
+	return dec, nil
+}
+
+// MustToBigInt decodes a hex string with 0x prefix.
+// It panics for invalid input.
+func MustToBigInt(hexStr string) *big.Int {
+	bi, err := ToBigInt(hexStr)
+	if err != nil {
+		panic(err)
+	}
+	return bi
+}
diff --git a/mod/primitives/pkg/encoding/hex/bit_int_test.go b/mod/primitives/pkg/encoding/hex/bit_int_test.go
new file mode 100644
index 000000000..a82f1e775
--- /dev/null
+++ b/mod/primitives/pkg/encoding/hex/bit_int_test.go
@@ -0,0 +1,110 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+//nolint:lll // long strings
+package hex_test
+
+import (
+	"bytes"
+	"math/big"
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
+	"github.com/stretchr/testify/require"
+)
+
+// FromBigInt, then ToBigInt.
+func TestBigIntRoundTrip(t *testing.T) {
+	// assume FromBigInt only called on non-negative big.Int
+	tests := []struct {
+		name     string
+		input    *big.Int
+		expected string
+	}{
+		{
+			name:     "zero value",
+			input:    big.NewInt(0),
+			expected: "0x0",
+		},
+		{
+			name:     "positive value",
+			input:    big.NewInt(12345),
+			expected: "0x3039",
+		},
+		{
+			name:     "large positive value",
+			input:    new(big.Int).SetBytes(bytes.Repeat([]byte{0xff}, 32)),
+			expected: "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			result := hex.FromBigInt(tt.input)
+			require.Equal(t, tt.expected, result)
+
+			_, err := hex.IsValidHex(result)
+			require.NoError(t, err)
+
+			var dec *big.Int
+
+			if tt.input.Sign() >= 0 {
+				dec, err = hex.ToBigInt(result)
+			} else {
+				dec, err = hex.ToBigInt(result)
+				dec = dec.Neg(dec)
+			}
+
+			require.NoError(t, err)
+			require.Zero(t, dec.Cmp(tt.input))
+		})
+	}
+}
+
+func TestString_MustToBigInt(t *testing.T) {
+	tests := []struct {
+		name     string
+		input    string
+		expected *big.Int
+		panics   bool
+	}{
+		{"Valid hex string", "0x1", big.NewInt(1), false},
+		{"Another valid hex string", "0x10", big.NewInt(16), false},
+		{"Large valid hex string", "0x1a", big.NewInt(26), false},
+		{"Invalid hex string", "0xinvalid", nil, true},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var (
+				res *big.Int
+				f   = func() {
+					res = hex.MustToBigInt(tt.input)
+				}
+			)
+			if tt.panics {
+				require.Panics(t, f)
+			} else {
+				require.NotPanics(t, f)
+				require.Equal(t, tt.expected, res)
+			}
+		})
+	}
+}
diff --git a/mod/primitives/pkg/encoding/hex/bytes.go b/mod/primitives/pkg/encoding/hex/bytes.go
index 355eb5a6e..0830a4f9f 100644
--- a/mod/primitives/pkg/encoding/hex/bytes.go
+++ b/mod/primitives/pkg/encoding/hex/bytes.go
@@ -26,11 +26,36 @@ import (
 	"github.com/berachain/beacon-kit/mod/errors"
 )
 
-func EncodeBytes[B ~[]byte](b B) []byte {
-	result := make([]byte, len(b)*2+prefixLen)
-	copy(result, prefix)
-	hex.Encode(result[prefixLen:], b)
-	return result
+var ErrInvalidHexStringLength = errors.New("invalid hex string length")
+
+// EncodeBytes creates a hex string with 0x prefix.
+// Inverse operation is ToBytes or MustToBytes.
+func EncodeBytes(b []byte) string {
+	hexStr := make([]byte, len(b)*2+prefixLen)
+	copy(hexStr, Prefix)
+	hex.Encode(hexStr[prefixLen:], b)
+	return string(hexStr)
+}
+
+// MustToBytes returns the bytes represented by the given hex string.
+// It panics if the input is not a valid hex string.
+func MustToBytes(input string) []byte {
+	bz, err := ToBytes(input)
+	if err != nil {
+		panic(err)
+	}
+	return bz
+}
+
+// ToBytes returns the bytes represented by the given hex string.
+// An error is returned if the input is not a valid hex string.
+func ToBytes(input string) ([]byte, error) {
+	strippedInput, err := IsValidHex(input)
+	if err != nil {
+		return nil, err
+	}
+
+	return hex.DecodeString(strippedInput)
 }
 
 func UnmarshalByteText(input []byte) ([]byte, error) {
@@ -49,10 +74,11 @@ func UnmarshalByteText(input []byte) ([]byte, error) {
 // of out determines the required input length. This function is commonly used
 // to implement the UnmarshalJSON method for fixed-size types.
 func DecodeFixedJSON(input, out []byte) error {
-	if !isQuotedString(input) {
-		return ErrNonQuotedString
+	strippedInput, err := ValidateQuotedString(input)
+	if err != nil {
+		return err
 	}
-	return DecodeFixedText(input[1:len(input)-1], out)
+	return DecodeFixedText(strippedInput, out)
 }
 
 // DecodeFixedText decodes the input as a string with 0x prefix. The length
@@ -64,7 +90,7 @@ func DecodeFixedText(input, out []byte) error {
 	}
 	if len(raw)/encDecRatio != len(out) {
 		return errors.Wrapf(
-			errors.New("invalid hex string length"),
+			ErrInvalidHexStringLength,
 			"hex string has length %d, want %d",
 			len(raw), len(out)*encDecRatio,
 		)
@@ -81,27 +107,3 @@ func DecodeFixedText(input, out []byte) error {
 
 	return nil
 }
-
-// MustFromHex returns the bytes represented by the given hex string.
-// It panics if the input is not a valid hex string.
-func MustToBytes(input string) []byte {
-	bz, err := ToBytes(input)
-	if err != nil {
-		panic(err)
-	}
-	return bz
-}
-
-// FromHex returns the bytes represented by the given hex string.
-// An error is returned if the input is not a valid hex string.
-func ToBytes(input string) ([]byte, error) {
-	s, err := NewStringStrict(input)
-	if err != nil {
-		return nil, err
-	}
-	h, err := s.ToBytes()
-	if err != nil {
-		return nil, err
-	}
-	return h, nil
-}
diff --git a/mod/primitives/pkg/encoding/hex/bytes_test.go b/mod/primitives/pkg/encoding/hex/bytes_test.go
index 42ba2ad8f..9ace32421 100644
--- a/mod/primitives/pkg/encoding/hex/bytes_test.go
+++ b/mod/primitives/pkg/encoding/hex/bytes_test.go
@@ -29,33 +29,54 @@ import (
 	"github.com/stretchr/testify/require"
 )
 
-func TestEncodeBytes(t *testing.T) {
+func TestEncodeAndDecodeBytes(t *testing.T) {
 	tests := []struct {
 		name     string
 		input    []byte
-		expected []byte
+		expected string
 	}{
 		{
 			name:     "typical byte slice",
 			input:    []byte{0x48, 0x65, 0x6c, 0x6c, 0x6f},
-			expected: []byte("0x48656c6c6f"),
+			expected: "0x48656c6c6f",
 		},
 		{
 			name:     "empty byte slice",
 			input:    []byte{},
-			expected: []byte("0x"),
+			expected: "0x",
 		},
 		{
 			name:     "single byte",
 			input:    []byte{0x01},
-			expected: []byte("0x01"),
+			expected: "0x01",
+		},
+		{
+			name: "long byte slice",
+			input: []byte{
+				0xde, 0xad, 0xbe, 0xef, 0xca, 0xfe, 0xba, 0xbe, 0xde, 0xad,
+				0xbe, 0xef, 0xca, 0xfe, 0xba, 0xbe, 0xde, 0xad, 0xbe, 0xef,
+				0xca, 0xfe, 0xba, 0xbe, 0xde, 0xad, 0xbe, 0xef, 0xca, 0xfe,
+				0xba, 0xbe},
+			expected: "0xdeadbeefcafebabe" + "deadbeefcafebabe" + "deadbeefcafebabe" + "deadbeefcafebabe",
 		},
 	}
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			result := hex.EncodeBytes(tt.input)
-			require.Equal(t, tt.expected, result, "Test case : %s", tt.name)
+			require.Equal(t, tt.expected, result)
+
+			_, err := hex.IsValidHex(result)
+			require.NoError(t, err)
+
+			decoded, err := hex.ToBytes(result)
+			require.NoError(t, err)
+			require.Equal(t, tt.input, decoded)
+
+			require.NotPanics(t, func() {
+				decoded = hex.MustToBytes(result)
+			})
+			require.Equal(t, tt.input, decoded)
 		})
 	}
 }
@@ -97,10 +118,10 @@ func TestUnmarshalByteText(t *testing.T) {
 		t.Run(tt.name, func(t *testing.T) {
 			result, err := hex.UnmarshalByteText(tt.input)
 			if tt.expectErr {
-				require.Error(t, err, "Test case : %s", tt.name)
+				require.Error(t, err)
 			} else {
-				require.NoError(t, err, "Test case : %s", tt.name)
-				require.Equal(t, tt.expected, result, "Test case : %s", tt.name)
+				require.NoError(t, err)
+				require.Equal(t, tt.expected, result)
 			}
 		})
 	}
@@ -149,10 +170,10 @@ func TestDecodeFixedText(t *testing.T) {
 			out := make([]byte, len(tt.expected))
 			err := hex.DecodeFixedText(tt.input, out)
 			if tt.expectErr {
-				require.Error(t, err, "Test case : %s", tt.name)
+				require.Error(t, err)
 			} else {
-				require.NoError(t, err, "Test case : %s", tt.name)
-				require.Equal(t, tt.expected, out, "Test case : %s", tt.name)
+				require.NoError(t, err)
+				require.Equal(t, tt.expected, out)
 			}
 		})
 	}
@@ -203,10 +224,10 @@ func TestDecodeFixedJSON(t *testing.T) {
 				tt.out,
 			)
 			if tt.expectErr {
-				require.Error(t, err, "Test case : %s", tt.name)
+				require.Error(t, err)
 			} else {
-				require.NoError(t, err, "Test case : %s", tt.name)
-				require.Equal(t, []byte{0x48, 0x65, 0x6c, 0x6c, 0x6f}, tt.out, "Test case : %s", tt.name)
+				require.NoError(t, err)
+				require.Equal(t, []byte{0x48, 0x65, 0x6c, 0x6c, 0x6f}, tt.out)
 			}
 		})
 	}
diff --git a/mod/primitives/pkg/encoding/hex/const.go b/mod/primitives/pkg/encoding/hex/const.go
index c4e65414a..f74dc6efa 100644
--- a/mod/primitives/pkg/encoding/hex/const.go
+++ b/mod/primitives/pkg/encoding/hex/const.go
@@ -21,15 +21,15 @@
 package hex
 
 const (
-	prefix          = "0x"
-	prefixLen       = len(prefix)
-	badNibble       = ^uint64(0)
-	hexBase         = 16
-	initialCapacity = 10
-	encDecRatio     = 2
-	bytesPer64Bits  = 16 // 64/8
-	bytesPer256Bits = 64 // 256/8
-	nibbleShift     = 4
+	Prefix            = "0x"
+	prefixLen         = len(Prefix)
+	badNibble         = ^uint64(0)
+	hexBase           = 16
+	initialCapacity   = 10
+	encDecRatio       = 2
+	nibblesPer64Bits  = 16 // 64/4
+	nibblesPer256Bits = 64 // 256/4
+	nibbleShift       = 4
 
 	// hexadecimal conversion constants.
 	hexBaseOffset       = '0'
diff --git a/mod/primitives/pkg/encoding/hex/format.go b/mod/primitives/pkg/encoding/hex/format.go
index 27e6456fa..26f29ad2e 100644
--- a/mod/primitives/pkg/encoding/hex/format.go
+++ b/mod/primitives/pkg/encoding/hex/format.go
@@ -20,49 +20,45 @@
 
 package hex
 
-// has0xPrefix returns true if s has a 0x prefix.
-func has0xPrefix[T []byte | string](s T) bool {
-	return len(s) >= 2 && s[0] == '0' && (s[1] == 'x' || s[1] == 'X')
-}
+import (
+	"errors"
+	"strings"
+)
 
-// ensure0xPrefix ensures that s has a 0x prefix. If it doesn't, it adds it.
-func ensure0xPrefix[T []byte | string](s T) T {
-	if has0xPrefix(s) {
-		return s
+// IsValidHex performs basic validations that every hex string
+// must pass (there may be extra ones depending on the type encoded)
+// It returns the suffix (dropping 0x prefix) in the hope to appease nilaway.
+func IsValidHex[T ~[]byte | ~string](s T) (T, error) {
+	if len(s) == 0 {
+		return *new(T), ErrEmptyString
 	}
-	switch v := any(s).(type) {
-	case string:
-		return T("0x" + v)
-	case []byte:
-		return T(append([]byte("0x"), v...))
-	default:
-		return s
+	if len(s) < prefixLen {
+		return *new(T), ErrMissingPrefix
 	}
-}
-
-// ensureStringInvariants ensures that String invariants are met by appending
-// 0x prefix if missing, and converting empty string to "0x0".
-func ensureStringInvariants(s string) string {
-	if len(s) == 0 {
-		s = "0"
+	if strings.ToLower(string(s[:prefixLen])) != Prefix {
+		return *new(T), ErrMissingPrefix
 	}
-	return ensure0xPrefix(s)
+	return s[prefixLen:], nil
 }
 
-// isQuotedString returns true if input has quotes.
-func isQuotedString[T []byte | string](input T) bool {
-	return len(input) >= 2 && input[0] == '"' && input[len(input)-1] == '"'
+// ValidateQuotedString errs if input has no quotes.
+// For convenience it returns the unstrip content if it does not err.
+func ValidateQuotedString(input []byte) ([]byte, error) {
+	if len(input) >= 2 && input[0] == '"' && input[len(input)-1] == '"' {
+		return input[1 : len(input)-1], nil
+	}
+	return nil, ErrNonQuotedString
 }
 
 // formatAndValidateText validates the input text for a hex string.
 func formatAndValidateText(input []byte) ([]byte, error) {
-	if len(input) == 0 {
+	input, err := IsValidHex(input)
+	if errors.Is(err, ErrEmptyString) {
 		return nil, nil // empty strings are allowed
+	} else if err != nil {
+		return nil, err
 	}
-	if !has0xPrefix(input) {
-		return nil, ErrMissingPrefix
-	}
-	input = input[2:]
+
 	if len(input)%2 != 0 {
 		return nil, ErrOddLength
 	}
@@ -71,15 +67,11 @@ func formatAndValidateText(input []byte) ([]byte, error) {
 
 // formatAndValidateNumber checks the input text for a hex number.
 func formatAndValidateNumber[T []byte | string](input T) (T, error) {
-	// realistically, this shouldn't rarely error if called on
-	// unwrapped hex.String
-	if len(input) == 0 {
-		return *new(T), ErrEmptyString
-	}
-	if !has0xPrefix(input) {
-		return *new(T), ErrMissingPrefix
+	input, err := IsValidHex(input)
+	if err != nil {
+		return *new(T), err
 	}
-	input = input[2:]
+
 	if len(input) == 0 {
 		return *new(T), ErrEmptyNumber
 	}
diff --git a/mod/primitives/pkg/encoding/hex/format_test.go b/mod/primitives/pkg/encoding/hex/format_test.go
new file mode 100644
index 000000000..186c4d846
--- /dev/null
+++ b/mod/primitives/pkg/encoding/hex/format_test.go
@@ -0,0 +1,73 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package hex_test
+
+import (
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
+	"github.com/stretchr/testify/require"
+)
+
+func TestIsValidHex(t *testing.T) {
+	tests := []struct {
+		name    string
+		input   string
+		wantErr error
+	}{
+		{
+			name:    "Valid hex string",
+			input:   "0x48656c6c6f",
+			wantErr: nil,
+		},
+		{
+			name:    "Empty string",
+			input:   "",
+			wantErr: hex.ErrEmptyString,
+		},
+		{
+			name:    "No 0x prefix",
+			input:   "48656c6c6f",
+			wantErr: hex.ErrMissingPrefix,
+		},
+		{
+			name:    "Valid single hex character",
+			input:   "0x0",
+			wantErr: nil,
+		},
+		{
+			name:    "Empty hex string",
+			input:   "0x",
+			wantErr: nil,
+		},
+	}
+
+	for _, test := range tests {
+		t.Run(test.name, func(t *testing.T) {
+			_, err := hex.IsValidHex(test.input)
+			if test.wantErr != nil {
+				require.ErrorIs(t, test.wantErr, err)
+			} else {
+				require.NoError(t, err)
+			}
+		})
+	}
+}
diff --git a/mod/primitives/pkg/encoding/hex/hex_test.go b/mod/primitives/pkg/encoding/hex/hex_test.go
deleted file mode 100644
index 0300f7ea4..000000000
--- a/mod/primitives/pkg/encoding/hex/hex_test.go
+++ /dev/null
@@ -1,459 +0,0 @@
-// SPDX-License-Identifier: BUSL-1.1
-//
-// Copyright (C) 2024, Berachain Foundation. All rights reserved.
-// Use of this software is governed by the Business Source License included
-// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
-//
-// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
-// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
-// VERSIONS OF THE LICENSED WORK.
-//
-// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
-// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
-// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
-//
-// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
-// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
-// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
-// TITLE.
-
-//nolint:lll // long strings
-package hex_test
-
-import (
-	"bytes"
-	"encoding"
-	"math/big"
-	"strconv"
-	"testing"
-
-	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
-	"github.com/stretchr/testify/require"
-)
-
-// ====================== Constructors ===========================.
-func TestNewStringStrictInvariants(t *testing.T) {
-	// NewStringStrict constructor should error if the input is invalid
-	tests := []struct {
-		name      string
-		input     string
-		expectErr bool
-	}{
-		{
-			name:      "Valid hex string",
-			input:     "0x48656c6c6f",
-			expectErr: false,
-		},
-		{
-			name:      "Empty string",
-			input:     "",
-			expectErr: true,
-		},
-		{
-			name:      "No 0x prefix",
-			input:     "48656c6c6f",
-			expectErr: true,
-		},
-		{
-			name:      "Valid single hex character",
-			input:     "0x0",
-			expectErr: false,
-		},
-		{
-			name:      "Empty hex string",
-			input:     "0x",
-			expectErr: false,
-		},
-	}
-
-	for _, test := range tests {
-		t.Run(test.name, func(t *testing.T) {
-			str, err := hex.NewStringStrict(test.input)
-			if test.expectErr {
-				require.Error(t, err, "Test case: %s", test.name)
-			} else {
-				require.NoError(t, err, "Test case: %s", test.name)
-				verifyInvariants(t, "NewStringStrict()", str)
-			}
-		})
-	}
-}
-
-func TestNewStringInvariants(t *testing.T) {
-	// NewString constructor should never error or panic
-	// output should always satisfy the string invariants regardless of input
-	tests := []struct {
-		name  string
-		input string
-	}{
-		{
-			name:  "Valid hex string",
-			input: "0x48656c6c6f",
-		},
-		{
-			name:  "Empty string",
-			input: "",
-		},
-		{
-			name:  "No 0x prefix",
-			input: "48656c6c6f",
-		},
-		{
-			name:  "Valid single hex character",
-			input: "0x0",
-		},
-		{
-			name:  "Empty hex string",
-			input: "0x",
-		},
-	}
-
-	for _, test := range tests {
-		t.Run(test.name, func(t *testing.T) {
-			str := hex.NewString(test.input)
-			verifyInvariants(t, "NewString()", str)
-		})
-	}
-}
-
-// ====================== Bytes ===========================.
-func TestFromBytes(t *testing.T) {
-	tests := []struct {
-		name     string
-		input    []byte
-		expected string
-	}{
-		{
-			name:     "typical byte slice",
-			input:    []byte{0x48, 0x65, 0x6c, 0x6c, 0x6f},
-			expected: "0x48656c6c6f",
-		},
-		{
-			name:     "empty byte slice",
-			input:    []byte{},
-			expected: "0x",
-		},
-		{
-			name:     "single byte",
-			input:    []byte{0x01},
-			expected: "0x01",
-		},
-		{
-			name: "long byte slice",
-			input: []byte{
-				0xde, 0xad, 0xbe, 0xef, 0xca, 0xfe, 0xba, 0xbe, 0xde, 0xad,
-				0xbe, 0xef, 0xca, 0xfe, 0xba, 0xbe, 0xde, 0xad, 0xbe, 0xef,
-				0xca, 0xfe, 0xba, 0xbe, 0xde, 0xad, 0xbe, 0xef, 0xca, 0xfe,
-				0xba, 0xbe},
-			expected: "0xdeadbeefcafebabe" + "deadbeefcafebabe" + "deadbeefcafebabe" + "deadbeefcafebabe",
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			result := hex.FromBytes(tt.input)
-
-			if result.Unwrap() != tt.expected {
-				t.Errorf(
-					"FromBytes() = %v, want %v",
-					result.Unwrap(),
-					tt.expected,
-				)
-			}
-
-			verifyInvariants(t, "FromBytes()", result)
-
-			decoded, err := result.ToBytes()
-			if err != nil {
-				t.Errorf("ToBytes() error = %v", err)
-			}
-			if !bytes.Equal(decoded, tt.input) {
-				t.Errorf("ToBytes() = %v, want %v", decoded, tt.input)
-			}
-		})
-	}
-}
-
-// ====================== Numeric ===========================.
-
-// FromUint64, then ToUint64.
-func TestUint64RoundTrip(t *testing.T) {
-	tests := []struct {
-		name     string
-		input    uint64
-		expected string
-	}{
-		{
-			name:     "Zero value",
-			input:    0,
-			expected: "0x0",
-		},
-		{
-			name:     "Positive value",
-			input:    12345,
-			expected: "0x3039",
-		},
-		{
-			name:     "Max uint64 value",
-			input:    ^uint64(0), // 2^64 - 1
-			expected: "0xffffffffffffffff",
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			result := hex.FromUint64(tt.input)
-
-			if result.Unwrap() != tt.expected {
-				t.Errorf(
-					"FromUint64() = %v, want %v",
-					result.Unwrap(),
-					tt.expected,
-				)
-			}
-			verifyInvariants(t, "FromUint64()", result)
-			decoded, err := strconv.ParseUint(result.Unwrap()[2:], 16, 64)
-			if err != nil {
-				t.Errorf("ParseUint() error = %v", err)
-			}
-			if decoded != tt.input {
-				t.Errorf("ParseUint() = %v, want %v", decoded, tt.input)
-			}
-		})
-	}
-}
-
-// FromBigInt, then ToBigInt.
-func TestBigIntRoundTrip(t *testing.T) {
-	// assume FromBigInt only called on non-negative big.Int
-	tests := []struct {
-		name     string
-		input    *big.Int
-		expected string
-	}{
-		{
-			name:     "zero value",
-			input:    big.NewInt(0),
-			expected: "0x0",
-		},
-		{
-			name:     "positive value",
-			input:    big.NewInt(12345),
-			expected: "0x3039",
-		},
-		{
-			name:     "large positive value",
-			input:    new(big.Int).SetBytes(bytes.Repeat([]byte{0xff}, 32)),
-			expected: "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			result := hex.FromBigInt(tt.input)
-
-			if result.Unwrap() != tt.expected {
-				t.Errorf(
-					"FromBigInt() = %v, want %v",
-					result.Unwrap(),
-					tt.expected,
-				)
-			}
-
-			verifyInvariants(t, "FromBigInt()", result)
-
-			var dec *big.Int
-			var err error
-
-			if tt.input.Sign() >= 0 {
-				dec, err = hex.NewString(result.Unwrap()).ToBigInt()
-			} else {
-				dec, err = hex.NewString(result.Unwrap()).ToBigInt()
-				dec = dec.Neg(dec)
-			}
-
-			if err != nil {
-				t.Errorf("ToBigInt() error = %v", err)
-			}
-			if dec.Cmp(tt.input) != 0 {
-				t.Errorf("ToBigInt() = %v, want %v", dec, tt.input)
-			}
-		})
-	}
-}
-
-// ====================== Helpers ===========================.
-
-func verifyInvariants(t *testing.T, invoker string, s hex.String) {
-	t.Helper()
-	if !s.Has0xPrefix() {
-		t.Errorf(invoker+"result does not have 0x prefix: %v", s)
-	}
-	if s.IsEmpty() {
-		t.Errorf(invoker+"result is empty: %v", s)
-	}
-}
-
-func TestUnmarshalJSONText(t *testing.T) {
-	tests := []struct {
-		name        string
-		input       []byte
-		unmarshaler encoding.TextUnmarshaler
-		expectErr   bool
-	}{
-		{
-			name:        "Valid JSON text",
-			input:       []byte(`"0x48656c6c6f"`),
-			unmarshaler: new(hex.String),
-			expectErr:   false,
-		},
-		{
-			name:        "Invalid JSON text",
-			input:       []byte(`"invalid"`),
-			unmarshaler: new(hex.String),
-			expectErr:   true,
-		},
-		{
-			name:        "Invalid quoted JSON text",
-			input:       []byte(`"0x`),
-			unmarshaler: new(hex.String),
-			expectErr:   true,
-		},
-		{
-			name:        "Empty JSON text",
-			input:       []byte(`""`),
-			unmarshaler: new(hex.String),
-			expectErr:   true,
-		},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			err := hex.UnmarshalJSONText(
-				tt.input,
-				tt.unmarshaler,
-			)
-			if tt.expectErr {
-				require.Error(t, err, "Test case: %s", tt.name)
-			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-			}
-		})
-	}
-}
-
-func TestString_MustToBytes(t *testing.T) {
-	tests := []struct {
-		name     string
-		input    hex.String
-		expected []byte
-		panics   bool
-	}{
-		{"Valid hex string", "0x68656c6c6f", []byte("hello"), false},
-		{"Another valid hex string", "0x776f726c64", []byte("world"), false},
-		{"Invalid hex string", "0xinvalid", nil, true},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			if tt.panics {
-				defer func() {
-					if r := recover(); r == nil {
-						t.Errorf("MustToBytes did not panic on invalid input")
-					}
-				}()
-				tt.input.MustToBytes()
-			} else {
-				result := tt.input.MustToBytes()
-				require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
-			}
-		})
-	}
-}
-
-func TestString_ToUint64(t *testing.T) {
-	tests := []struct {
-		name      string
-		input     hex.String
-		expected  uint64
-		expectErr bool
-	}{
-		{"Single digit", "0x1", 1, false},
-		{"Two digits", "0x10", 16, false},
-		{"Mixed digits and letters", "0x1a", 26, false},
-		{"Invalid hex string", "0xinvalid", 0, true},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			result, err := tt.input.ToUint64()
-			if tt.expectErr {
-				require.Error(t, err, "Test case: %s", tt.name)
-			} else {
-				require.NoError(t, err, "Test case: %s", tt.name)
-				require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
-			}
-		})
-	}
-}
-
-func TestString_MustToUInt64(t *testing.T) {
-	tests := []struct {
-		name     string
-		input    hex.String
-		expected uint64
-		panics   bool
-	}{
-		{"Single digit", "0x1", 1, false},
-		{"Two digits", "0x10", 16, false},
-		{"Mixed digits and letters", "0x1a", 26, false},
-		{"Invalid hex string", "0xinvalid", 0, true},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			if tt.panics {
-				defer func() {
-					if r := recover(); r == nil {
-						t.Errorf("MustToUInt64 did not panic on invalid input")
-					}
-				}()
-				tt.input.MustToUInt64()
-			} else {
-				result := tt.input.MustToUInt64()
-				require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
-			}
-		})
-	}
-}
-
-func TestString_MustToBigInt(t *testing.T) {
-	tests := []struct {
-		name     string
-		input    hex.String
-		expected *big.Int
-		panics   bool
-	}{
-		{"Valid hex string", "0x1", big.NewInt(1), false},
-		{"Another valid hex string", "0x10", big.NewInt(16), false},
-		{"Large valid hex string", "0x1a", big.NewInt(26), false},
-		{"Invalid hex string", "0xinvalid", nil, true},
-	}
-
-	for _, tt := range tests {
-		t.Run(tt.name, func(t *testing.T) {
-			if tt.panics {
-				defer func() {
-					if r := recover(); r == nil {
-						t.Errorf("MustToBigInt did not panic on invalid input")
-					}
-				}()
-				tt.input.MustToBigInt()
-			} else {
-				result := tt.input.MustToBigInt()
-				require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
-			}
-		})
-	}
-}
diff --git a/mod/primitives/pkg/encoding/hex/string.go b/mod/primitives/pkg/encoding/hex/string.go
deleted file mode 100644
index 71dc29b48..000000000
--- a/mod/primitives/pkg/encoding/hex/string.go
+++ /dev/null
@@ -1,206 +0,0 @@
-// SPDX-License-Identifier: BUSL-1.1
-//
-// Copyright (C) 2024, Berachain Foundation. All rights reserved.
-// Use of this software is governed by the Business Source License included
-// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
-//
-// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
-// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
-// VERSIONS OF THE LICENSED WORK.
-//
-// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
-// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
-// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
-//
-// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
-// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
-// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
-// TITLE.
-
-package hex
-
-import (
-	"bytes"
-	"encoding/hex"
-	"math/big"
-	"strconv"
-
-	"github.com/berachain/beacon-kit/mod/errors"
-)
-
-// String represents a hex string with 0x prefix.
-// Invariants: IsEmpty(s) > 0, has0xPrefix(s) == true.
-type String string
-
-// NewString creates a hex string with 0x prefix. It modifies the input to
-// ensure that the string invariants are satisfied.
-func NewString[T []byte | string](s T) String {
-	str := string(s)
-	str = ensureStringInvariants(str)
-	return String(str)
-}
-
-// UnmarshalText implements the encoding.TextUnmarshaler interface.
-// It validates the input text as a hex string and
-// assigns it to the String type.
-// Returns an error if the input is not a valid hex string.
-func (s *String) UnmarshalText(text []byte) error {
-	str := string(text)
-	err := isValidHex(str)
-	if err != nil {
-		return errors.Wrapf(ErrInvalidString, "%s", str)
-	}
-	*s = String(str)
-	return nil
-}
-
-func isValidHex(str string) error {
-	if len(str) == 0 {
-		return ErrEmptyString
-	} else if !has0xPrefix(str) {
-		return ErrMissingPrefix
-	}
-	return nil
-}
-
-// NewStringStrict creates a hex string with 0x prefix. It errors if any of the
-// string invariants are violated.
-func NewStringStrict[T []byte | string](s T) (String, error) {
-	str := string(s)
-	if len(str) == 0 {
-		return "", ErrEmptyString
-	} else if !has0xPrefix(str) {
-		return "", ErrMissingPrefix
-	}
-	return String(str), nil
-}
-
-// FromBytes creates a hex string with 0x prefix.
-func FromBytes[B ~[]byte](b B) String {
-	enc := make([]byte, len(b)*2+prefixLen)
-	copy(enc, prefix)
-	hex.Encode(enc[2:], b)
-	return NewString(enc)
-}
-
-// FromUint64 encodes i as a hex string with 0x prefix.
-func FromUint64[U ~uint64](i U) String {
-	enc := make([]byte, prefixLen, initialCapacity)
-	copy(enc, prefix)
-	//#nosec:G701 // i is a uint64, so it can't overflow.
-	return String(strconv.AppendUint(enc, uint64(i), hexBase))
-}
-
-// FromBigInt encodes bigint as a hex string with 0x prefix.
-// Precondition: bigint is non-negative.
-func FromBigInt(bigint *big.Int) String {
-	if sign := bigint.Sign(); sign == 0 {
-		return NewString("0x0")
-	} else if sign > 0 {
-		return NewString("0x" + bigint.Text(hexBase))
-	}
-	// this return should never reach if precondition is met
-	return NewString("0x" + bigint.Text(hexBase)[1:])
-}
-
-func FromJSONString[B ~[]byte](b B) String {
-	return NewString(bytes.Trim(b, "\""))
-}
-
-// Has0xPrefix returns true if s has a 0x prefix.
-func (s String) Has0xPrefix() bool {
-	return has0xPrefix[string](string(s))
-}
-
-// IsEmpty returns true if s is empty.
-func (s String) IsEmpty() bool {
-	return len(s) == 0
-}
-
-// ToBytes decodes a hex string with 0x prefix.
-func (s String) ToBytes() ([]byte, error) {
-	return hex.DecodeString(string(s[2:]))
-}
-
-// MustToBytes decodes a hex string with 0x prefix.
-// It panics for invalid input.
-func (s String) MustToBytes() []byte {
-	b, err := s.ToBytes()
-	if err != nil {
-		panic(err)
-	}
-	return b
-}
-
-// ToUint64 decodes a hex string with 0x prefix.
-func (s String) ToUint64() (uint64, error) {
-	raw, err := formatAndValidateNumber(s.Unwrap())
-	if err != nil {
-		return 0, err
-	}
-	return strconv.ParseUint(raw, 16, 64)
-}
-
-// MustToUInt64 decodes a hex string with 0x prefix.
-// It panics for invalid input.
-func (s String) MustToUInt64() uint64 {
-	i, err := s.ToUint64()
-	if err != nil {
-		panic(err)
-	}
-	return i
-}
-
-// ToBigInt decodes a hex string with 0x prefix.
-func (s String) ToBigInt() (*big.Int, error) {
-	raw, err := formatAndValidateNumber(s.Unwrap())
-	if err != nil {
-		return nil, err
-	}
-	if len(raw) > bytesPer256Bits {
-		return nil, ErrBig256Range
-	}
-	bigWordNibbles, err := getBigWordNibbles()
-	if err != nil {
-		return nil, err
-	}
-	words := make([]big.Word, len(raw)/bigWordNibbles+1)
-	end := len(raw)
-	for i := range words {
-		start := end - bigWordNibbles
-		if start < 0 {
-			start = 0
-		}
-		for ri := start; ri < end; ri++ {
-			nib := decodeNibble(raw[ri])
-			if nib == badNibble {
-				return nil, ErrInvalidString
-			}
-			words[i] *= 16
-			words[i] += big.Word(nib)
-		}
-		end = start
-	}
-	dec := new(big.Int).SetBits(words)
-	return dec, nil
-}
-
-// MustToBigInt decodes a hex string with 0x prefix.
-// It panics for invalid input.
-func (s String) MustToBigInt() *big.Int {
-	bi, err := s.ToBigInt()
-	if err != nil {
-		panic(err)
-	}
-	return bi
-}
-
-func (s String) AddQuotes() String {
-	return "\"" + s + "\""
-}
-
-// Unwrap returns the string value.
-func (s String) Unwrap() string {
-	return string(s)
-}
diff --git a/mod/primitives/pkg/encoding/hex/u64.go b/mod/primitives/pkg/encoding/hex/u64.go
index d3ac69f6a..ded536d4d 100644
--- a/mod/primitives/pkg/encoding/hex/u64.go
+++ b/mod/primitives/pkg/encoding/hex/u64.go
@@ -32,21 +32,11 @@ import (
 // of uint64 input.
 func MarshalText(b uint64) ([]byte, error) {
 	buf := make([]byte, prefixLen, initialCapacity)
-	copy(buf, prefix)
+	copy(buf, Prefix)
 	buf = strconv.AppendUint(buf, b, hexBase)
 	return buf, nil
 }
 
-// ValidateUnmarshalInput validates the input byte slice for unmarshaling.
-// It returns an error iff input is not a quoted string.
-// This is used to prevent exposing validation logic to the caller.
-func ValidateUnmarshalInput(input []byte) error {
-	if !isQuotedString(string(input)) {
-		return ErrNonQuotedString
-	}
-	return nil
-}
-
 // UnmarshalUint64Text parses a byte slice containing a hexadecimal string and
 // returns the uint64 value it represents.
 func UnmarshalUint64Text(input []byte) (uint64, error) {
@@ -54,7 +44,7 @@ func UnmarshalUint64Text(input []byte) (uint64, error) {
 	if err != nil {
 		return 0, err
 	}
-	if len(raw) > bytesPer64Bits {
+	if len(raw) > nibblesPer64Bits {
 		return 0, ErrUint64Range
 	}
 	var dec uint64
diff --git a/mod/primitives/pkg/encoding/hex/u64_test.go b/mod/primitives/pkg/encoding/hex/u64_test.go
index ebaf86880..570b2f2ab 100644
--- a/mod/primitives/pkg/encoding/hex/u64_test.go
+++ b/mod/primitives/pkg/encoding/hex/u64_test.go
@@ -31,31 +31,30 @@ func TestMarshalText(t *testing.T) {
 	tests := []struct {
 		name     string
 		input    uint64
-		expected string
+		expected []byte
 	}{
-		{"Zero", 0, "0x0"},
-		{"MaxByte", 255, "0xff"},
-		{"MaxWord", 65535, "0xffff"},
-		{"MaxDWord", 4294967295, "0xffffffff"},
-		{"MaxQWord", 18446744073709551615, "0xffffffffffffffff"},
+		{"Zero", 0, []byte("0x0")},
+		{"MaxByte", 255, []byte("0xff")},
+		{"Positive value", 12345, []byte("0x3039")},
+		{"MaxWord", 65535, []byte("0xffff")},
+		{"MaxDWord", 4294967295, []byte("0xffffffff")},
+		{"MaxQWord", 18446744073709551615, []byte("0xffffffffffffffff")},
 	}
 
-	for _, test := range tests {
-		t.Run(test.name, func(t *testing.T) {
-			result, err := hex.MarshalText(test.input)
-			require.NoError(t, err, "Test case %s", test.name)
-			require.Equal(
-				t,
-				test.expected,
-				string(result),
-				"Test case %s",
-				test.name,
-			)
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			result, err := hex.MarshalText(tt.input)
+			require.NoError(t, err)
+			require.Equal(t, tt.expected, result)
+
+			decoded, err := hex.UnmarshalUint64Text(result)
+			require.NoError(t, err)
+			require.Equal(t, tt.input, decoded)
 		})
 	}
 }
 
-func TestValidateUnmarshalInput(t *testing.T) {
+func TestValidateQuotedString(t *testing.T) {
 	tests := []struct {
 		name     string
 		input    []byte
@@ -69,11 +68,11 @@ func TestValidateUnmarshalInput(t *testing.T) {
 
 	for _, test := range tests {
 		t.Run(test.name, func(t *testing.T) {
-			err := hex.ValidateUnmarshalInput(test.input)
+			_, err := hex.ValidateQuotedString(test.input)
 			if test.expected != nil {
-				require.Equal(t, test.expected, err, "Test case %s", test.name)
+				require.ErrorIs(t, test.expected, err)
 			} else {
-				require.NoError(t, err, "Test case %s", test.name)
+				require.NoError(t, err)
 			}
 		})
 	}
@@ -99,10 +98,10 @@ func TestUnmarshalUint64Text(t *testing.T) {
 		t.Run(test.name, func(t *testing.T) {
 			result, err := hex.UnmarshalUint64Text(test.input)
 			if test.err != nil {
-				require.Equal(t, test.err, err, "Test case %s", test.name)
+				require.ErrorIs(t, test.err, err)
 			} else {
-				require.Equal(t, test.expected, result, "Test case %s", test.name)
 				require.NoError(t, err)
+				require.Equal(t, test.expected, result)
 			}
 		})
 	}
diff --git a/mod/primitives/pkg/encoding/json/json.go b/mod/primitives/pkg/encoding/json/json.go
index eff999ba6..862d8a2ac 100644
--- a/mod/primitives/pkg/encoding/json/json.go
+++ b/mod/primitives/pkg/encoding/json/json.go
@@ -23,29 +23,21 @@ package json
 
 import (
 	"encoding/json"
-
-	gojson "github.com/goccy/go-json"
 )
 
 // Marshaler is the interface implemented by types that
 // can marshal themselves into valid JSON.
-type Marshaler = gojson.Marshaler
+type Marshaler = json.Marshaler
 
 // Unmarshaler is the interface implemented by types
 // that can unmarshal a JSON description of themselves.
-type Unmarshaler = gojson.Unmarshaler
+type Unmarshaler = json.Unmarshaler
 
-// Marshal is a wrapper for gojson.Marshal, which provides high-performance JSON
-// encoding.
-var Marshal = gojson.Marshal
+var Marshal = json.Marshal
 
-// MarshalIndent is a wrapper for gojson.MarshalIndent, which provides
-// high-performance JSON encoding with indentation.
-var MarshalIndent = gojson.MarshalIndent
+var MarshalIndent = json.MarshalIndent
 
-// Unmarshal is a wrapper for gojson.Unmarshal, which provides high-performance
-// JSON decoding.
-var Unmarshal = gojson.Unmarshal
+var Unmarshal = json.Unmarshal
 
 // RawMessage is an alias for json.RawMessage, represensting a raw encoded JSON
 // value. It implements Marshaler and Unmarshaler and can be used to delay JSON
diff --git a/mod/primitives/pkg/encoding/ssz/schema/definitions.go b/mod/primitives/pkg/encoding/ssz/schema/definitions.go
index de9bbb69b..72a80b067 100644
--- a/mod/primitives/pkg/encoding/ssz/schema/definitions.go
+++ b/mod/primitives/pkg/encoding/ssz/schema/definitions.go
@@ -41,16 +41,17 @@ func (b basic) ID() ID { return Basic }
 // ItemLength returns the size of the basic type in bytes.
 func (b basic) ItemLength() uint64 { return uint64(b) }
 
-// position always returns an error for basic types, as they have no children.
+// ItemPosition always returns an error for basic types,
+// as they have no children.
 func (b basic) ItemPosition(_ string) (uint64, uint8, uint8, error) {
 	return 0, 0, 0, errors.New("basic type has no children")
 }
 
-// child returns the basic type itself, as it has no children.
+// ElementType returns the basic type itself, as it has no children.
 func (b basic) ElementType(_ string) SSZType { return b }
 
-// Chunks returns the number of 32-byte chunks required to represent the basic
-// type.
+// HashChunkCount returns the number of 32-byte chunks
+// required to represent the basic type.
 func (b basic) HashChunkCount() uint64 { return 1 }
 
 /* -------------------------------------------------------------------------- */
@@ -93,7 +94,7 @@ func (v vector) HashChunkCount() uint64 {
 	return chunks
 }
 
-// typ.length describes the length for vector.
+// Length describes the length for vector.
 func (v vector) Length() uint64 {
 	return v.length
 }
@@ -134,12 +135,12 @@ func (l list) ElementType(_ string) SSZType {
 	return l.elementType
 }
 
-// typ.length describes the limit for list.
+// Length describes the limit for list.
 func (l list) Length() uint64 {
 	return l.limit
 }
 
-// position returns the chunk index and offset for a given list index.
+// ItemPosition returns the chunk index and offset for a given list index.
 func (l list) ItemPosition(p string) (uint64, uint8, uint8, error) {
 	i, err := strconv.ParseUint(p, 10, 64)
 	if err != nil {
diff --git a/mod/primitives/pkg/math/pow/pow.go b/mod/primitives/pkg/math/pow/pow.go
index adf50b8ee..cd23abd6e 100644
--- a/mod/primitives/pkg/math/pow/pow.go
+++ b/mod/primitives/pkg/math/pow/pow.go
@@ -24,7 +24,7 @@ package pow
 //
 //nolint:mnd // todo fix.
 func PrevPowerOfTwo[U64T ~uint64](u U64T) U64T {
-	if u == 0 {
+	if u <= 1 {
 		return 1
 	}
 	u |= u >> 1
@@ -40,7 +40,7 @@ func PrevPowerOfTwo[U64T ~uint64](u U64T) U64T {
 //
 //nolint:mnd // todo fix.
 func NextPowerOfTwo[U64T ~uint64](u U64T) U64T {
-	if u == 0 {
+	if u <= 1 {
 		return 1
 	}
 	if u > 1<<63 {
diff --git a/mod/primitives/pkg/math/u256.go b/mod/primitives/pkg/math/u256.go
index 4f10344c8..fafd9e0c3 100644
--- a/mod/primitives/pkg/math/u256.go
+++ b/mod/primitives/pkg/math/u256.go
@@ -21,6 +21,7 @@
 package math
 
 import (
+	"fmt"
 	"math/big"
 
 	"github.com/holiman/uint256"
@@ -35,8 +36,17 @@ func NewU256(v uint64) *U256 {
 }
 
 // NewU256FromBigInt creates a new U256 from a big.Int.
-func NewU256FromBigInt(b *big.Int) *U256 {
-	return uint256.MustFromBig(b)
+func NewU256FromBigInt(b *big.Int) (*U256, error) {
+	// Negative integers ought to be rejected by math.NewU256FromBigInt(b)
+	// since they cannot be expressed in the U256 type. However this does
+	// not seem to happen (see holiman/uint256#115), so guarding here.
+	if b.Sign() < 0 {
+		return nil, fmt.Errorf(
+			"cannot convert negative big.Int %s to uint256",
+			b.String(),
+		)
+	}
+	return uint256.MustFromBig(b), nil
 }
 
 // U256Hex represents a 256-bit unsigned integer that is marshaled to JSON
diff --git a/mod/primitives/pkg/math/u64.go b/mod/primitives/pkg/math/u64.go
index cad6b74ea..19e5ace83 100644
--- a/mod/primitives/pkg/math/u64.go
+++ b/mod/primitives/pkg/math/u64.go
@@ -24,6 +24,7 @@ import (
 	"math/big"
 	"strconv"
 
+	"github.com/berachain/beacon-kit/mod/errors"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math/log"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math/pow"
@@ -67,7 +68,11 @@ func (u U64) MarshalText() ([]byte, error) {
 
 // UnmarshalJSON implements json.Unmarshaler.
 func (u *U64) UnmarshalJSON(input []byte) error {
-	return hex.UnmarshalJSONText(input, u)
+	strippedInput, err := hex.ValidateQuotedString(input)
+	if err != nil {
+		return err
+	}
+	return u.UnmarshalText(strippedInput)
 }
 
 // ---------------------------------- Hex ----------------------------------
@@ -136,11 +141,19 @@ func (u U64) ILog2Floor() uint8 {
 
 // ---------------------------- Gwei Methods ----------------------------
 
+var ErrGweiOverflow = errors.New("gwei from big.Int overflows")
+
 // GweiFromWei returns the value of Wei in Gwei.
-func GweiFromWei(i *big.Int) Gwei {
+func GweiFromWei(i *big.Int) (Gwei, error) {
 	intToGwei := big.NewInt(0).SetUint64(GweiPerWei)
 	i.Div(i, intToGwei)
-	return Gwei(i.Uint64())
+	if !i.IsUint64() {
+		// a Gwei amount >= (2**64) * (10**9) or negative would not
+		// be representable as uint64. This should not happen but
+		// we still guard against a serialization bug or other mishap.
+		return 0, ErrGweiOverflow
+	}
+	return Gwei(i.Uint64()), nil
 }
 
 // ToWei converts a value from Gwei to Wei.
diff --git a/mod/primitives/pkg/math/u64_test.go b/mod/primitives/pkg/math/u64_test.go
index c9510377b..82ddd537e 100644
--- a/mod/primitives/pkg/math/u64_test.go
+++ b/mod/primitives/pkg/math/u64_test.go
@@ -60,9 +60,10 @@ func TestU64_UnmarshalJSON(t *testing.T) {
 		{"Valid hex string", "\"0x7b\"", 123, nil},
 		{"Zero value", "\"0x0\"", 0, nil},
 		{"Max uint64 value", "\"0xffffffffffffffff\"", ^uint64(0), nil},
-		{"Invalid hex string", "\"0xxyz\"", 0,
-			hex.ErrInvalidString,
-		},
+		{"Invalid hex string", "\"0xxyz\"", 0, hex.ErrInvalidString},
+		{"Invalid JSON text", "", 0, hex.ErrNonQuotedString},
+		{"Invalid quoted JSON text", `"0x`, 0, hex.ErrNonQuotedString},
+		{"Empty JSON text", `""`, 0, hex.ErrEmptyString},
 	}
 
 	for _, tt := range tests {
@@ -328,38 +329,83 @@ func TestU64_PrevPowerOfTwo(t *testing.T) {
 
 func TestGweiFromWei(t *testing.T) {
 	tests := []struct {
-		name     string
-		input    *big.Int
-		expected math.Gwei
+		name        string
+		input       func(t *testing.T) *big.Int
+		expectedErr error
+		expectedRes math.Gwei
 	}{
 		{
-			name:     "zero wei",
-			input:    big.NewInt(0),
-			expected: math.Gwei(0),
-		},
-		{
-			name:     "one gwei",
-			input:    big.NewInt(math.GweiPerWei),
-			expected: math.Gwei(1),
-		},
-		{
-			name:     "arbitrary wei",
-			input:    big.NewInt(math.GweiPerWei * 123456789),
-			expected: math.Gwei(123456789),
+			name: "invalid negative gwei",
+			input: func(t *testing.T) *big.Int {
+				t.Helper()
+				b, _ := new(big.Int).SetString("-1", 10)
+				return b
+			},
+			expectedErr: math.ErrGweiOverflow,
+			expectedRes: math.Gwei(0),
+		},
+		{
+			name: "invalid huge gwei",
+			input: func(t *testing.T) *big.Int {
+				t.Helper()
+				b, _ := new(
+					big.Int,
+				).SetString("18446744073709551616000000000", 10)
+				return b
+			},
+			expectedErr: math.ErrGweiOverflow,
+			expectedRes: math.Gwei(0),
+		},
+		{
+			name: "zero wei",
+			input: func(t *testing.T) *big.Int {
+				t.Helper()
+				return big.NewInt(0)
+			},
+			expectedErr: nil,
+			expectedRes: math.Gwei(0),
+		},
+		{
+			name: "one gwei",
+			input: func(t *testing.T) *big.Int {
+				t.Helper()
+				return big.NewInt(math.GweiPerWei)
+			},
+			expectedErr: nil,
+			expectedRes: math.Gwei(1),
+		},
+		{
+			name: "arbitrary wei",
+			input: func(t *testing.T) *big.Int {
+				t.Helper()
+				return big.NewInt(math.GweiPerWei * 123456789)
+			},
+			expectedErr: nil,
+			expectedRes: math.Gwei(123456789),
 		},
 		{
 			name: "max uint64 wei",
-			input: new(
-				big.Int,
-			).Mul(big.NewInt(math.GweiPerWei), new(big.Int).SetUint64(^uint64(0))),
-			expected: math.Gwei(1<<64 - 1),
+			input: func(t *testing.T) *big.Int {
+				t.Helper()
+				return new(big.Int).Mul(
+					big.NewInt(math.GweiPerWei),
+					new(big.Int).SetUint64(^uint64(0)),
+				)
+			},
+			expectedErr: nil,
+			expectedRes: math.Gwei(1<<64 - 1),
 		},
 	}
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			result := math.GweiFromWei(tt.input)
-			require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
+			result, err := math.GweiFromWei(tt.input(t))
+			if tt.expectedErr != nil {
+				require.ErrorIs(t, err, tt.expectedErr)
+			} else {
+				require.NoError(t, err)
+				require.Equal(t, tt.expectedRes, result, "Test case: %s", tt.name)
+			}
 		})
 	}
 }
@@ -368,40 +414,62 @@ func TestGwei_ToWei(t *testing.T) {
 	tests := []struct {
 		name     string
 		input    math.Gwei
-		expected *math.U256
+		expected func(t *testing.T) *math.U256
 	}{
 		{
-			name:     "zero gwei",
-			input:    math.Gwei(0),
-			expected: math.NewU256FromBigInt(big.NewInt(0)),
+			name:  "zero gwei",
+			input: math.Gwei(0),
+			expected: func(t *testing.T) *math.U256 {
+				t.Helper()
+				res, err := math.NewU256FromBigInt(big.NewInt(0))
+				require.NoError(t, err)
+				return res
+			},
 		},
 		{
-			name:     "one gwei",
-			input:    math.Gwei(1),
-			expected: math.NewU256FromBigInt(big.NewInt(math.GweiPerWei)),
+			name:  "one gwei",
+			input: math.Gwei(1),
+			expected: func(t *testing.T) *math.U256 {
+				t.Helper()
+				res, err := math.NewU256FromBigInt(big.NewInt(math.GweiPerWei))
+				require.NoError(t, err)
+				return res
+			},
 		},
 		{
 			name:  "arbitrary gwei",
 			input: math.Gwei(123456789),
-			expected: math.NewU256FromBigInt(new(big.Int).Mul(
-				big.NewInt(math.GweiPerWei),
-				big.NewInt(123456789),
-			)),
+			expected: func(t *testing.T) *math.U256 {
+				t.Helper()
+				n := new(big.Int).Mul(
+					big.NewInt(math.GweiPerWei),
+					big.NewInt(123456789),
+				)
+				res, err := math.NewU256FromBigInt(n)
+				require.NoError(t, err)
+				return res
+			},
 		},
 		{
 			name:  "max uint64 gwei",
 			input: math.Gwei(1<<64 - 1),
-			expected: math.NewU256FromBigInt(new(big.Int).Mul(
-				big.NewInt(math.GweiPerWei),
-				new(big.Int).SetUint64(1<<64-1),
-			)),
+			expected: func(t *testing.T) *math.U256 {
+				t.Helper()
+				n := new(big.Int).Mul(
+					big.NewInt(math.GweiPerWei),
+					new(big.Int).SetUint64(1<<64-1),
+				)
+				res, err := math.NewU256FromBigInt(n)
+				require.NoError(t, err)
+				return res
+			},
 		},
 	}
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			result := tt.input.ToWei()
-			require.Equal(t, tt.expected, result, "Test case: %s", tt.name)
+			require.Equal(t, tt.expected(t), result)
 		})
 	}
 }
diff --git a/mod/primitives/pkg/merkle/tree_fuzz_test.go b/mod/primitives/pkg/merkle/tree_fuzz_test.go
index be36dd7ae..7fce414d4 100644
--- a/mod/primitives/pkg/merkle/tree_fuzz_test.go
+++ b/mod/primitives/pkg/merkle/tree_fuzz_test.go
@@ -45,16 +45,22 @@ func FuzzTree_IsValidMerkleBranch(f *testing.F) {
 		return proofs
 	}
 
-	items := [][32]byte{
-		byteslib.ToBytes32([]byte("A")),
-		byteslib.ToBytes32([]byte("B")),
-		byteslib.ToBytes32([]byte("C")),
-		byteslib.ToBytes32([]byte("D")),
-		byteslib.ToBytes32([]byte("E")),
-		byteslib.ToBytes32([]byte("F")),
-		byteslib.ToBytes32([]byte("G")),
-		byteslib.ToBytes32([]byte("H")),
+	items := make([][32]byte, 0)
+	for _, v := range [][]byte{
+		byteslib.ExtendToSize([]byte("A"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("B"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("C"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("D"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("E"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("F"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("G"), byteslib.B32Size),
+	} {
+		item, err := byteslib.ToBytes32(v)
+		require.NoError(f, err)
+		items = append(items, item)
 	}
+	require.NotEmpty(f, items) // appease nilaway
+
 	m, err := merkle.NewTreeFromLeavesWithDepth(items, depth)
 	require.NoError(f, err)
 	proof, err := m.MerkleProofWithMixin(0)
@@ -68,16 +74,26 @@ func FuzzTree_IsValidMerkleBranch(f *testing.F) {
 	f.Add(root[:], items[0][:], uint64(0), proofRaw, depth)
 
 	f.Fuzz(
-		func(_ *testing.T,
+		func(t *testing.T,
 			root, item []byte, merkleIndex uint64,
 			proofRaw []byte, depth uint8,
 		) {
+			var r, leaf byteslib.B32
+
+			item = byteslib.ExtendToSize(item, byteslib.B32Size)[:byteslib.B32Size]
+			leaf, err = byteslib.ToBytes32(item)
+			require.NoError(t, err)
+
+			root = byteslib.ExtendToSize(root, byteslib.B32Size)[:byteslib.B32Size]
+			r, err = byteslib.ToBytes32(root)
+			require.NoError(t, err)
+
 			merkle.IsValidMerkleBranch(
-				byteslib.ToBytes32(item),
+				leaf,
 				splitProofs(proofRaw),
 				depth,
 				merkleIndex,
-				byteslib.ToBytes32(root),
+				r,
 			)
 		},
 	)
diff --git a/mod/primitives/pkg/merkle/tree_test.go b/mod/primitives/pkg/merkle/tree_test.go
index 03ef277b1..8f4bb0e5e 100644
--- a/mod/primitives/pkg/merkle/tree_test.go
+++ b/mod/primitives/pkg/merkle/tree_test.go
@@ -40,15 +40,21 @@ func TestNewTreeFromLeavesWithDepth_NoItemsProvided(t *testing.T) {
 }
 
 func TestNewTreeFromLeavesWithDepth_DepthSupport(t *testing.T) {
-	items := [][32]byte{
-		byteslib.ToBytes32([]byte("A")),
-		byteslib.ToBytes32([]byte("BB")),
-		byteslib.ToBytes32([]byte("CCC")),
-		byteslib.ToBytes32([]byte("DDDD")),
-		byteslib.ToBytes32([]byte("EEEEE")),
-		byteslib.ToBytes32([]byte("FFFFFF")),
-		byteslib.ToBytes32([]byte("GGGGGGG")),
+	items := make([][32]byte, 0)
+	for _, v := range [][]byte{
+		byteslib.ExtendToSize([]byte("A"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("BB"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("CCC"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("DDDD"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("EEEEE"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("FFFFFF"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("GGGGGGG"), byteslib.B32Size),
+	} {
+		item, err := byteslib.ToBytes32(v)
+		require.NoError(t, err)
+		items = append(items, item)
 	}
+
 	// Supported depth
 	m1, err := merkle.NewTreeFromLeavesWithDepth(
 		items,
@@ -68,16 +74,22 @@ func TestNewTreeFromLeavesWithDepth_DepthSupport(t *testing.T) {
 
 func TestMerkleTree_IsValidMerkleBranch(t *testing.T) {
 	treeDepth := uint8(32)
-	items := [][32]byte{
-		byteslib.ToBytes32([]byte("A")),
-		byteslib.ToBytes32([]byte("B")),
-		byteslib.ToBytes32([]byte("C")),
-		byteslib.ToBytes32([]byte("D")),
-		byteslib.ToBytes32([]byte("E")),
-		byteslib.ToBytes32([]byte("F")),
-		byteslib.ToBytes32([]byte("G")),
-		byteslib.ToBytes32([]byte("H")),
+	items := make([][32]byte, 0)
+	for _, v := range [][]byte{
+		byteslib.ExtendToSize([]byte("A"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("B"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("C"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("D"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("E"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("F"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("G"), byteslib.B32Size),
+	} {
+		item, err := byteslib.ToBytes32(v)
+		require.NoError(t, err)
+		items = append(items, item)
 	}
+	require.NotEmpty(t, items)
+
 	m, err := merkle.NewTreeFromLeavesWithDepth(
 		items,
 		treeDepth,
@@ -108,10 +120,14 @@ func TestMerkleTree_IsValidMerkleBranch(t *testing.T) {
 			proof,
 		),
 	)
+
+	it := byteslib.ExtendToSize([]byte("buzz"), byteslib.B32Size)
+	item, err := byteslib.ToBytes32(it)
+	require.NoError(t, err)
 	require.False(
 		t,
 		merkle.IsValidMerkleBranch(
-			common.Root(byteslib.ToBytes32([]byte("buzz"))),
+			common.Root(item),
 			proof,
 			treeDepth,
 			3,
@@ -122,16 +138,22 @@ func TestMerkleTree_IsValidMerkleBranch(t *testing.T) {
 
 func TestMerkleTree_VerifyProof(t *testing.T) {
 	treeDepth := uint8(32)
-	items := [][32]byte{
-		byteslib.ToBytes32([]byte("A")),
-		byteslib.ToBytes32([]byte("B")),
-		byteslib.ToBytes32([]byte("C")),
-		byteslib.ToBytes32([]byte("D")),
-		byteslib.ToBytes32([]byte("E")),
-		byteslib.ToBytes32([]byte("F")),
-		byteslib.ToBytes32([]byte("G")),
-		byteslib.ToBytes32([]byte("H")),
+
+	items := make([][32]byte, 0)
+	for _, v := range [][]byte{
+		byteslib.ExtendToSize([]byte("A"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("B"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("C"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("D"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("E"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("F"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("G"), byteslib.B32Size),
+	} {
+		item, err := byteslib.ToBytes32(v)
+		require.NoError(t, err)
+		items = append(items, item)
 	}
+	require.NotEmpty(t, items) // appease nilaway
 
 	m, err := merkle.NewTreeFromLeavesWithDepth[[32]byte](
 		items,
@@ -152,11 +174,15 @@ func TestMerkleTree_VerifyProof(t *testing.T) {
 	proof, err = m.MerkleProofWithMixin(3)
 	require.NoError(t, err)
 	require.True(t, merkle.VerifyProof(root, items[3], 3, proof))
+
+	it := byteslib.ExtendToSize([]byte("buzz"), byteslib.B32Size)
+	item, err := byteslib.ToBytes32(it)
+	require.NoError(t, err)
 	require.False(
 		t,
 		merkle.VerifyProof(
 			root,
-			common.Root(byteslib.ToBytes32([]byte("buzz"))),
+			common.Root(item),
 			3,
 			proof,
 		),
@@ -165,22 +191,30 @@ func TestMerkleTree_VerifyProof(t *testing.T) {
 
 func TestMerkleTree_NegativeIndexes(t *testing.T) {
 	treeDepth := uint8(32)
-	items := [][32]byte{
-		byteslib.ToBytes32([]byte("A")),
-		byteslib.ToBytes32([]byte("B")),
-		byteslib.ToBytes32([]byte("C")),
-		byteslib.ToBytes32([]byte("D")),
-		byteslib.ToBytes32([]byte("E")),
-		byteslib.ToBytes32([]byte("F")),
-		byteslib.ToBytes32([]byte("G")),
-		byteslib.ToBytes32([]byte("H")),
+	items := make([][32]byte, 0)
+	for _, v := range [][]byte{
+		byteslib.ExtendToSize([]byte("A"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("B"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("C"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("D"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("E"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("F"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("G"), byteslib.B32Size),
+	} {
+		item, err := byteslib.ToBytes32(v)
+		require.NoError(t, err)
+		items = append(items, item)
 	}
 	m, err := merkle.NewTreeFromLeavesWithDepth(
 		items,
 		treeDepth,
 	)
 	require.NoError(t, err)
-	err = m.Insert(byteslib.ToBytes32([]byte{'J'}), -1)
+
+	it := byteslib.ExtendToSize([]byte("J"), byteslib.B32Size)
+	extraItem, err := byteslib.ToBytes32(it)
+	require.NoError(t, err)
+	err = m.Insert(extraItem, -1)
 	require.ErrorIs(t, err, merkle.ErrNegativeIndex)
 }
 
@@ -210,8 +244,12 @@ func TestMerkleTree_VerifyProof_TrieUpdated(t *testing.T) {
 		),
 	)
 
-	// Now we update the merkle.
-	require.NoError(t, m.Insert(byteslib.ToBytes32([]byte{5}), 3))
+	// Now we update the merkle
+	it := byteslib.ExtendToSize([]byte{5}, byteslib.B32Size)
+	item, err := byteslib.ToBytes32(it)
+
+	require.NoError(t, err)
+	require.NoError(t, m.Insert(item, 3))
 	proof, err = m.MerkleProofWithMixin(3)
 	require.NoError(t, err)
 	root = m.HashTreeRoot()
@@ -223,19 +261,27 @@ func TestMerkleTree_VerifyProof_TrieUpdated(t *testing.T) {
 	), "Old item should not verify")
 
 	// Now we update the tree at an index larger than the number of items.
-	require.NoError(t, m.Insert(byteslib.ToBytes32([]byte{6}), 15))
+	it = byteslib.ExtendToSize([]byte{6}, byteslib.B32Size)
+	item, err = byteslib.ToBytes32(it)
+	require.NoError(t, err)
+	require.NoError(t, m.Insert(item, 15))
 }
 
 func BenchmarkNewTreeFromLeavesWithDepth(b *testing.B) {
 	treeDepth := uint8(32)
-	items := [][32]byte{
-		byteslib.ToBytes32([]byte("A")),
-		byteslib.ToBytes32([]byte("BB")),
-		byteslib.ToBytes32([]byte("CCC")),
-		byteslib.ToBytes32([]byte("DDDD")),
-		byteslib.ToBytes32([]byte("EEEEE")),
-		byteslib.ToBytes32([]byte("FFFFFF")),
-		byteslib.ToBytes32([]byte("GGGGGGG")),
+	items := make([][32]byte, 0)
+	for _, v := range [][]byte{
+		byteslib.ExtendToSize([]byte("A"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("BB"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("CCC"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("DDDD"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("EEEEE"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("FFFFFF"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("GGGGGGG"), byteslib.B32Size),
+	} {
+		item, err := byteslib.ToBytes32(v)
+		require.NoError(b, err)
+		items = append(items, item)
 	}
 	for i := 0; i < b.N; i++ {
 		_, err := merkle.NewTreeFromLeavesWithDepth(
@@ -249,10 +295,17 @@ func BenchmarkNewTreeFromLeavesWithDepth(b *testing.B) {
 func BenchmarkInsertTrie_Optimized(b *testing.B) {
 	treeDepth := uint8(32)
 	b.StopTimer()
-	numDeposits := 16000
-	items := make([][32]byte, numDeposits)
+
+	var (
+		numDeposits = 16000
+		items       = make([][32]byte, numDeposits)
+		err         error
+	)
+
 	for i := range numDeposits {
-		items[i] = byteslib.ToBytes32([]byte(strconv.Itoa(i)))
+		it := byteslib.ExtendToSize([]byte(strconv.Itoa(i)), byteslib.B32Size)
+		items[i], err = byteslib.ToBytes32(it)
+		require.NoError(b, err)
 	}
 	tr, err := merkle.NewTreeFromLeavesWithDepth[[32]byte](
 		items,
@@ -260,7 +313,10 @@ func BenchmarkInsertTrie_Optimized(b *testing.B) {
 	)
 	require.NoError(b, err)
 
-	someItem := byteslib.ToBytes32([]byte("hello-world"))
+	it := byteslib.ExtendToSize([]byte("hello-world"), byteslib.B32Size)
+	someItem, err := byteslib.ToBytes32(it)
+	require.NoError(b, err)
+
 	b.StartTimer()
 	for i := range b.N {
 		require.NoError(b, tr.Insert(someItem, i%numDeposits))
@@ -270,15 +326,22 @@ func BenchmarkInsertTrie_Optimized(b *testing.B) {
 func BenchmarkGenerateProof(b *testing.B) {
 	treeDepth := uint8(32)
 	b.StopTimer()
-	items := [][32]byte{
-		byteslib.ToBytes32([]byte("A")),
-		byteslib.ToBytes32([]byte("BB")),
-		byteslib.ToBytes32([]byte("CCC")),
-		byteslib.ToBytes32([]byte("DDDD")),
-		byteslib.ToBytes32([]byte("EEEEE")),
-		byteslib.ToBytes32([]byte("FFFFFF")),
-		byteslib.ToBytes32([]byte("GGGGGGG")),
+
+	items := make([][32]byte, 0)
+	for _, v := range [][]byte{
+		byteslib.ExtendToSize([]byte("A"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("BB"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("CCC"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("DDDD"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("EEEEE"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("FFFFFF"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("GGGGGGG"), byteslib.B32Size),
+	} {
+		item, err := byteslib.ToBytes32(v)
+		require.NoError(b, err)
+		items = append(items, item)
 	}
+
 	goodTree, err := merkle.NewTreeFromLeavesWithDepth[[32]byte](
 		items,
 		treeDepth,
@@ -295,15 +358,23 @@ func BenchmarkGenerateProof(b *testing.B) {
 func BenchmarkIsValidMerkleBranch(b *testing.B) {
 	treeDepth := uint8(4)
 	b.StopTimer()
-	items := [][32]byte{
-		byteslib.ToBytes32([]byte("A")),
-		byteslib.ToBytes32([]byte("BB")),
-		byteslib.ToBytes32([]byte("CCC")),
-		byteslib.ToBytes32([]byte("DDDD")),
-		byteslib.ToBytes32([]byte("EEEEE")),
-		byteslib.ToBytes32([]byte("FFFFFF")),
-		byteslib.ToBytes32([]byte("GGGGGGG")),
+
+	items := make([][32]byte, 0)
+	for _, v := range [][]byte{
+		byteslib.ExtendToSize([]byte("A"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("BB"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("CCC"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("DDDD"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("EEEEE"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("FFFFFF"), byteslib.B32Size),
+		byteslib.ExtendToSize([]byte("GGGGGGG"), byteslib.B32Size),
+	} {
+		item, err := byteslib.ToBytes32(v)
+		require.NoError(b, err)
+		items = append(items, item)
 	}
+	require.NotEmpty(b, items) // appease nilaway
+
 	m, err := merkle.NewTreeFromLeavesWithDepth[[32]byte](
 		items,
 		treeDepth,
diff --git a/mod/primitives/pkg/net/jwt/jwt.go b/mod/primitives/pkg/net/jwt/jwt.go
index dc45154ba..8721a9342 100644
--- a/mod/primitives/pkg/net/jwt/jwt.go
+++ b/mod/primitives/pkg/net/jwt/jwt.go
@@ -72,7 +72,7 @@ func NewRandom() (*Secret, error) {
 	if err != nil {
 		return nil, err
 	}
-	return NewFromHex(hex.FromBytes(secret).Unwrap())
+	return NewFromHex(hex.EncodeBytes(secret))
 }
 
 // BuildSignedToken creates a signed JWT token from the secret.
@@ -90,13 +90,13 @@ func (s *Secret) BuildSignedToken() (string, error) {
 // String returns the JWT secret as a string with the first 8 characters
 // visible and the rest masked out for security.
 func (s *Secret) String() string {
-	secret := hex.FromBytes(s[:]).Unwrap()
+	secret := hex.EncodeBytes(s[:])
 	return secret[:8] + strings.Repeat("*", len(secret[8:]))
 }
 
 // Hex returns the JWT secret as a hexadecimal string.
 func (s *Secret) Hex() string {
-	return hex.FromBytes(s[:]).Unwrap()
+	return hex.EncodeBytes(s[:])
 }
 
 // Bytes returns the JWT secret as a byte array.
diff --git a/mod/primitives/pkg/net/jwt/jwt_test.go b/mod/primitives/pkg/net/jwt/jwt_test.go
index 3afec5203..2c5f9cc38 100644
--- a/mod/primitives/pkg/net/jwt/jwt_test.go
+++ b/mod/primitives/pkg/net/jwt/jwt_test.go
@@ -157,10 +157,10 @@ func TestSecretRoundTripEncoding(t *testing.T) {
 	require.NoError(t, err, "NewRandom() error")
 
 	// Encode the original secret to hex string
-	encodedSecret := hex.FromBytes(originalSecret.Bytes())
+	encodedSecret := hex.EncodeBytes(originalSecret.Bytes())
 
 	// Decode the hex string back to secret
-	decodedSecret, err := jwt.NewFromHex(encodedSecret.Unwrap())
+	decodedSecret, err := jwt.NewFromHex(encodedSecret)
 	require.NoError(t, err, "NewFromHex() error")
 
 	// Compare the original and decoded secrets
diff --git a/mod/primitives/pkg/transition/context.go b/mod/primitives/pkg/transition/context.go
index 2cbc3cb42..8e8d23a2d 100644
--- a/mod/primitives/pkg/transition/context.go
+++ b/mod/primitives/pkg/transition/context.go
@@ -20,7 +20,11 @@
 
 package transition
 
-import "context"
+import (
+	"context"
+
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+)
 
 // Context is the context for the state transition.
 type Context struct {
@@ -38,6 +42,11 @@ type Context struct {
 	// SkipValidateResult indicates whether to validate the result of
 	// the state transition.
 	SkipValidateResult bool
+	// Address of current block proposer
+	ProposerAddress []byte
+	// ConsensusTime returns the timestamp of current consensus request.
+	// It is used to build next payload and to validate currentpayload.
+	ConsensusTime math.U64
 }
 
 // GetOptimisticEngine returns whether to optimistically assume the execution
@@ -65,6 +74,18 @@ func (c *Context) GetSkipValidateResult() bool {
 	return c.SkipValidateResult
 }
 
+// GetProposerAddress returns the address of the validator
+// selected by consensus to propose the block.
+func (c *Context) GetProposerAddress() []byte {
+	return c.ProposerAddress
+}
+
+// GetConsensusTime returns the timestamp of current consensus request.
+// It is used to build next payload and to validate currentpayload.
+func (c *Context) GetConsensusTime() math.U64 {
+	return c.ConsensusTime
+}
+
 // Unwrap returns the underlying standard context.
 func (c *Context) Unwrap() context.Context {
 	return c.Context
diff --git a/mod/state-transition/go.mod b/mod/state-transition/go.mod
index 2ebe2ac9f..6dca4f895 100644
--- a/mod/state-transition/go.mod
+++ b/mod/state-transition/go.mod
@@ -2,22 +2,172 @@ module github.com/berachain/beacon-kit/mod/state-transition
 
 go 1.23.0
 
+replace (
+	cosmossdk.io/api => cosmossdk.io/api v0.7.3-0.20240806152830-8fb47b368cd4
+	cosmossdk.io/core => cosmossdk.io/core v0.0.0-20240806152830-8fb47b368cd4
+	cosmossdk.io/core/testing => cosmossdk.io/core/testing v0.0.0-20240806152830-8fb47b368cd4
+	github.com/berachain/beacon-kit/mod/beacon => ../beacon/
+	github.com/berachain/beacon-kit/mod/node-core => ../node-core
+	github.com/berachain/beacon-kit/mod/observability => ../observability
+	github.com/berachain/beacon-kit/mod/storage => ../storage
+	github.com/cosmos/cosmos-sdk => github.com/berachain/cosmos-sdk v0.46.0-beta2.0.20240808182639-7bdbf06a94f2
+)
+
 require (
-	github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240808194557-e72e74f58197
-	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240618214413-d5ec0e66b3dd
+	cosmossdk.io/core v1.0.0
+	cosmossdk.io/log v1.4.1
+	cosmossdk.io/store v1.1.1-0.20240418092142-896cdf1971bc
+	github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e
+	github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad
+	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f
+	github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720
+	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0
+	github.com/berachain/beacon-kit/mod/log v0.0.0-20240821000339-4d4242ba4a50
+	github.com/berachain/beacon-kit/mod/node-core v0.0.0-20240821225446-81f31b0aac98
 	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570
+	github.com/berachain/beacon-kit/mod/storage v0.0.0-20240822205119-6d7f90fac7d7
+	github.com/cosmos/cosmos-db v1.0.2
+	github.com/cosmos/cosmos-sdk v0.53.0
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc
 	github.com/go-faster/xor v1.0.0
 	github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8
+	github.com/stretchr/testify v1.9.0
 	golang.org/x/sync v0.8.0
 )
 
+require (
+	buf.build/gen/go/cometbft/cometbft/protocolbuffers/go v1.34.2-20240701160653-fedbb9acfd2f.2 // indirect
+	buf.build/gen/go/cosmos/gogo-proto/protocolbuffers/go v1.34.2-20240130113600-88ef6483f90f.2 // indirect
+	cosmossdk.io/api v0.7.5 // indirect
+	cosmossdk.io/collections v0.4.0 // indirect
+	cosmossdk.io/depinject v1.0.0 // indirect
+	cosmossdk.io/errors v1.0.1 // indirect
+	cosmossdk.io/errors/v2 v2.0.0-20240731132947-df72853b3ca5 // indirect
+	cosmossdk.io/math v1.3.0 // indirect
+	cosmossdk.io/store/v2 v2.0.0-20240821144902-e88c138760a3 // indirect
+	cosmossdk.io/x/auth v0.0.0-20240806152830-8fb47b368cd4 // indirect
+	cosmossdk.io/x/bank v0.0.0-20240806152830-8fb47b368cd4 // indirect
+	cosmossdk.io/x/consensus v0.0.0-20240806152830-8fb47b368cd4 // indirect
+	cosmossdk.io/x/staking v0.0.0-20240806152830-8fb47b368cd4 // indirect
+	cosmossdk.io/x/tx v0.13.4-0.20240623110059-dec2d5583e39 // indirect
+	filippo.io/edwards25519 v1.1.0 // indirect
+	github.com/99designs/go-keychain v0.0.0-20191008050251-8e49817e8af4 // indirect
+	github.com/99designs/keyring v1.2.2 // indirect
+	github.com/DataDog/datadog-go v4.8.3+incompatible // indirect
+	github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 // indirect
+	github.com/berachain/beacon-kit/mod/cli v0.0.0-20241107170417-7905e3d59a1d // indirect
+	github.com/berachain/beacon-kit/mod/consensus v0.0.0-20241107170417-7905e3d59a1d // indirect
+	github.com/berachain/beacon-kit/mod/da v0.0.0-20240820191615-398849c34954 // indirect
+	github.com/berachain/beacon-kit/mod/execution v0.0.0-20240820191615-398849c34954 // indirect
+	github.com/berachain/beacon-kit/mod/node-api v0.0.0-20241107170417-7905e3d59a1d // indirect
+	github.com/berachain/beacon-kit/mod/node-api/engines v0.0.0-20240806160829-cde2d1347e7e // indirect
+	github.com/berachain/beacon-kit/mod/observability v0.0.0-unpublished // indirect
+	github.com/berachain/beacon-kit/mod/payload v0.0.0-20240705193247-d464364483df // indirect
+	github.com/bgentry/speakeasy v0.2.0 // indirect
+	github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4 // indirect
+	github.com/cometbft/cometbft-db v0.13.0 // indirect
+	github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 // indirect
+	github.com/cosmos/btcutil v1.0.5 // indirect
+	github.com/cosmos/cosmos-proto v1.0.0-beta.5 // indirect
+	github.com/cosmos/crypto v0.1.2 // indirect
+	github.com/cosmos/go-bip39 v1.0.0 // indirect
+	github.com/cosmos/gogoproto v1.7.0 // indirect
+	github.com/cosmos/iavl v1.2.1-0.20240731145221-594b181f427e // indirect
+	github.com/cosmos/ics23/go v0.10.0 // indirect
+	github.com/cosmos/ledger-cosmos-go v0.13.3 // indirect
+	github.com/danieljoos/wincred v1.2.1 // indirect
+	github.com/dgraph-io/badger/v4 v4.2.0 // indirect
+	github.com/dgraph-io/ristretto v0.1.1 // indirect
+	github.com/dustin/go-humanize v1.0.1 // indirect
+	github.com/dvsekhvalnov/jose2go v1.7.0 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
+	github.com/fsnotify/fsnotify v1.7.0 // indirect
+	github.com/gabriel-vasile/mimetype v1.4.6 // indirect
+	github.com/go-kit/kit v0.13.0 // indirect
+	github.com/go-kit/log v0.2.1 // indirect
+	github.com/go-logfmt/logfmt v0.6.0 // indirect
+	github.com/go-playground/locales v0.14.1 // indirect
+	github.com/go-playground/universal-translator v0.18.1 // indirect
+	github.com/go-playground/validator/v10 v10.22.0 // indirect
+	github.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2 // indirect
+	github.com/gofrs/uuid v4.4.0+incompatible // indirect
+	github.com/golang-jwt/jwt v3.2.2+incompatible // indirect
+	github.com/golang-jwt/jwt/v5 v5.2.1 // indirect
+	github.com/golang/glog v1.2.1 // indirect
+	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
+	github.com/golang/protobuf v1.5.4 // indirect
+	github.com/google/btree v1.1.2 // indirect
+	github.com/google/flatbuffers v24.3.25+incompatible // indirect
+	github.com/google/go-cmp v0.6.0 // indirect
+	github.com/google/orderedcode v0.0.1 // indirect
+	github.com/google/uuid v1.6.0 // indirect
+	github.com/grpc-ecosystem/grpc-gateway v1.16.0 // indirect
+	github.com/gsterjov/go-libsecret v0.0.0-20161001094733-a6f4afe4910c // indirect
+	github.com/hashicorp/go-immutable-radix v1.3.1 // indirect
+	github.com/hashicorp/go-metrics v0.5.3 // indirect
+	github.com/hashicorp/golang-lru v1.0.2 // indirect
+	github.com/hashicorp/golang-lru/v2 v2.0.7 // indirect
+	github.com/hashicorp/hcl v1.0.0 // indirect
+	github.com/hdevalence/ed25519consensus v0.2.0 // indirect
+	github.com/iancoleman/strcase v0.3.0 // indirect
+	github.com/inconshreveable/mousetrap v1.1.0 // indirect
+	github.com/labstack/echo/v4 v4.12.0 // indirect
+	github.com/labstack/gommon v0.4.2 // indirect
+	github.com/leodido/go-urn v1.4.0 // indirect
+	github.com/lib/pq v1.10.9 // indirect
+	github.com/linxGnu/grocksdb v1.9.2 // indirect
+	github.com/magiconair/properties v1.8.7 // indirect
+	github.com/mattn/go-colorable v0.1.13 // indirect
+	github.com/mattn/go-isatty v0.0.20 // indirect
+	github.com/minio/highwayhash v1.0.3 // indirect
+	github.com/mtibben/percent v0.2.1 // indirect
+	github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a // indirect
+	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
+	github.com/phuslu/log v1.0.110 // indirect
+	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
+	github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect
+	github.com/rs/cors v1.11.0 // indirect
+	github.com/rs/zerolog v1.33.0 // indirect
+	github.com/sagikazarmark/locafero v0.6.0 // indirect
+	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
+	github.com/spf13/afero v1.11.0 // indirect
+	github.com/spf13/cast v1.7.0 // indirect
+	github.com/spf13/cobra v1.8.1 // indirect
+	github.com/spf13/pflag v1.0.5 // indirect
+	github.com/spf13/viper v1.19.0 // indirect
+	github.com/stretchr/objx v0.5.2 // indirect
+	github.com/subosito/gotenv v1.6.0 // indirect
+	github.com/tendermint/go-amino v0.16.0 // indirect
+	github.com/tidwall/btree v1.7.0 // indirect
+	github.com/valyala/bytebufferpool v1.0.0 // indirect
+	github.com/valyala/fasttemplate v1.2.2 // indirect
+	github.com/zondax/hid v0.9.2 // indirect
+	github.com/zondax/ledger-go v0.14.3 // indirect
+	gitlab.com/yawning/secp256k1-voi v0.0.0-20230925100816-f2616030848b // indirect
+	gitlab.com/yawning/tuplehash v0.0.0-20230713102510-df83abbf9a02 // indirect
+	go.opencensus.io v0.24.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
+	golang.org/x/term v0.25.0 // indirect
+	golang.org/x/time v0.5.0 // indirect
+	google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 // indirect
+	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
+	google.golang.org/grpc v1.65.0 // indirect
+	gopkg.in/ini.v1 v1.67.0 // indirect
+	gopkg.in/yaml.v3 v3.0.1 // indirect
+	gotest.tools/v3 v3.5.1 // indirect
+	pgregory.net/rapid v1.1.0 // indirect
+	sigs.k8s.io/yaml v1.4.0 // indirect
+)
+
 require (
 	github.com/DataDog/zstd v1.5.6 // indirect
 	github.com/Microsoft/go-winio v0.6.2 // indirect
 	github.com/VictoriaMetrics/fastcache v1.12.2 // indirect
 	github.com/beorn7/perks v1.0.1 // indirect
-	github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240703145037-b5612ab256db // indirect
+	github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df
 	github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e // indirect
 	github.com/bits-and-blooms/bitset v1.13.0 // indirect
 	github.com/btcsuite/btcd/btcec/v2 v2.3.3 // indirect
@@ -37,7 +187,7 @@ require (
 	github.com/ethereum/c-kzg-4844 v1.0.3 // indirect
 	github.com/ethereum/go-ethereum v1.14.7 // indirect
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 // indirect
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
 	github.com/go-ole/go-ole v1.3.0 // indirect
 	github.com/goccy/go-json v0.10.3 // indirect
@@ -48,7 +198,7 @@ require (
 	github.com/gorilla/websocket v1.5.3 // indirect
 	github.com/holiman/bloomfilter/v2 v2.0.3 // indirect
 	github.com/holiman/uint256 v1.3.1 // indirect
-	github.com/karalabe/ssz v0.2.1-0.20240724074312-3d1ff7a6f7c4 // indirect
+	github.com/karalabe/ssz v0.2.1-0.20240724074312-3d1ff7a6f7c4
 	github.com/klauspost/compress v1.17.9 // indirect
 	github.com/klauspost/cpuid/v2 v2.2.8 // indirect
 	github.com/kr/pretty v0.3.1 // indirect
@@ -75,12 +225,11 @@ require (
 	github.com/tklauser/numcpus v0.8.0 // indirect
 	github.com/umbracle/fastrlp v0.1.0 // indirect
 	github.com/yusufpapurcu/wmi v1.2.4 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	rsc.io/tmplfunc v0.0.3 // indirect
 )
diff --git a/mod/state-transition/go.sum b/mod/state-transition/go.sum
index 471aa8e07..da58d68d3 100644
--- a/mod/state-transition/go.sum
+++ b/mod/state-transition/go.sum
@@ -1,35 +1,138 @@
+buf.build/gen/go/cometbft/cometbft/protocolbuffers/go v1.34.2-20240701160653-fedbb9acfd2f.2 h1:90/4O5QkHb8EZdA2SAhueRzYw6u5ZHCPKtReFqshnTY=
+buf.build/gen/go/cometbft/cometbft/protocolbuffers/go v1.34.2-20240701160653-fedbb9acfd2f.2/go.mod h1:1+3gJj2NvZ1mTLAtHu+lMhOjGgQPiCKCeo+9MBww0Eo=
+buf.build/gen/go/cosmos/gogo-proto/protocolbuffers/go v1.34.2-20240130113600-88ef6483f90f.2 h1:b7EEYTUHmWSBEyISHlHvXbJPqtKiHRuUignL1tsHnNQ=
+buf.build/gen/go/cosmos/gogo-proto/protocolbuffers/go v1.34.2-20240130113600-88ef6483f90f.2/go.mod h1:HqcXMSa5qnNuakaMUo+hWhF51mKbcrZxGl9Vp5EeJXc=
+cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+cosmossdk.io/api v0.7.3-0.20240806152830-8fb47b368cd4 h1:GWHIYxkZnQZ2/BVzBV0Qu2xyPRcysPI3kHToCGmRmh0=
+cosmossdk.io/api v0.7.3-0.20240806152830-8fb47b368cd4/go.mod h1:vV3VnJvvK4IWkc1deNEJ1OAL028zw1WPezwKKDAsq60=
+cosmossdk.io/collections v0.4.0 h1:PFmwj2W8szgpD5nOd8GWH6AbYNi1f2J6akWXJ7P5t9s=
+cosmossdk.io/collections v0.4.0/go.mod h1:oa5lUING2dP+gdDquow+QjlF45eL1t4TJDypgGd+tv0=
+cosmossdk.io/core v0.0.0-20240806152830-8fb47b368cd4 h1:dDdZ0xneWTA63vu1OOc1fEpqYQNangvSsxrdPWymlQ8=
+cosmossdk.io/core v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:sLzMwAW9HW+Nm3GltUVHDRSRZbcXLy9+2AYgi2bwt/s=
+cosmossdk.io/core/testing v0.0.0-20240806152830-8fb47b368cd4 h1:M/Rcz6Bp6mQLgBdysfnu0ABUWWWcATQ1192/W8jBGy0=
+cosmossdk.io/core/testing v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:s6VKCgPZqs+CnW+18fNQqKoQtqxZ+U9bjz9BcySgNPs=
+cosmossdk.io/depinject v1.0.0 h1:dQaTu6+O6askNXO06+jyeUAnF2/ssKwrrszP9t5q050=
+cosmossdk.io/depinject v1.0.0/go.mod h1:zxK/h3HgHoA/eJVtiSsoaRaRA2D5U4cJ5thIG4ssbB8=
+cosmossdk.io/errors v1.0.1 h1:bzu+Kcr0kS/1DuPBtUFdWjzLqyUuCiyHjyJB6srBV/0=
+cosmossdk.io/errors v1.0.1/go.mod h1:MeelVSZThMi4bEakzhhhE/CKqVv3nOJDA25bIqRDu/U=
+cosmossdk.io/errors/v2 v2.0.0-20240731132947-df72853b3ca5 h1:IQNdY2kB+k+1OM2DvqFG1+UgeU1JzZrWtwuWzI3ZfwA=
+cosmossdk.io/errors/v2 v2.0.0-20240731132947-df72853b3ca5/go.mod h1:0CuYKkFHxc1vw2JC+t21THBCALJVROrWVR/3PQ1urpc=
+cosmossdk.io/log v1.4.1 h1:wKdjfDRbDyZRuWa8M+9nuvpVYxrEOwbD/CA8hvhU8QM=
+cosmossdk.io/log v1.4.1/go.mod h1:k08v0Pyq+gCP6phvdI6RCGhLf/r425UT6Rk/m+o74rU=
+cosmossdk.io/math v1.3.0 h1:RC+jryuKeytIiictDslBP9i1fhkVm6ZDmZEoNP316zE=
+cosmossdk.io/math v1.3.0/go.mod h1:vnRTxewy+M7BtXBNFybkuhSH4WfedVAAnERHgVFhp3k=
+cosmossdk.io/schema v0.1.1 h1:I0M6pgI7R10nq+/HCQfbO6BsGBZA8sQy+duR1Y3aKcA=
+cosmossdk.io/schema v0.1.1/go.mod h1:RDAhxIeNB4bYqAlF4NBJwRrgtnciMcyyg0DOKnhNZQQ=
+cosmossdk.io/store v1.1.1-0.20240418092142-896cdf1971bc h1:R9O9d75e0qZYUsVV0zzi+D7cNLnX2JrUOQNoIPaF0Bg=
+cosmossdk.io/store v1.1.1-0.20240418092142-896cdf1971bc/go.mod h1:amTTatOUV3u1PsKmNb87z6/galCxrRbz9kRdJkL0DyU=
+cosmossdk.io/store/v2 v2.0.0-20240821144902-e88c138760a3 h1:KhVcFQYUqkBMnqEo+2NjYv0+rwazWuGaY5iXdQOHgDw=
+cosmossdk.io/store/v2 v2.0.0-20240821144902-e88c138760a3/go.mod h1:IWUShGUIixihbCEiAJtM9Z2fwIVqahXLVXEjxEn2/ps=
+cosmossdk.io/x/auth v0.0.0-20240806152830-8fb47b368cd4 h1:e+6AXOLdjp0j+ZCdOyJVJ+zAMF2PVLlMwyBFiVm+gWk=
+cosmossdk.io/x/auth v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:B9HtgWG6fy6XZZLvOnGqMxU31CUVaC3q+yWvZ1IXCqk=
+cosmossdk.io/x/bank v0.0.0-20240806152830-8fb47b368cd4 h1:p11oqqwpPM+YpVmk3zl0MHlNQBp4y61p/GZpSw9DVMg=
+cosmossdk.io/x/bank v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:b9+OQO/zoDDLjKK20CwhPjU7GDpLIeVw3gyYxjam/DM=
+cosmossdk.io/x/consensus v0.0.0-20240806152830-8fb47b368cd4 h1:CISlpOSE+2UGSPA0WNwAqjwKLrT1rHSEGwLZ3QCug2M=
+cosmossdk.io/x/consensus v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:eMHEvLm6/1ijhYtaZw/D4SxVXrufrx6d4UhcY/Zr3xI=
+cosmossdk.io/x/staking v0.0.0-20240806152830-8fb47b368cd4 h1:k5VbC0/BYAkMg/BJKFNQBSE3/B/I+NMuPO99jIhAAm0=
+cosmossdk.io/x/staking v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:iZUWClYP5k18b6vRY8Xaq+qlhr9a/VB8gdq6XqRvF1s=
+cosmossdk.io/x/tx v0.13.4-0.20240623110059-dec2d5583e39 h1:fZvdmYfQdJ+CX5axx3ChtLOCAIXoLzLoFf7hHAI+fws=
+cosmossdk.io/x/tx v0.13.4-0.20240623110059-dec2d5583e39/go.mod h1:iEnMX34NiupZH074wbEtyiozWEGhsk2OSNB3AriYl3A=
+filippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=
+filippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=
+github.com/99designs/go-keychain v0.0.0-20191008050251-8e49817e8af4 h1:/vQbFIOMbk2FiG/kXiLl8BRyzTWDw7gX/Hz7Dd5eDMs=
+github.com/99designs/go-keychain v0.0.0-20191008050251-8e49817e8af4/go.mod h1:hN7oaIRCjzsZ2dE+yG5k+rsdt3qcwykqK6HVGcKwsw4=
+github.com/99designs/keyring v1.2.2 h1:pZd3neh/EmUzWONb35LxQfvuY7kiSXAq3HQd97+XBn0=
+github.com/99designs/keyring v1.2.2/go.mod h1:wes/FrByc8j7lFOAGLGSNEg8f/PaI3cgTBqhFkHUrPk=
+github.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 h1:L/gRVlceqvL25UVaW/CKtUDjefjrs0SPonmDGUVOYP0=
+github.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=
+github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
+github.com/DataDog/datadog-go v3.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=
+github.com/DataDog/datadog-go v4.8.3+incompatible h1:fNGaYSuObuQb5nzeTQqowRAd9bpDIRRV4/gUtIBjh8Q=
+github.com/DataDog/datadog-go v4.8.3+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=
 github.com/DataDog/zstd v1.5.6 h1:LbEglqepa/ipmmQJUDnSsfvA8e8IStVcGaFWDuxvGOY=
 github.com/DataDog/zstd v1.5.6/go.mod h1:g4AWEaM3yOg3HYfnJ3YIawPnVdXJh9QME85blwSAmyw=
 github.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=
 github.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=
+github.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 h1:TngWCqHvy9oXAN6lEVMRuU21PR1EtLVZJmdB18Gu3Rw=
+github.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5/go.mod h1:lmUJ/7eu/Q8D7ML55dXQrVaamCz2vxCfdQBasLZfHKk=
 github.com/VictoriaMetrics/fastcache v1.12.2 h1:N0y9ASrJ0F6h0QaC3o6uJb3NIZ9VKLjCM7NQbSmF7WI=
 github.com/VictoriaMetrics/fastcache v1.12.2/go.mod h1:AmC+Nzz1+3G2eCPapF6UcsnkThDcMsQicp4xDukwJYI=
+github.com/VividCortex/gohistogram v1.0.0 h1:6+hBz+qvs0JOrrNhhmR7lFxo5sINxBCGXrdtl/UvroE=
+github.com/VividCortex/gohistogram v1.0.0/go.mod h1:Pf5mBqqDxYaXu3hDrrU+w6nw50o/4+TcAqDqk/vUH7g=
+github.com/adlio/schema v1.3.6 h1:k1/zc2jNfeiZBA5aFTRy37jlBIuCkXCm0XmvpzCKI9I=
+github.com/adlio/schema v1.3.6/go.mod h1:qkxwLgPBd1FgLRHYVCmQT/rrBr3JH38J9LjmVzWNudg=
+github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
+github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
+github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
+github.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
 github.com/allegro/bigcache v1.2.1-0.20190218064605-e24eb225f156 h1:eMwmnE/GDgah4HI848JfFxHt+iPb26b4zyfspmqY0/8=
 github.com/allegro/bigcache v1.2.1-0.20190218064605-e24eb225f156/go.mod h1:Cb/ax3seSYIx7SuZdm2G2xzfwmv3TPSk2ucNfQESPXM=
+github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
+github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=
+github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=
 github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=
 github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=
-github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240703145037-b5612ab256db h1:vGczI1vJ6s86tSDS4tsllzlWZUVZ42xZ710GoHMd4to=
-github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240703145037-b5612ab256db/go.mod h1:rbvfJqTKUIckels2AlWy+XuG+UGnegoFQuHC+TUg+zA=
-github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240808194557-e72e74f58197 h1:wVWkiiERY/7kaXvE/VNPPUtYp/l8ky6QSuKM3ThVMXU=
-github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240808194557-e72e74f58197/go.mod h1:LiOiqrJhhLH/GPo0XE5fel3EYyi7X6dwBOyTqZakTeQ=
-github.com/berachain/beacon-kit/mod/errors v0.0.0-20240618214413-d5ec0e66b3dd h1:jD/ggR959ZX+lqxsMzoRJzrGvFK7PI6UmgnRwOTh4S4=
-github.com/berachain/beacon-kit/mod/errors v0.0.0-20240618214413-d5ec0e66b3dd/go.mod h1:iXa+Q+i0q+GCpLzkusulO57K5vlkDgM77jtfMr3QdFA=
+github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 h1:04G7REWDoTzty7rWlTBrmdmcFALoKYluUhz5NXeqaiM=
+github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8/go.mod h1:3wR01SglBZ+HvDvhbugz/Mxem22JUThJRwo2Ec8Q0No=
+github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df h1:mnD1LKqDQ0n+OFdDqOuvKaEiUKRJzsO4V0wyyn/gJYg=
+github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df/go.mod h1:bTFB4Rdvm7D/WdwPYkqQ+8T0XOMBv0pzXfp1E46BFX8=
+github.com/berachain/beacon-kit/mod/cli v0.0.0-20241107170417-7905e3d59a1d h1:n/19ZIZOHbXaPPRsMakklmEg3ru5Q2qDvRVvL6dUkho=
+github.com/berachain/beacon-kit/mod/cli v0.0.0-20241107170417-7905e3d59a1d/go.mod h1:M4ld8lQp4xs/afMrmZGvdwtnwRN1KmQoVVAkxxS99NM=
+github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad h1:A71t/ENiUmIAbeosMeoV2Re1cSG1OJHwsDlRGjmRGy8=
+github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad/go.mod h1:sWT7sNyE7fyNtn0EwxBHRNsEy6NlaGFDbPpQUkbrGvY=
+github.com/berachain/beacon-kit/mod/consensus v0.0.0-20241107170417-7905e3d59a1d h1:eMT1D2nGa1u0xvwzvL8xak2u6i1Si6bzyavwkHfFAKg=
+github.com/berachain/beacon-kit/mod/consensus v0.0.0-20241107170417-7905e3d59a1d/go.mod h1:7yo4F0saeNWgYWhU5h0nDdZClISGZj4y2EIQv/9LSxg=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f h1:Vzglhdv60M7LBS3FBuqK0eUX8vYJBJnL/RwYpxUswpo=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f/go.mod h1:cZd8cFZ+ylhh3/NUbrdXO2ri1/7KOaYBjo1B8MgbgMM=
+github.com/berachain/beacon-kit/mod/da v0.0.0-20240820191615-398849c34954 h1:uFAdG6vtoOFxvz0pjkl5D0XGc4PcR0Ukf3M7gU3B92o=
+github.com/berachain/beacon-kit/mod/da v0.0.0-20240820191615-398849c34954/go.mod h1:n6pq+wYP5+jBZbxsVwL0Y9pspcXhNYcA3gHOaJ4rxeA=
+github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720 h1:rVltwwt4JAhpvqeRDZ8J07e9XM+jzfDCJEghPA4r5lg=
+github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720/go.mod h1:kGxAesqTkt75+QYQ73O9I5PqAicSL9JGh5wypiWgb8I=
+github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0 h1:kCSrkb/uVXfMKJPKjf0c7nlJkwn5cNwMxtzRW4zNq2A=
+github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0/go.mod h1:og0jtHZosPDTyhge9tMBlRItoZ4Iv3aZFM9n4QDpcdo=
+github.com/berachain/beacon-kit/mod/execution v0.0.0-20240820191615-398849c34954 h1:n68WUPCAFBsk439G7YQB91sSnBEPZ83c2sJlGQ4B3Wc=
+github.com/berachain/beacon-kit/mod/execution v0.0.0-20240820191615-398849c34954/go.mod h1:Hz9RML6GtY9eiCy6lhtf2HtzW5GEoazcv/IHbMw6R1A=
 github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e h1:0/FDBXtagMkpta/f4J2uAah2NM1G+0dqxngzMzrmbw4=
 github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e/go.mod h1:7/SXz8S5VpFl2thcKuBdu1OId+SgI1o4N+S1FB92Zw8=
+github.com/berachain/beacon-kit/mod/log v0.0.0-20240821000339-4d4242ba4a50 h1:7NCEVmPxy4Tp0WF5n9NR7iSf5owQNq4zSE96gyvxCGc=
+github.com/berachain/beacon-kit/mod/log v0.0.0-20240821000339-4d4242ba4a50/go.mod h1:HbttMaTWH7JU3vzKxwxIirnLju7rHeUg1vKjuKWlcbA=
+github.com/berachain/beacon-kit/mod/node-api v0.0.0-20241107170417-7905e3d59a1d h1:6x9yEAKgkm+3JbQ0j+hW4stWTXQtUxKc0FtRjQ0Fyas=
+github.com/berachain/beacon-kit/mod/node-api v0.0.0-20241107170417-7905e3d59a1d/go.mod h1:kJxnsgUePnGHJKnaiYqa0yYmqJmLmcMTPD7p2fG6RU8=
+github.com/berachain/beacon-kit/mod/node-api/engines v0.0.0-20240806160829-cde2d1347e7e h1:RJSPVKiuK4h2IJEIsJDX2JGbqY3ZdKGzvaEN8Dx7kYc=
+github.com/berachain/beacon-kit/mod/node-api/engines v0.0.0-20240806160829-cde2d1347e7e/go.mod h1:lj5dEWEjUn4Mj9/qVrCKrfGqE7FCObk39VfqXs3Eo/E=
+github.com/berachain/beacon-kit/mod/payload v0.0.0-20240705193247-d464364483df h1:fLL+7ZZcbVOmE3XE0o+ZGS8zyPLjki7LrZAsXpcG4Sc=
+github.com/berachain/beacon-kit/mod/payload v0.0.0-20240705193247-d464364483df/go.mod h1:wbSa9W1CDDzR9AptQfYf/16bWqktaIQIZdJsuKWeqC8=
 github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570 h1:w0Gkg31VQRFDv0EJjYgVtlpza7kSaJq7U28zxZjfZeE=
 github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570/go.mod h1:Mrq1qol8vbkgZp2IMPFwngg75qE3k9IvT2MouBEhuus=
+github.com/berachain/cosmos-sdk v0.46.0-beta2.0.20240808182639-7bdbf06a94f2 h1:4qwOPga+dKeDelSJ6pseasQq6fcjd7iXhah0y7enuco=
+github.com/berachain/cosmos-sdk v0.46.0-beta2.0.20240808182639-7bdbf06a94f2/go.mod h1:DUyJJMMuFJ9OZAhnFMLA0KTFGoVw61p8wnqtV3Wgx3c=
+github.com/bgentry/speakeasy v0.2.0 h1:tgObeVOf8WAvtuAX6DhJ4xks4CFNwPDZiqzGqIHE51E=
+github.com/bgentry/speakeasy v0.2.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=
 github.com/bits-and-blooms/bitset v1.13.0 h1:bAQ9OPNFYbGHV6Nez0tmNI0RiEu7/hxlYJRUA0wFAVE=
 github.com/bits-and-blooms/bitset v1.13.0/go.mod h1:7hO7Gc7Pp1vODcmWvKMRA9BNmbv6a/7QIWpPxHddWR8=
 github.com/btcsuite/btcd/btcec/v2 v2.3.3 h1:6+iXlDKE8RMtKsvK0gshlXIuPbyWM/h84Ensb7o3sC0=
 github.com/btcsuite/btcd/btcec/v2 v2.3.3/go.mod h1:zYzJ8etWJQIv1Ogk7OzpWjowwOdXY1W/17j2MW85J04=
+github.com/btcsuite/btcd/btcutil v1.1.5 h1:+wER79R5670vs/ZusMTF1yTcRYE5GUsFbdjdisflzM8=
+github.com/btcsuite/btcd/btcutil v1.1.5/go.mod h1:PSZZ4UitpLBWzxGd5VGOrLnmOjtPP/a6HaFo12zMs00=
 github.com/btcsuite/btcd/chaincfg/chainhash v1.1.0 h1:59Kx4K6lzOW5w6nFlA0v5+lk/6sjybR934QNHSJZPTQ=
 github.com/btcsuite/btcd/chaincfg/chainhash v1.1.0/go.mod h1:7SFka0XMvUgj3hfZtydOrQY2mwhPclbT2snogU7SQQc=
+github.com/cenkalti/backoff v2.2.1+incompatible h1:tNowT99t7UNflLxfYYSlKYsBpXdEet03Pg2g16Swow4=
+github.com/cenkalti/backoff v2.2.1+incompatible/go.mod h1:90ReRw6GdpyfrHakVjL/QHaoyV4aDUVVkXQJJJ3NXXM=
+github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
+github.com/cespare/cp v1.1.1 h1:nCb6ZLdB7NRaqsm91JtQTAme2SKJzXVsdPIPkyJr1MU=
+github.com/cespare/cp v1.1.1/go.mod h1:SOGHArjBr4JWaSDEVpWpo/hNg6RoKrls6Oh40hiwW+s=
+github.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=
 github.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=
 github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=
 github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=
+github.com/circonus-labs/circonus-gometrics v2.3.1+incompatible/go.mod h1:nmEj6Dob7S7YxXgwXpfOuvO54S+tGdZdw9fuRZt25Ag=
+github.com/circonus-labs/circonusllhist v0.1.3/go.mod h1:kMXHVDlOchFAehlya5ePtbp5jckzBHf4XRpQvBOLI+I=
+github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
+github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
 github.com/cockroachdb/datadriven v1.0.3-0.20230413201302-be42291fc80f h1:otljaYPt5hWxV3MUfO5dFPFiOXg9CyG5/kCfayTqsJ4=
 github.com/cockroachdb/datadriven v1.0.3-0.20230413201302-be42291fc80f/go.mod h1:a9RdTaap04u637JoCzcUoIcDmvwSUtcUFtT/C3kJlTU=
 github.com/cockroachdb/errors v1.11.3 h1:5bA+k2Y6r+oz/6Z/RFlNeVCesGARKuC6YymtcDrbC/I=
@@ -44,15 +147,48 @@ github.com/cockroachdb/redact v1.1.5 h1:u1PMllDkdFfPWaNGMyLD1+so+aq3uUItthCFqzwP
 github.com/cockroachdb/redact v1.1.5/go.mod h1:BVNblN9mBWFyMyqK1k3AAiSxhvhfK2oOZZ2lK+dpvRg=
 github.com/cockroachdb/tokenbucket v0.0.0-20230807174530-cc333fc44b06 h1:zuQyyAKVxetITBuuhv3BI9cMrmStnpT18zmgmTxunpo=
 github.com/cockroachdb/tokenbucket v0.0.0-20230807174530-cc333fc44b06/go.mod h1:7nc4anLGjupUW/PeY5qiNYsdNXj7zopG+eqsS7To5IQ=
+github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4 h1:LyYO/PPHwQsnGhTNJzWfCi9xg7EEyuMORRqrQZJQjYc=
+github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4/go.mod h1:gYT9oZe8H3xTWgocfjbnOV4v7IjzaEWqM+JJO3Z3R60=
+github.com/cometbft/cometbft-db v0.13.0 h1:Ea0YyR4phCwdOzFo1IWoN9fZz1DHFh6w59b3TCCibJY=
+github.com/cometbft/cometbft-db v0.13.0/go.mod h1:KiHYylxxaQrOxdiTOpJMhwiGvOKpiCdaqkAM9JcxcJ8=
+github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 h1:dEOaTNsJrOTOSysBgAE9pK6zeNASUR6gsFW8s0zcRRU=
+github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4/go.mod h1:NDFKiBBD8HJC6QQLAoUI99YhsiRZtg2+FJWfk6A6m6o=
 github.com/consensys/bavard v0.1.13 h1:oLhMLOFGTLdlda/kma4VOJazblc7IM5y5QPd2A/YjhQ=
 github.com/consensys/bavard v0.1.13/go.mod h1:9ItSMtA/dXMAiL7BG6bqW2m3NdSEObYWoH223nGHukI=
 github.com/consensys/gnark-crypto v0.13.0 h1:VPULb/v6bbYELAPTDFINEVaMTTybV5GLxDdcjnS+4oc=
 github.com/consensys/gnark-crypto v0.13.0/go.mod h1:wKqwsieaKPThcFkHe0d0zMsbHEUWFmZcG7KBCse210o=
+github.com/containerd/continuity v0.3.0 h1:nisirsYROK15TAMVukJOUyGJjz4BNQJBVsNvAXZJ/eg=
+github.com/containerd/continuity v0.3.0/go.mod h1:wJEAIwKOm/pBZuBd0JmeTvnLquTB1Ag8espWhkykbPM=
+github.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
+github.com/cosmos/btcutil v1.0.5 h1:t+ZFcX77LpKtDBhjucvnOH8C2l2ioGsBNEQ3jef8xFk=
+github.com/cosmos/btcutil v1.0.5/go.mod h1:IyB7iuqZMJlthe2tkIFL33xPyzbFYP0XVdS8P5lUPis=
+github.com/cosmos/cosmos-db v1.0.2 h1:hwMjozuY1OlJs/uh6vddqnk9j7VamLv+0DBlbEXbAKs=
+github.com/cosmos/cosmos-db v1.0.2/go.mod h1:Z8IXcFJ9PqKK6BIsVOB3QXtkKoqUOp1vRvPT39kOXEA=
+github.com/cosmos/cosmos-proto v1.0.0-beta.5 h1:eNcayDLpip+zVLRLYafhzLvQlSmyab+RC5W7ZfmxJLA=
+github.com/cosmos/cosmos-proto v1.0.0-beta.5/go.mod h1:hQGLpiIUloJBMdQMMWb/4wRApmI9hjHH05nefC0Ojec=
+github.com/cosmos/crypto v0.1.2 h1:Yn500sPY+9sKVdhiPUSDtt8JOpBGMB515dOmla4zfls=
+github.com/cosmos/crypto v0.1.2/go.mod h1:b6VWz3HczIpBaQPvI7KrbQeF3pXHh0al3T5e0uwMBQw=
+github.com/cosmos/go-bip39 v1.0.0 h1:pcomnQdrdH22njcAatO0yWojsUnCO3y2tNoV1cb6hHY=
+github.com/cosmos/go-bip39 v1.0.0/go.mod h1:RNJv0H/pOIVgxw6KS7QeX2a0Uo0aKUlfhZ4xuwvCdJw=
+github.com/cosmos/gogogateway v1.2.0 h1:Ae/OivNhp8DqBi/sh2A8a1D0y638GpL3tkmLQAiKxTE=
+github.com/cosmos/gogogateway v1.2.0/go.mod h1:iQpLkGWxYcnCdz5iAdLcRBSw3h7NXeOkZ4GUkT+tbFI=
+github.com/cosmos/gogoproto v1.7.0 h1:79USr0oyXAbxg3rspGh/m4SWNyoz/GLaAh0QlCe2fro=
+github.com/cosmos/gogoproto v1.7.0/go.mod h1:yWChEv5IUEYURQasfyBW5ffkMHR/90hiHgbNgrtp4j0=
+github.com/cosmos/iavl v1.2.1-0.20240731145221-594b181f427e h1:5bxw1E0peLMrr8ZO9mYT0d9sxy0WgR1ZEWb92yjKnnk=
+github.com/cosmos/iavl v1.2.1-0.20240731145221-594b181f427e/go.mod h1:GiM43q0pB+uG53mLxLDzimxM9l/5N9UuSY3/D0huuVw=
+github.com/cosmos/ics23/go v0.10.0 h1:iXqLLgp2Lp+EdpIuwXTYIQU+AiHj9mOC2X9ab++bZDM=
+github.com/cosmos/ics23/go v0.10.0/go.mod h1:ZfJSmng/TBNTBkFemHHHj5YY7VAU/MBU980F4VU1NG0=
+github.com/cosmos/ledger-cosmos-go v0.13.3 h1:7ehuBGuyIytsXbd4MP43mLeoN2LTOEnk5nvue4rK+yM=
+github.com/cosmos/ledger-cosmos-go v0.13.3/go.mod h1:HENcEP+VtahZFw38HZ3+LS3Iv5XV6svsnkk9vdJtLr8=
+github.com/cpuguy83/go-md2man/v2 v2.0.4 h1:wfIWP927BUkWJb2NmU/kNDYIBTh/ziUX91+lVfRxZq4=
+github.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
 github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a h1:W8mUrRp6NOVl3J+MYp5kPMoUZPp7aOYHtaua31lwRHg=
 github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a/go.mod h1:sTwzHBvIzm2RfVCGNEBZgRyjwK40bVoun3ZnGOCafNM=
 github.com/crate-crypto/go-kzg-4844 v1.1.0 h1:EN/u9k2TF6OWSHrCCDBBU6GLNMq88OspHHlMnHfoyU4=
 github.com/crate-crypto/go-kzg-4844 v1.1.0/go.mod h1:JolLjpSff1tCCJKaJx4psrlEdlXuJEC996PL3tTAFks=
 github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
+github.com/danieljoos/wincred v1.2.1 h1:dl9cBrupW8+r5250DYkYxocLeZ1Y4vB1kxgtjxw8GQs=
+github.com/danieljoos/wincred v1.2.1/go.mod h1:uGaFL9fDn3OLTvzCGulzE+SzjEe5NGlh5FdCcyfPwps=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=
@@ -63,65 +199,219 @@ github.com/decred/dcrd/crypto/blake256 v1.0.1 h1:7PltbUIQB7u/FfZ39+DGa/ShuMyJ5il
 github.com/decred/dcrd/crypto/blake256 v1.0.1/go.mod h1:2OfgNZ5wDpcsFmHmCK5gZTPcCXqlm2ArzUIkw9czNJo=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 h1:rpfIENRNNilwHwZeG5+P150SMrnNEcHYvcCuK6dPZSg=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0/go.mod h1:v57UDF4pDQJcEfFUCRop3lJL149eHGSe9Jvczhzjo/0=
+github.com/dgraph-io/badger/v4 v4.2.0 h1:kJrlajbXXL9DFTNuhhu9yCx7JJa4qpYWxtE8BzuWsEs=
+github.com/dgraph-io/badger/v4 v4.2.0/go.mod h1:qfCqhPoWDFJRx1gp5QwwyGo8xk1lbHUxvK9nK0OGAak=
+github.com/dgraph-io/ristretto v0.1.1 h1:6CWw5tJNgpegArSHpNHJKldNeq03FQCwYvfMVWajOK8=
+github.com/dgraph-io/ristretto v0.1.1/go.mod h1:S1GPSBCYCIhmVNfcth17y2zZtQT6wzkzgwUve0VDWWA=
+github.com/dgryski/go-farm v0.0.0-20190423205320-6a90982ecee2/go.mod h1:SqUrOPUnsFjfmXRMNPybcSiG0BgUW2AuFH8PAnS2iTw=
+github.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13 h1:fAjc9m62+UWV/WAFKLNi6ZS0675eEUC9y3AlwSbQu1Y=
+github.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13/go.mod h1:SqUrOPUnsFjfmXRMNPybcSiG0BgUW2AuFH8PAnS2iTw=
+github.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=
+github.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=
+github.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=
+github.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
+github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
+github.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=
+github.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=
+github.com/dvsekhvalnov/jose2go v1.7.0 h1:bnQc8+GMnidJZA8zc6lLEAb4xNrIqHwO+9TzqvtQZPo=
+github.com/dvsekhvalnov/jose2go v1.7.0/go.mod h1:QsHjhyTlD/lAVqn/NSbVZmSCGeDehTB/mPZadG+mhXU=
+github.com/emicklei/dot v1.6.2 h1:08GN+DD79cy/tzN6uLCT84+2Wk9u+wvqP+Hkx/dIR8A=
+github.com/emicklei/dot v1.6.2/go.mod h1:DeV7GvQtIw4h2u73RKBkkFdvVAz0D9fzeJrgPW6gy/s=
+github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
+github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
+github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
+github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
 github.com/ethereum/c-kzg-4844 v1.0.3 h1:IEnbOHwjixW2cTvKRUlAAUOeleV7nNM/umJR+qy4WDs=
 github.com/ethereum/c-kzg-4844 v1.0.3/go.mod h1:VewdlzQmpT5QSrVhbBuGoCdFJkpaJlO1aQputP83wc0=
 github.com/ethereum/go-ethereum v1.14.7 h1:EHpv3dE8evQmpVEQ/Ne2ahB06n2mQptdwqaMNhAT29g=
 github.com/ethereum/go-ethereum v1.14.7/go.mod h1:Mq0biU2jbdmKSZoqOj29017ygFrMnB5/Rifwp980W4o=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 h1:KrE8I4reeVvf7C1tm8elRjj4BdscTYzz/WAbYyf/JI4=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0/go.mod h1:D9AJLVXSyZQXJQVk8oh1EwjISE+sJTn2duYIZC0dy3w=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
+github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
+github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
+github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
+github.com/fjl/memsize v0.0.2 h1:27txuSD9or+NZlnOWdKUxeBzTAUkWCVh+4Gf2dWFOzA=
+github.com/fjl/memsize v0.0.2/go.mod h1:VvhXpOYNQvB+uIk2RvXzuaQtkQJzzIx6lSBe1xv7hi0=
+github.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=
+github.com/fortytw2/leaktest v1.3.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=
+github.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=
+github.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=
 github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
 github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
 github.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=
 github.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=
+github.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=
+github.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=
+github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08 h1:f6D9Hr8xV8uYKlyuj8XIruxlh9WjVjdh1gIicAS7ays=
+github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08/go.mod h1:x7DCsMOv1taUwEWCzT4cmDeAkigA5/QCwUodaVOe8Ww=
 github.com/getsentry/sentry-go v0.28.1 h1:zzaSm/vHmGllRM6Tpx1492r0YDzauArdBfkJRtY6P5k=
 github.com/getsentry/sentry-go v0.28.1/go.mod h1:1fQZ+7l7eeJ3wYi82q5Hg8GqAPgefRq+FP/QhafYVgg=
+github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
 github.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=
 github.com/go-errors/errors v1.4.2/go.mod h1:sIVyrIiJhuEF+Pj9Ebtd6P/rEYROXFi3BopGUQ5a5Og=
 github.com/go-faster/xor v1.0.0 h1:2o8vTOgErSGHP3/7XwA5ib1FTtUsNtwCoLLBjl31X38=
 github.com/go-faster/xor v1.0.0/go.mod h1:x5CaDY9UKErKzqfRfFZdfu+OSTfoZny3w5Ak7UxcipQ=
+github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
+github.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
+github.com/go-kit/kit v0.13.0 h1:OoneCcHKHQ03LfBpoQCUfCluwd2Vt3ohz+kvbJneZAU=
+github.com/go-kit/kit v0.13.0/go.mod h1:phqEHMMUbyrCFCTgH48JueqrM3md2HcAZ8N3XE4FKDg=
+github.com/go-kit/log v0.2.1 h1:MRVx0/zhvdseW+Gza6N9rVzU/IVzaeE1SFI4raAhmBU=
+github.com/go-kit/log v0.2.1/go.mod h1:NwTd00d/i8cPZ3xOwwiv2PO5MOcx78fFErGNcVmBjv0=
+github.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=
+github.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=
+github.com/go-logfmt/logfmt v0.6.0 h1:wGYYu3uicYdqXVgoYbvnkrPVXkuLM1p1ifugDMEdRi4=
+github.com/go-logfmt/logfmt v0.6.0/go.mod h1:WYhtIu8zTZfxdn5+rREduYbwxfcBr/Vr6KEVveWlfTs=
 github.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=
 github.com/go-ole/go-ole v1.3.0 h1:Dt6ye7+vXGIKZ7Xtk4s6/xVdGDQynvom7xCFEdWr6uE=
 github.com/go-ole/go-ole v1.3.0/go.mod h1:5LS6F96DhAwUc7C+1HLexzMXY1xGRSryjyPPKW6zv78=
+github.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=
+github.com/go-playground/assert/v2 v2.2.0/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
+github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
+github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
+github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
+github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
+github.com/go-playground/validator/v10 v10.22.0 h1:k6HsTZ0sTnROkhS//R0O+55JgM8C4Bx7ia+JlgcnOao=
+github.com/go-playground/validator/v10 v10.22.0/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=
+github.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=
 github.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=
 github.com/goccy/go-json v0.10.3 h1:KZ5WoDbxAIgm2HNbYckL0se1fHD6rz5j4ywS6ebzDqA=
 github.com/goccy/go-json v0.10.3/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=
+github.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2 h1:ZpnhV/YsD2/4cESfV5+Hoeu/iUR3ruzNvZ+yQfO03a0=
+github.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2/go.mod h1:bBOAhwG1umN6/6ZUMtDFBMQR8jRg9O75tm9K00oMsK4=
+github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
 github.com/gofrs/flock v0.12.1 h1:MTLVXXHf8ekldpJk3AKicLij9MdwOWkZ+a/jHHZby9E=
 github.com/gofrs/flock v0.12.1/go.mod h1:9zxTsyu5xtJ9DK+1tFZyibEV7y3uwDxPPfbxeeHCoD0=
+github.com/gofrs/uuid v4.4.0+incompatible h1:3qXRTX8/NbyulANqlc0lchS1gqAVxRgsuW1YrTJupqA=
+github.com/gofrs/uuid v4.4.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=
+github.com/gogo/googleapis v1.4.1 h1:1Yx4Myt7BxzvUr5ldGSbwYiZG6t9wGBZ+8/fX3Wvtq0=
+github.com/gogo/googleapis v1.4.1/go.mod h1:2lpHqI5OcWCtVElxXnPt+s8oJvMpySlOyM6xDCrzib4=
+github.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
 github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
+github.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=
+github.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=
+github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
+github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
+github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
+github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
+github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
+github.com/golang/glog v1.2.1 h1:OptwRhECazUx5ix5TTWC3EZhsZEHWcYWY4FQHTIubm4=
+github.com/golang/glog v1.2.1/go.mod h1:6AhwSGph0fcJtXVM/PEHPqZlFeoLxhs7/t5UDAwmO+w=
+github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
+github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
+github.com/golang/mock v1.6.0 h1:ErTB+efbowRARo13NNdxyJji2egdxLGQhRaY+DUumQc=
+github.com/golang/mock v1.6.0/go.mod h1:p6yTPP+5HYm5mzsMV8JkE6ZKdX+/wYM6Hr+LicevLPs=
 github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+github.com/golang/protobuf v1.3.0/go.mod h1:Qd/q+1AKNOZr9uGQzbzCmRO6sUih6GTPZv6a1/R87v0=
+github.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+github.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=
 github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=
 github.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=
 github.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=
 github.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=
 github.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=
+github.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=
 github.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
+github.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
 github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
 github.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
+github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=
+github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
 github.com/golang/snappy v0.0.4/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
 github.com/golang/snappy v0.0.5-0.20220116011046-fa5810519dcb h1:PBC98N2aIaM3XXiurYmW7fx4GZkL8feAMVq7nEjURHk=
 github.com/golang/snappy v0.0.5-0.20220116011046-fa5810519dcb/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
+github.com/google/btree v1.1.2 h1:xf4v41cLI2Z6FxbKm+8Bu+m8ifhj15JuZ9sa0jZCMUU=
+github.com/google/btree v1.1.2/go.mod h1:qOPhT0dTNdNzV6Z/lhRX0YXUafgPLFUh+gZMl761Gm4=
+github.com/google/flatbuffers v24.3.25+incompatible h1:CX395cjN9Kke9mmalRoL3d81AtFUxJM+yDthflgJGkI=
+github.com/google/flatbuffers v24.3.25+incompatible/go.mod h1:1AeVuKshWv4vARoZatz6mlQ0JxURH0Kv5+zNeJKJCa8=
+github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
 github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
 github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
 github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
 github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/google/gofuzz v0.0.0-20170612174753-24818f796faf/go.mod h1:HP5RmnzzSNb993RKQDq4+1A4ia9nllfqcQFTQJedwGI=
+github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=
 github.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
+github.com/google/orderedcode v0.0.1 h1:UzfcAexk9Vhv8+9pNOgRu41f16lHq725vPwnSeiG/Us=
+github.com/google/orderedcode v0.0.1/go.mod h1:iVyU4/qPKHY5h/wSd6rZZCDcLJNxiWO6dvsYES2Sb20=
 github.com/google/pprof v0.0.0-20210407192527-94a9f03dee38/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=
 github.com/google/subcommands v1.2.0/go.mod h1:ZjhPrFU+Olkh9WazFPsl27BQ4UPiG37m3yTrtFlrHVk=
+github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
+github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+github.com/gorilla/handlers v1.5.2 h1:cLTUSsNkgcwhgRqvCNmdbRWG0A3N4F+M2nWKdScwyEE=
+github.com/gorilla/handlers v1.5.2/go.mod h1:dX+xVpaxdSw+q0Qek8SSsl3dfMk3jNddUkMzo0GtH0w=
+github.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=
+github.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=
 github.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=
 github.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
+github.com/grpc-ecosystem/go-grpc-middleware v1.4.0 h1:UH//fgunKIs4JdUbpDl1VZCDaL56wXCB/5+wF6uHfaI=
+github.com/grpc-ecosystem/go-grpc-middleware v1.4.0/go.mod h1:g5qyo/la0ALbONm6Vbp88Yd8NsDy6rZz+RcrMPxvld8=
+github.com/grpc-ecosystem/grpc-gateway v1.16.0 h1:gmcG1KaJ57LophUzW0Hy8NmPhnMZb4M0+kPpLofRdBo=
+github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=
+github.com/gsterjov/go-libsecret v0.0.0-20161001094733-a6f4afe4910c h1:6rhixN/i8ZofjG1Y75iExal34USq5p+wiN1tpie8IrU=
+github.com/gsterjov/go-libsecret v0.0.0-20161001094733-a6f4afe4910c/go.mod h1:NMPJylDgVpX0MLRlPy15sqSwOFv/U1GZ2m21JhFfek0=
+github.com/hashicorp/go-bexpr v0.1.14 h1:uKDeyuOhWhT1r5CiMTjdVY4Aoxdxs6EtwgTGnlosyp4=
+github.com/hashicorp/go-bexpr v0.1.14/go.mod h1:gN7hRKB3s7yT+YvTdnhZVLTENejvhlkZ8UE4YVBS+Q8=
+github.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=
+github.com/hashicorp/go-hclog v1.6.3 h1:Qr2kF+eVWjTiYmU7Y31tYlP1h0q/X3Nl3tPGdaB11/k=
+github.com/hashicorp/go-hclog v1.6.3/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=
+github.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=
+github.com/hashicorp/go-immutable-radix v1.3.1 h1:DKHmCUm2hRBK510BaiZlwvpD40f8bJFeZnpfm2KLowc=
+github.com/hashicorp/go-immutable-radix v1.3.1/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=
+github.com/hashicorp/go-metrics v0.5.3 h1:M5uADWMOGCTUNU1YuC4hfknOeHNaX54LDm4oYSucoNE=
+github.com/hashicorp/go-metrics v0.5.3/go.mod h1:KEjodfebIOuBYSAe/bHTm+HChmKSxAOXPBieMLYozDE=
+github.com/hashicorp/go-plugin v1.6.1 h1:P7MR2UP6gNKGPp+y7EZw2kOiq4IR9WiqLvp0XOsVdwI=
+github.com/hashicorp/go-plugin v1.6.1/go.mod h1:XPHFku2tFo3o3QKFgSYo+cghcUhw1NA1hZyMK0PWAw0=
+github.com/hashicorp/go-retryablehttp v0.5.3/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=
+github.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
+github.com/hashicorp/go-uuid v1.0.3 h1:2gKiV6YVmrJ1i2CKKa9obLvRieoRGviZFL26PcT/Co8=
+github.com/hashicorp/go-uuid v1.0.3/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
+github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
+github.com/hashicorp/golang-lru v1.0.2 h1:dV3g9Z/unq5DpblPpw+Oqcv4dU/1omnb4Ok8iPY6p1c=
+github.com/hashicorp/golang-lru v1.0.2/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=
+github.com/hashicorp/golang-lru/v2 v2.0.7 h1:a+bsQ5rvGLjzHuww6tVxozPZFVghXaHOwFs4luLUK2k=
+github.com/hashicorp/golang-lru/v2 v2.0.7/go.mod h1:QeFd9opnmA6QUJc5vARoKUSoFhyfM2/ZepoAG6RGpeM=
+github.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=
+github.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=
+github.com/hashicorp/yamux v0.1.1 h1:yrQxtgseBDrq9Y652vSRDvsKCJKOUD+GzTS4Y0Y8pvE=
+github.com/hashicorp/yamux v0.1.1/go.mod h1:CtWFDAQgb7dxtzFs4tWbplKIe2jSi3+5vKbgIO0SLnQ=
+github.com/hdevalence/ed25519consensus v0.2.0 h1:37ICyZqdyj0lAZ8P4D1d1id3HqbbG1N3iBb1Tb4rdcU=
+github.com/hdevalence/ed25519consensus v0.2.0/go.mod h1:w3BHWjwJbFU29IRHL1Iqkw3sus+7FctEyM4RqDxYNzo=
+github.com/holiman/billy v0.0.0-20240322075458-72a4e81ec6da h1:8qEhdMGSUx67L2s5aGQinJhOwLfIRKLRBHPQq8m6WxE=
+github.com/holiman/billy v0.0.0-20240322075458-72a4e81ec6da/go.mod h1:5GuXa7vkL8u9FkFuWdVvfR5ix8hRB7DbOAaYULamFpc=
 github.com/holiman/bloomfilter/v2 v2.0.3 h1:73e0e/V0tCydx14a0SCYS/EWCxgwLZ18CZcZKVu0fao=
 github.com/holiman/bloomfilter/v2 v2.0.3/go.mod h1:zpoh+gs7qcpqrHr3dB55AMiJwo0iURXE7ZOP9L9hSkA=
 github.com/holiman/uint256 v1.3.1 h1:JfTzmih28bittyHM8z360dCjIA9dbPIBlcTI6lmctQs=
 github.com/holiman/uint256 v1.3.1/go.mod h1:EOMSn4q6Nyt9P6efbI3bueV4e1b3dGlUCXeiRV4ng7E=
 github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
+github.com/huandu/skiplist v1.2.0 h1:gox56QD77HzSC0w+Ws3MH3iie755GBJU1OER3h5VsYw=
+github.com/huandu/skiplist v1.2.0/go.mod h1:7v3iFjLcSAzO4fN5B8dvebvo/qsfumiLiDXMrPiHF9w=
+github.com/huin/goupnp v1.3.0 h1:UvLUlWDNpoUdYzb2TCn+MuTWtcjXKSza2n6CBdQ0xXc=
+github.com/huin/goupnp v1.3.0/go.mod h1:gnGPsThkYa7bFi/KWmEysQRf48l2dvR5bxr2OFckNX8=
+github.com/iancoleman/strcase v0.3.0 h1:nTXanmYxhfFAMjZL34Ov6gkzEsSJZ5DbhxWjvSASxEI=
+github.com/iancoleman/strcase v0.3.0/go.mod h1:iwCmte+B7n89clKwxIoIXy/HfoL7AsD47ZCWhYzw7ho=
 github.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=
+github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
+github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
+github.com/jackpal/go-nat-pmp v1.0.2 h1:KzKSgb7qkJvOUTqYl9/Hg/me3pWgBmERKrTGD7BdWus=
+github.com/jackpal/go-nat-pmp v1.0.2/go.mod h1:QPH045xvCAeXUZOxsnwmrtiCoxIr9eob+4orBN1SBKc=
+github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
+github.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
+github.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=
 github.com/karalabe/ssz v0.2.1-0.20240724074312-3d1ff7a6f7c4 h1:CvO92iWYv7SS7hWzd1cYaAhGVZmanD/DtUfe0s+kTeg=
 github.com/karalabe/ssz v0.2.1-0.20240724074312-3d1ff7a6f7c4/go.mod h1:SUFJO5R2VkUK3vT80pjfIB/g7eaQgSU2RhbuL8GOJq4=
 github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=
@@ -130,30 +420,72 @@ github.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2
 github.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=
 github.com/klauspost/cpuid/v2 v2.2.8 h1:+StwCXwm9PdpiEkPyzBXIy+M9KUb4ODm0Zarf1kS5BM=
 github.com/klauspost/cpuid/v2 v2.2.8/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=
+github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
+github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=
+github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
 github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
 github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
+github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
+github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
 github.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=
 github.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=
+github.com/labstack/echo/v4 v4.12.0 h1:IKpw49IMryVB2p1a4dzwlhP1O2Tf2E0Ir/450lH+kI0=
+github.com/labstack/echo/v4 v4.12.0/go.mod h1:UP9Cr2DJXbOK3Kr9ONYzNowSh7HP0aG0ShAyycHSJvM=
+github.com/labstack/gommon v0.4.2 h1:F8qTUNXgG1+6WQmqoUWnz8WiEU60mXVVw0P4ht1WRA0=
+github.com/labstack/gommon v0.4.2/go.mod h1:QlUFxVM+SNXhDL/Z7YhocGIBYOiwB0mXm1+1bAPHPyU=
 github.com/leanovate/gopter v0.2.9 h1:fQjYxZaynp97ozCzfOyOuAGOU4aU/z37zf/tOujFk7c=
 github.com/leanovate/gopter v0.2.9/go.mod h1:U2L/78B+KVFIx2VmW6onHJQzXtFb+p5y3y2Sh+Jxxv8=
+github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
+github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
+github.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=
+github.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
+github.com/linxGnu/grocksdb v1.9.2 h1:O3mzvO0wuzQ9mtlHbDrShixyVjVbmuqTjFrzlf43wZ8=
+github.com/linxGnu/grocksdb v1.9.2/go.mod h1:QYiYypR2d4v63Wj1adOOfzglnoII0gLj3PNh4fZkcFA=
+github.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=
+github.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=
+github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=
+github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
+github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
+github.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
+github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
+github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
 github.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=
 github.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=
 github.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
+github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
+github.com/minio/highwayhash v1.0.3 h1:kbnuUMoHYyVl7szWjSxJnxw11k2U709jqFPPmIUyD6Q=
+github.com/minio/highwayhash v1.0.3/go.mod h1:GGYsuwP/fPD6Y9hMiXuapVvlIUEhFhMTh0rxU3ik1LQ=
 github.com/minio/sha256-simd v1.0.1 h1:6kaan5IFmwTNynnKKpDHe6FWHohJOHhCPchzK49dzMM=
 github.com/minio/sha256-simd v1.0.1/go.mod h1:Pz6AKMiUdngCLpeTL/RJY1M9rUuPMYujV5xJjtbRSN8=
+github.com/mitchellh/go-testing-interface v1.14.1 h1:jrgshOhYAUVNMAJiKbEu7EqAwgJJ2JqpQmpLJOu07cU=
+github.com/mitchellh/go-testing-interface v1.14.1/go.mod h1:gfgS7OtZj6MA4U1UrDRp04twqAjfvlZyCfX3sDjEym8=
 github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=
 github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
+github.com/mitchellh/pointerstructure v1.2.1 h1:ZhBBeX8tSlRpu/FFhXH4RC4OJzFlqsQhoHZAz4x7TIw=
+github.com/mitchellh/pointerstructure v1.2.1/go.mod h1:BRAsLI5zgXmw97Lf6s25bs8ohIXc3tViBH44KcwB2g4=
 github.com/mmcloughlin/addchain v0.4.0 h1:SobOdjm2xLj1KkXN5/n0xTIWyZA2+s99UCY1iPfkHRY=
 github.com/mmcloughlin/addchain v0.4.0/go.mod h1:A86O+tHqZLMNO4w6ZZ4FlVQEadcoqkyU72HC5wJ4RlU=
 github.com/mmcloughlin/profile v0.1.1/go.mod h1:IhHD7q1ooxgwTgjxQYkACGA77oFTDdFVejUS1/tS/qU=
+github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
+github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
+github.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
+github.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
+github.com/mtibben/percent v0.2.1 h1:5gssi8Nqo8QU/r2pynCm+hBQHpkB/uNK7BJCFogWdzs=
+github.com/mtibben/percent v0.2.1/go.mod h1:KG9uO+SZkUp+VkRHsCdYQV3XSZrrSpR3O9ibNBTZrns=
 github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=
 github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=
+github.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=
+github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=
 github.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=
 github.com/nxadm/tail v1.4.8/go.mod h1:+ncqLTQzXmGhMZNUePPaPqPvBxHAIsmXswZKocGu+AU=
 github.com/nxadm/tail v1.4.11 h1:8feyoE3OzPrcshW5/MJ4sGESc5cqmGkGCWlco4l0bqY=
 github.com/nxadm/tail v1.4.11/go.mod h1:OTaG3NK980DZzxbRq6lEuzgU+mug70nY11sMd4JXXHc=
+github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a h1:dlRvE5fWabOchtH7znfiFCcOvmIYgOeAS5ifBXBlh9Q=
+github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a/go.mod h1:hVoHR2EVESiICEMbg137etN/Lx+lSrHPTD39Z/uE+2s=
+github.com/oklog/run v1.1.0 h1:GEenZ1cK0+q0+wsJew9qUg/DyD8k3JzYsZAi5gYi2mA=
+github.com/oklog/run v1.1.0/go.mod h1:sVPdnTZT1zYwAJeCMu2Th4T21pA3FPOQRfWjQlk7DVU=
 github.com/olekukonko/tablewriter v0.0.5 h1:P2Ga83D34wi1o9J6Wh1mRuqd4mF/x/lgBS7N7AbDhec=
 github.com/olekukonko/tablewriter v0.0.5/go.mod h1:hPp6KlRPjbx+hW8ykQs1w3UBbZlj6HuIJcUGPhkA7kY=
 github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
@@ -168,92 +500,216 @@ github.com/onsi/gomega v1.17.0/go.mod h1:HnhC7FXeEQY45zxNK3PPoIUhzk/80Xly9PcubAl
 github.com/onsi/gomega v1.19.0/go.mod h1:LY+I3pBVzYsTBU1AnDwOSxaYi9WoWiqgwooUqq9yPro=
 github.com/onsi/gomega v1.33.1 h1:dsYjIxxSR755MDmKVsaFQTE22ChNBcuuTWgkUDSubOk=
 github.com/onsi/gomega v1.33.1/go.mod h1:U4R44UsT+9eLIaYRB2a5qajjtQYn0hauxvRm16AVYg0=
+github.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=
+github.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=
+github.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=
+github.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=
+github.com/opencontainers/runc v1.1.12 h1:BOIssBaW1La0/qbNZHXOOa71dZfZEQOzW7dqQf3phss=
+github.com/opencontainers/runc v1.1.12/go.mod h1:S+lQwSfncpBha7XTy/5lBwWgm5+y5Ma/O44Ekby9FK8=
+github.com/ory/dockertest v3.3.5+incompatible h1:iLLK6SQwIhcbrG783Dghaaa3WPzGc+4Emza6EbVUUGA=
+github.com/ory/dockertest v3.3.5+incompatible/go.mod h1:1vX4m9wsvi00u5bseYwXaSnhNrne+V0E6LAcBILJdPs=
+github.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0MwY=
+github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
+github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
+github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
+github.com/phuslu/log v1.0.110 h1:9WQnpL1/CBi3IwZaVadYnI/i0bgobTvit2ayXIgSg4c=
+github.com/phuslu/log v1.0.110/go.mod h1:F8osGJADo5qLK/0F88djWwdyoZZ9xDJQL1HYRHFEkS0=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
 github.com/pingcap/errors v0.11.4/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
+github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
+github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
 github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=
 github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=
+github.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=
+github.com/prometheus/client_golang v1.4.0/go.mod h1:e9GMxYsXl05ICDXkRhurwBS4Q3OK1iX/F2sw+iXX5zU=
 github.com/prometheus/client_golang v1.20.1 h1:IMJXHOD6eARkQpxo8KkhgEVFlBNm+nkrFUyGlIu7Na8=
 github.com/prometheus/client_golang v1.20.1/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=
+github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=
+github.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
+github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
+github.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
 github.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=
 github.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=
+github.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=
+github.com/prometheus/common v0.9.1/go.mod h1:yhUN8i9wzaXS3w1O07YhxHEBxD+W35wd8bs7vj7HSQ4=
 github.com/prometheus/common v0.55.0 h1:KEi6DK7lXW/m7Ig5i47x0vRzuBsHuvJdi5ee6Y3G1dc=
 github.com/prometheus/common v0.55.0/go.mod h1:2SECS4xJG1kd8XF9IcM1gMX6510RAEL65zxzNImwdc8=
+github.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=
+github.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=
+github.com/prometheus/procfs v0.0.8/go.mod h1:7Qr8sr6344vo1JqZ6HhLceV9o3AJ1Ff+GxbHq6oeK9A=
 github.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=
 github.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=
 github.com/prysmaticlabs/go-bitfield v0.0.0-20240618144021-706c95b2dd15 h1:lC8kiphgdOBTcbTvo8MwkvpKjO0SlAgjv4xIK5FGJ94=
 github.com/prysmaticlabs/go-bitfield v0.0.0-20240618144021-706c95b2dd15/go.mod h1:8svFBIKKu31YriBG/pNizo9N0Jr9i5PQ+dFkxWg3x5k=
 github.com/prysmaticlabs/gohashtree v0.0.4-beta.0.20240624100937-73632381301b h1:VK7thFOnhxAZ/5aolr5Os4beiubuD08WiuiHyRqgwks=
 github.com/prysmaticlabs/gohashtree v0.0.4-beta.0.20240624100937-73632381301b/go.mod h1:HRuvtXLZ4WkaB1MItToVH2e8ZwKwZPY5/Rcby+CvvLY=
+github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 h1:N/ElC8H3+5XpJzTSTfLsJV/mx9Q9g7kxmchpfZyxgzM=
+github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=
 github.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=
 github.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=
 github.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=
+github.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=
 github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
 github.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=
 github.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=
+github.com/rs/cors v1.11.0 h1:0B9GE/r9Bc2UxRMMtymBkHTenPkHDv0CW4Y98GBY+po=
+github.com/rs/cors v1.11.0/go.mod h1:XyqrcTp5zjWr1wsJ8PIRZssZ8b/WMcMf71DJnit4EMU=
+github.com/rs/xid v1.5.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=
+github.com/rs/zerolog v1.33.0 h1:1cU2KZkvPxNyfgEmhHAz/1A9Bz+llsdYzklWFzgp0r8=
+github.com/rs/zerolog v1.33.0/go.mod h1:/7mN4D5sKwJLZQ2b/znpjC3/GQWY/xaDXUM0kKWRHss=
+github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=
+github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
+github.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3N51bwOk=
+github.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=
+github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
+github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=
 github.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
+github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
+github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=
+github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=
+github.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
 github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8 h1:+jumHNA0Wrelhe64i8F6HNlS8pkoyMv5sreGx2Ry5Rw=
 github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8/go.mod h1:3n1Cwaq1E1/1lhQhtRK2ts/ZwZEhjcQeJQ1RuC6Q/8U=
+github.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=
+github.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=
+github.com/spf13/cast v1.7.0 h1:ntdiHjuueXFgm5nzDRdOS4yfT43P5Fnud6DH50rz/7w=
+github.com/spf13/cast v1.7.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=
+github.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=
+github.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=
+github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
+github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
+github.com/spf13/viper v1.19.0 h1:RWq5SEjt8o25SROyN3z2OrDB9l7RPd3lwTWU8EcEdcI=
+github.com/spf13/viper v1.19.0/go.mod h1:GQUN9bilAbhU/jgc1bKs99f/suXKeUMct8Adx5+Ntkg=
+github.com/status-im/keycard-go v0.3.2 h1:YusIF/bHx6YZis8UTOJrpZFnTs4IkRBdmJXqdiXkpFE=
+github.com/status-im/keycard-go v0.3.2/go.mod h1:wlp8ZLbsmrF6g6WjugPAx+IzoLrkdf9+mHxBEeo3Hbg=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
+github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
 github.com/stretchr/objx v0.5.2 h1:xuMeJ0Sdp5ZMRXx/aWO6RZxdr3beISkG5/G/aIRr3pY=
 github.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=
+github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
+github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
 github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
+github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
+github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.2/go.mod h1:R6va5+xMeoiuVRoj+gSkQ7d3FALtqAAGI1FQKckRals=
+github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
+github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
+github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
 github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
 github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
+github.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=
+github.com/subosito/gotenv v1.6.0/go.mod h1:Dk4QP5c2W3ibzajGcXpNraDfq2IrhjMIvMSWPKKo0FU=
 github.com/supranational/blst v0.3.13 h1:AYeSxdOMacwu7FBmpfloBz5pbFXDmJL33RuwnKtmTjk=
 github.com/supranational/blst v0.3.13/go.mod h1:jZJtfjgudtNl4en1tzwPIV3KjUnQUvG3/j+w+fVonLw=
 github.com/syndtr/goleveldb v1.0.1-0.20220721030215-126854af5e6d h1:vfofYNRScrDdvS342BElfbETmL1Aiz3i2t0zfRj16Hs=
 github.com/syndtr/goleveldb v1.0.1-0.20220721030215-126854af5e6d/go.mod h1:RRCYJbIwD5jmqPI9XoAFR0OcDxqUctll6zUj/+B4S48=
+github.com/tendermint/go-amino v0.16.0 h1:GyhmgQKvqF82e2oZeuMSp9JTN0N09emoSZlb2lyGa2E=
+github.com/tendermint/go-amino v0.16.0/go.mod h1:TQU0M1i/ImAo+tYpZi73AU3V/dKeCoMC9Sphe2ZwGME=
+github.com/tidwall/btree v1.7.0 h1:L1fkJH/AuEh5zBnnBbmTwQ5Lt+bRJ5A8EWecslvo9iI=
+github.com/tidwall/btree v1.7.0/go.mod h1:twD9XRA5jj9VUQGELzDO4HPQTNJsoWWfYEL+EUQ2cKY=
 github.com/tklauser/go-sysconf v0.3.14 h1:g5vzr9iPFFz24v2KZXs/pvpvh8/V9Fw6vQK5ZZb78yU=
 github.com/tklauser/go-sysconf v0.3.14/go.mod h1:1ym4lWMLUOhuBOPGtRcJm7tEGX4SCYNEEEtghGG/8uY=
 github.com/tklauser/numcpus v0.8.0 h1:Mx4Wwe/FjZLeQsK/6kt2EOepwwSl7SmJrK5bV/dXYgY=
 github.com/tklauser/numcpus v0.8.0/go.mod h1:ZJZlAY+dmR4eut8epnzf0u/VwodKmryxR8txiloSqBE=
+github.com/tv42/httpunix v0.0.0-20150427012821-b75d8614f926/go.mod h1:9ESjWnEqriFuLhtthL60Sar/7RFoluCcXsuvEwTV5KM=
+github.com/tyler-smith/go-bip39 v1.1.0 h1:5eUemwrMargf3BSLRRCalXT93Ns6pQJIjYQN2nyfOP8=
+github.com/tyler-smith/go-bip39 v1.1.0/go.mod h1:gUYDtqQw1JS3ZJ8UWVcGTGqqr6YIN3CWg+kkNaLt55U=
 github.com/umbracle/fastrlp v0.1.0 h1:V0W3f6ZKWqbu1KggdhnRWOi+t7+PfL3VyAffJqayI5s=
 github.com/umbracle/fastrlp v0.1.0/go.mod h1:5RHgqiFjd4vLJESMWagP/E7su+5Gzk0iqqmrotR8WdA=
+github.com/urfave/cli/v2 v2.27.2 h1:6e0H+AkS+zDckwPCUrZkKX38mRaau4nL2uipkJpbkcI=
+github.com/urfave/cli/v2 v2.27.2/go.mod h1:g0+79LmHHATl7DAcHO99smiR/T7uGLw84w8Y42x+4eM=
+github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=
+github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
+github.com/valyala/fasttemplate v1.2.2 h1:lxLXG0uE3Qnshl9QyaK6XJxMXlQZELvChBOCmQD0Loo=
+github.com/valyala/fasttemplate v1.2.2/go.mod h1:KHLXt3tVN2HBp8eijSv/kGJopbvo7S+qRAEEKiv+SiQ=
+github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 h1:gEOO8jv9F4OT7lGCjxCBTO/36wtF6j2nSip77qHd4x4=
+github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1/go.mod h1:Ohn+xnUBiLI6FVj/9LpzZWtj1/D6lUovWYBkxHVV3aM=
 github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yusufpapurcu/wmi v1.2.4 h1:zFUKzehAFReQwLys1b/iSMl+JQGSCSjtVqQn9bBrPo0=
 github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=
+github.com/zondax/hid v0.9.2 h1:WCJFnEDMiqGF64nlZz28E9qLVZ0KSJ7xpc5DLEyma2U=
+github.com/zondax/hid v0.9.2/go.mod h1:l5wttcP0jwtdLjqjMMWFVEE7d1zO0jvSPA9OPZxWpEM=
+github.com/zondax/ledger-go v0.14.3 h1:wEpJt2CEcBJ428md/5MgSLsXLBos98sBOyxNmCjfUCw=
+github.com/zondax/ledger-go v0.14.3/go.mod h1:IKKaoxupuB43g4NxeQmbLXv7T9AlQyie1UpHb342ycI=
+gitlab.com/yawning/secp256k1-voi v0.0.0-20230925100816-f2616030848b h1:CzigHMRySiX3drau9C6Q5CAbNIApmLdat5jPMqChvDA=
+gitlab.com/yawning/secp256k1-voi v0.0.0-20230925100816-f2616030848b/go.mod h1:/y/V339mxv2sZmYYR64O07VuCpdNZqCTwO8ZcouTMI8=
+gitlab.com/yawning/tuplehash v0.0.0-20230713102510-df83abbf9a02 h1:qwDnMxjkyLmAFgcfgTnfJrmYKWhHnci3GjDqcZp1M3Q=
+gitlab.com/yawning/tuplehash v0.0.0-20230713102510-df83abbf9a02/go.mod h1:JTnUj0mpYiAsuZLmKjTx/ex3AtMowcCgnE7YNyCEP0I=
+go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
+go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
+golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.0.0-20200728195943-123391ffb6de/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
+golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
+golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
+golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
+golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
+golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+golang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
+golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
+golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
+golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
+golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=
 golang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
+golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -263,20 +719,33 @@ golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220412211240-33da011f77ad/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20221010170243-090e33056c14/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.21.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
+golang.org/x/term v0.25.0 h1:WtHI/ltw4NvSUig5KARz9h521QvRC8RmF/cuYqifU24=
+golang.org/x/term v0.25.0/go.mod h1:RPyXicDX+6vLxogjjRxjgD2TKtmAO6NZBsBRfrOLu7M=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
+golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
+golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20201224043029-2b0845dc783e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
@@ -286,28 +755,71 @@ golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8T
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20220517211312-f3a8303e98df/go.mod h1:K8+ghG5WaK9qNqU5K3HdILfMLy1f3aNYFI/wnl100a8=
+google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
+google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
+google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
+google.golang.org/genproto v0.0.0-20180831171423-11092d34479b/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
+google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
+google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d h1:PksQg4dV6Sem3/HkBX+Ltq8T0ke0PKIRBNBatoDTVls=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d/go.mod h1:s7iA721uChleev562UJO2OYB0PPT9CMFjV+Ce7VJH5M=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 h1:0+ozOGcrp+Y8Aq8TLNN2Aliibms5LEzsq99ZZmAGYm0=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094/go.mod h1:fJ/e3If/Q67Mj99hin0hMhiNyCRmt6BQ2aWIJshUSJw=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d h1:JU0iKnSg02Gmb5ZdV8nYsKEKsP6o/FGVWTrw4i1DA9A=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
+google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
+google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
+google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
+google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
+google.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=
+google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=
+google.golang.org/grpc v1.65.0 h1:bs/cUb4lp1G5iImFFd3u5ixQzweKizoZJAwBNLR42lc=
+google.golang.org/grpc v1.65.0/go.mod h1:WgYC2ypjlB0EiQi6wdKixMqukr6lBc0Vo+oOgjrM5ZQ=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
 google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
 google.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=
 google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=
+google.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
+gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
 gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
+gopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=
+gopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
+gopkg.in/natefinch/lumberjack.v2 v2.2.1 h1:bBRl1b0OH9s/DuPhuXpNl+VtCaJXFZ5/uEFST95x9zc=
+gopkg.in/natefinch/lumberjack.v2 v2.2.1/go.mod h1:YD8tP3GAjkrDg1eZH7EGmyESg/lsYskCTPBJVb9jqSc=
 gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=
 gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
+gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
 gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
+gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gotest.tools/v3 v3.5.1 h1:EENdUnS3pdur5nybKYIh2Vfgc8IUNBjxDPSjtiJcOzU=
+gotest.tools/v3 v3.5.1/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=
+honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
+honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
+pgregory.net/rapid v1.1.0 h1:CMa0sjHSru3puNx+J0MIAuiiEV4N0qj8/cMWGBBCsjw=
+pgregory.net/rapid v1.1.0/go.mod h1:PY5XlDGj0+V1FCq0o192FdRhpKHGTRIWBgqjDBTrq04=
 rsc.io/tmplfunc v0.0.3 h1:53XFQh69AfOa8Tw0Jm7t+GV7KZhOi6jzsCzTtKbMvzU=
 rsc.io/tmplfunc v0.0.3/go.mod h1:AG3sTPzElb1Io3Yg4voV9AGZJuleGAwaVRxL9M49PhA=
+sigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=
+sigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=
diff --git a/mod/state-transition/pkg/core/errors.go b/mod/state-transition/pkg/core/errors.go
index a29026a79..c384c8c19 100644
--- a/mod/state-transition/pkg/core/errors.go
+++ b/mod/state-transition/pkg/core/errors.go
@@ -30,6 +30,8 @@ var (
 	// match the expected value.
 	ErrSlotMismatch = errors.New("slot mismatch")
 
+	ErrProposerMismatch = errors.New("proposer key mismatch")
+
 	// ErrParentRootMismatch is returned when the parent root in an execution
 	// payload does not match the expected value.
 	ErrParentRootMismatch = errors.New("parent root mismatch")
diff --git a/mod/state-transition/pkg/core/helpers_test.go b/mod/state-transition/pkg/core/helpers_test.go
new file mode 100644
index 000000000..801c696d3
--- /dev/null
+++ b/mod/state-transition/pkg/core/helpers_test.go
@@ -0,0 +1,223 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package core_test
+
+import (
+	"context"
+	"fmt"
+	"testing"
+
+	corestore "cosmossdk.io/core/store"
+	"cosmossdk.io/log"
+	"cosmossdk.io/store"
+	"cosmossdk.io/store/metrics"
+	storetypes "cosmossdk.io/store/types"
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
+	"github.com/berachain/beacon-kit/mod/log/pkg/noop"
+	"github.com/berachain/beacon-kit/mod/node-core/pkg/components"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/transition"
+	"github.com/berachain/beacon-kit/mod/state-transition/pkg/core"
+	statedb "github.com/berachain/beacon-kit/mod/state-transition/pkg/core/state"
+	"github.com/berachain/beacon-kit/mod/storage/pkg/beacondb"
+	"github.com/berachain/beacon-kit/mod/storage/pkg/db"
+	"github.com/berachain/beacon-kit/mod/storage/pkg/encoding"
+	dbm "github.com/cosmos/cosmos-db"
+	sdk "github.com/cosmos/cosmos-sdk/types"
+	"github.com/stretchr/testify/require"
+)
+
+type (
+	TestBeaconStateMarshallableT = types.BeaconState[
+		*types.BeaconBlockHeader,
+		*types.Eth1Data,
+		*types.ExecutionPayloadHeader,
+		*types.Fork,
+		*types.Validator,
+		types.BeaconBlockHeader,
+		types.Eth1Data,
+		types.ExecutionPayloadHeader,
+		types.Fork,
+		types.Validator,
+	]
+
+	TestKVStoreT = beacondb.KVStore[
+		*types.BeaconBlockHeader,
+		*types.Eth1Data,
+		*types.ExecutionPayloadHeader,
+		*types.Fork,
+		*types.Validator,
+		types.Validators,
+	]
+
+	TestBeaconStateT = statedb.StateDB[
+		*types.BeaconBlockHeader,
+		*TestBeaconStateMarshallableT,
+		*types.Eth1Data,
+		*types.ExecutionPayloadHeader,
+		*types.Fork,
+		*TestKVStoreT,
+		*types.Validator,
+		types.Validators,
+		*engineprimitives.Withdrawal,
+		types.WithdrawalCredentials,
+	]
+)
+
+func createStateProcessor(
+	cs common.ChainSpec,
+	execEngine core.ExecutionEngine[
+		*types.ExecutionPayload,
+		*types.ExecutionPayloadHeader,
+		engineprimitives.Withdrawals,
+	],
+	signer crypto.BLSSigner,
+	fGetAddressFromPubKey func(crypto.BLSPubkey) ([]byte, error),
+) *core.StateProcessor[
+	*types.BeaconBlock,
+	*types.BeaconBlockBody,
+	*types.BeaconBlockHeader,
+	*TestBeaconStateT,
+	*transition.Context,
+	*types.Deposit,
+	*types.Eth1Data,
+	*types.ExecutionPayload,
+	*types.ExecutionPayloadHeader,
+	*types.Fork,
+	*types.ForkData,
+	*TestKVStoreT,
+	*types.Validator,
+	types.Validators,
+	*engineprimitives.Withdrawal,
+	engineprimitives.Withdrawals,
+	types.WithdrawalCredentials,
+] {
+	return core.NewStateProcessor[
+		*types.BeaconBlock,
+		*types.BeaconBlockBody,
+		*types.BeaconBlockHeader,
+		*TestBeaconStateT,
+		*transition.Context,
+		*types.Deposit,
+		*types.Eth1Data,
+		*types.ExecutionPayload,
+		*types.ExecutionPayloadHeader,
+		*types.Fork,
+		*types.ForkData,
+		*TestKVStoreT,
+		*types.Validator,
+		types.Validators,
+		*engineprimitives.Withdrawal,
+		engineprimitives.Withdrawals,
+		types.WithdrawalCredentials,
+	](
+		noop.NewLogger[any](),
+		cs,
+		execEngine,
+		signer,
+		fGetAddressFromPubKey,
+	)
+}
+
+type testKVStoreService struct {
+	ctx sdk.Context
+}
+
+func (kvs *testKVStoreService) OpenKVStore(context.Context) corestore.KVStore {
+	//nolint:contextcheck // fine with tests
+	return components.NewKVStore(
+		sdk.UnwrapSDKContext(kvs.ctx).KVStore(testStoreKey),
+	)
+}
+
+var (
+	testStoreKey = storetypes.NewKVStoreKey("state-transition-tests")
+	testCodec    = &encoding.SSZInterfaceCodec[*types.ExecutionPayloadHeader]{}
+)
+
+func initStore() (
+	*beacondb.KVStore[
+		*types.BeaconBlockHeader,
+		*types.Eth1Data,
+		*types.ExecutionPayloadHeader,
+		*types.Fork,
+		*types.Validator,
+		types.Validators,
+	], error) {
+	db, err := db.OpenDB("", dbm.MemDBBackend)
+	if err != nil {
+		return nil, fmt.Errorf("failed opening mem db: %w", err)
+	}
+	var (
+		nopLog     = log.NewNopLogger()
+		nopMetrics = metrics.NewNoOpMetrics()
+	)
+
+	cms := store.NewCommitMultiStore(
+		db,
+		nopLog,
+		nopMetrics,
+	)
+
+	ctx := sdk.NewContext(cms, true, nopLog)
+	cms.MountStoreWithDB(testStoreKey, storetypes.StoreTypeIAVL, nil)
+	if err = cms.LoadLatestVersion(); err != nil {
+		return nil, fmt.Errorf("failed to load latest version: %w", err)
+	}
+	testStoreService := &testKVStoreService{ctx: ctx}
+
+	return beacondb.New[
+		*types.BeaconBlockHeader,
+		*types.Eth1Data,
+		*types.ExecutionPayloadHeader,
+		*types.Fork,
+		*types.Validator,
+		types.Validators,
+	](
+		testStoreService,
+		testCodec,
+	), nil
+}
+
+func buildNextBlock(
+	t *testing.T,
+	beaconState *TestBeaconStateT,
+	nextBlkBody *types.BeaconBlockBody,
+) *types.BeaconBlock {
+	t.Helper()
+
+	// first update state root, similarly to what we do in processSlot
+	parentBlkHeader, err := beaconState.GetLatestBlockHeader()
+	require.NoError(t, err)
+	root := beaconState.HashTreeRoot()
+	parentBlkHeader.SetStateRoot(root)
+
+	// finally build the block
+	return &types.BeaconBlock{
+		Slot:          parentBlkHeader.GetSlot() + 1,
+		ProposerIndex: parentBlkHeader.GetProposerIndex(),
+		ParentRoot:    parentBlkHeader.HashTreeRoot(),
+		StateRoot:     common.Root{},
+		Body:          nextBlkBody,
+	}
+}
diff --git a/mod/state-transition/pkg/core/mocks/execution_engine.mock.go b/mod/state-transition/pkg/core/mocks/execution_engine.mock.go
new file mode 100644
index 000000000..c0ddbae4a
--- /dev/null
+++ b/mod/state-transition/pkg/core/mocks/execution_engine.mock.go
@@ -0,0 +1,86 @@
+// Code generated by mockery v2.48.0. DO NOT EDIT.
+
+package mocks
+
+import (
+	context "context"
+
+	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
+	core "github.com/berachain/beacon-kit/mod/state-transition/pkg/core"
+
+	mock "github.com/stretchr/testify/mock"
+)
+
+// ExecutionEngine is an autogenerated mock type for the ExecutionEngine type
+type ExecutionEngine[ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT any, WithdrawalsT core.Withdrawals] struct {
+	mock.Mock
+}
+
+type ExecutionEngine_Expecter[ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT any, WithdrawalsT core.Withdrawals] struct {
+	mock *mock.Mock
+}
+
+func (_m *ExecutionEngine[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) EXPECT() *ExecutionEngine_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
+	return &ExecutionEngine_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{mock: &_m.Mock}
+}
+
+// VerifyAndNotifyNewPayload provides a mock function with given fields: ctx, req
+func (_m *ExecutionEngine[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) VerifyAndNotifyNewPayload(ctx context.Context, req *engineprimitives.NewPayloadRequest[ExecutionPayloadT, WithdrawalsT]) error {
+	ret := _m.Called(ctx, req)
+
+	if len(ret) == 0 {
+		panic("no return value specified for VerifyAndNotifyNewPayload")
+	}
+
+	var r0 error
+	if rf, ok := ret.Get(0).(func(context.Context, *engineprimitives.NewPayloadRequest[ExecutionPayloadT, WithdrawalsT]) error); ok {
+		r0 = rf(ctx, req)
+	} else {
+		r0 = ret.Error(0)
+	}
+
+	return r0
+}
+
+// ExecutionEngine_VerifyAndNotifyNewPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAndNotifyNewPayload'
+type ExecutionEngine_VerifyAndNotifyNewPayload_Call[ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT any, WithdrawalsT core.Withdrawals] struct {
+	*mock.Call
+}
+
+// VerifyAndNotifyNewPayload is a helper method to define mock.On call
+//   - ctx context.Context
+//   - req *engineprimitives.NewPayloadRequest[ExecutionPayloadT,WithdrawalsT]
+func (_e *ExecutionEngine_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) VerifyAndNotifyNewPayload(ctx interface{}, req interface{}) *ExecutionEngine_VerifyAndNotifyNewPayload_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
+	return &ExecutionEngine_VerifyAndNotifyNewPayload_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("VerifyAndNotifyNewPayload", ctx, req)}
+}
+
+func (_c *ExecutionEngine_VerifyAndNotifyNewPayload_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func(ctx context.Context, req *engineprimitives.NewPayloadRequest[ExecutionPayloadT, WithdrawalsT])) *ExecutionEngine_VerifyAndNotifyNewPayload_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
+	_c.Call.Run(func(args mock.Arguments) {
+		run(args[0].(context.Context), args[1].(*engineprimitives.NewPayloadRequest[ExecutionPayloadT, WithdrawalsT]))
+	})
+	return _c
+}
+
+func (_c *ExecutionEngine_VerifyAndNotifyNewPayload_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 error) *ExecutionEngine_VerifyAndNotifyNewPayload_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
+	_c.Call.Return(_a0)
+	return _c
+}
+
+func (_c *ExecutionEngine_VerifyAndNotifyNewPayload_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func(context.Context, *engineprimitives.NewPayloadRequest[ExecutionPayloadT, WithdrawalsT]) error) *ExecutionEngine_VerifyAndNotifyNewPayload_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
+	_c.Call.Return(run)
+	return _c
+}
+
+// NewExecutionEngine creates a new instance of ExecutionEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
+// The first argument is typically a *testing.T value.
+func NewExecutionEngine[ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT any, WithdrawalsT core.Withdrawals](t interface {
+	mock.TestingT
+	Cleanup(func())
+}) *ExecutionEngine[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
+	mock := &ExecutionEngine[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{}
+	mock.Mock.Test(t)
+
+	t.Cleanup(func() { mock.AssertExpectations(t) })
+
+	return mock
+}
diff --git a/mod/state-transition/pkg/core/state/interfaces.go b/mod/state-transition/pkg/core/state/interfaces.go
index c40d5eff9..01225fe56 100644
--- a/mod/state-transition/pkg/core/state/interfaces.go
+++ b/mod/state-transition/pkg/core/state/interfaces.go
@@ -107,7 +107,7 @@ type KVStore[
 	// GetRandaoMixAtIndex retrieves the randao mix at the given index.
 	GetRandaoMixAtIndex(index uint64) (common.Bytes32, error)
 	// GetSlashings retrieves all slashings.
-	GetSlashings() ([]uint64, error)
+	GetSlashings() ([]math.Gwei, error)
 	// SetSlashingAtIndex sets the slashing at the given index.
 	SetSlashingAtIndex(index uint64, amount math.Gwei) error
 	// GetSlashingAtIndex retrieves the slashing at the given index.
diff --git a/mod/state-transition/pkg/core/state/statedb.go b/mod/state-transition/pkg/core/state/statedb.go
index 115816152..14eefc011 100644
--- a/mod/state-transition/pkg/core/state/statedb.go
+++ b/mod/state-transition/pkg/core/state/statedb.go
@@ -21,11 +21,25 @@
 package state
 
 import (
+	"github.com/berachain/beacon-kit/mod/config/pkg/spec"
 	"github.com/berachain/beacon-kit/mod/errors"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 )
 
+const (
+	// EVMMintingSlot is the slot at which we force a single withdrawal to
+	// mint EVMMintingAmount EVM tokens to EVMMintingAddress. No other
+	// withdrawals are inserted at this slot.
+	EVMMintingSlot uint64 = 69420
+
+	// EVMMintingAddress is the address at which we mint EVM tokens to.
+	EVMMintingAddress = "0x8a73D1380345942F1cb32541F1b19C40D8e6C94B"
+
+	// EVMMintingAmount is the amount of EVM tokens to mint.
+	EVMMintingAmount uint64 = 530000000000000000
+)
+
 // StateDB is the underlying struct behind the BeaconState interface.
 //
 //nolint:revive // todo fix somehow
@@ -186,7 +200,7 @@ func (s *StateDB[
 // ExpectedWithdrawals as defined in the Ethereum 2.0 Specification:
 // https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#new-get_expected_withdrawals
 //
-//nolint:lll
+//nolint:lll,funlen
 func (s *StateDB[
 	_, _, _, _, _, _, ValidatorT, _, WithdrawalT, _,
 ]) ExpectedWithdrawals() ([]WithdrawalT, error) {
@@ -202,6 +216,18 @@ func (s *StateDB[
 		return nil, err
 	}
 
+	// Slot used to mint EVM tokens.
+	if slot.Unwrap() == EVMMintingSlot {
+		var withdrawal WithdrawalT
+		withdrawals = append(withdrawals, withdrawal.New(
+			0, // NOT USED
+			0, // NOT USED
+			common.NewExecutionAddressFromHex(EVMMintingAddress),
+			math.Gwei(EVMMintingAmount),
+		))
+		return withdrawals, nil
+	}
+
 	epoch := math.Epoch(slot.Unwrap() / s.cs.SlotsPerEpoch())
 
 	withdrawalIndex, err := s.GetNextWithdrawalIndex()
@@ -225,10 +251,6 @@ func (s *StateDB[
 
 	// Iterate through indices to find the next validators to withdraw.
 	for range bound {
-		var (
-			withdrawal WithdrawalT
-			amount     math.Gwei
-		)
 		validator, err = s.ValidatorByIndex(validatorIndex)
 		if err != nil {
 			return nil, err
@@ -247,24 +269,44 @@ func (s *StateDB[
 
 		// Set the amount of the withdrawal depending on the balance of the
 		// validator.
+		var withdrawal WithdrawalT
+
+		//nolint:gocritic // ok.
 		if validator.IsFullyWithdrawable(balance, epoch) {
-			amount = balance
+			withdrawals = append(withdrawals, withdrawal.New(
+				math.U64(withdrawalIndex),
+				validatorIndex,
+				withdrawalAddress,
+				balance,
+			))
+
+			// Increment the withdrawal index to process the next withdrawal.
+			withdrawalIndex++
 		} else if validator.IsPartiallyWithdrawable(
 			balance, math.Gwei(s.cs.MaxEffectiveBalance()),
 		) {
-			amount = balance - math.Gwei(s.cs.MaxEffectiveBalance())
+			withdrawals = append(withdrawals, withdrawal.New(
+				math.U64(withdrawalIndex),
+				validatorIndex,
+				withdrawalAddress,
+				balance-math.Gwei(s.cs.MaxEffectiveBalance()),
+			))
+
+			// Increment the withdrawal index to process the next withdrawal.
+			withdrawalIndex++
+		} else if s.cs.DepositEth1ChainID() == spec.BartioChainID {
+			// Backward compatibility with Bartio
+			// TODO: Drop this when we drop other Bartio special cases.
+			withdrawal = withdrawal.New(
+				math.U64(withdrawalIndex),
+				validatorIndex,
+				withdrawalAddress,
+				0,
+			)
+
+			withdrawals = append(withdrawals, withdrawal)
+			withdrawalIndex++
 		}
-		withdrawal = withdrawal.New(
-			math.U64(withdrawalIndex),
-			validatorIndex,
-			withdrawalAddress,
-			amount,
-		)
-
-		withdrawals = append(withdrawals, withdrawal)
-
-		// Increment the withdrawal index to process the next withdrawal.
-		withdrawalIndex++
 
 		// Cap the number of withdrawals to the maximum allowed per payload.
 		//#nosec:G701 // won't overflow in practice.
diff --git a/mod/state-transition/pkg/core/state/types.go b/mod/state-transition/pkg/core/state/types.go
index 6bd3021f5..ed42c8dfe 100644
--- a/mod/state-transition/pkg/core/state/types.go
+++ b/mod/state-transition/pkg/core/state/types.go
@@ -54,7 +54,7 @@ type BeaconStateMarshallable[
 		randaoMixes []common.Bytes32,
 		nextWithdrawalIndex uint64,
 		nextWithdrawalValidatorIndex math.U64,
-		slashings []uint64, totalSlashing math.U64,
+		slashings []math.U64, totalSlashing math.U64,
 	) (T, error)
 }
 
diff --git a/mod/state-transition/pkg/core/state_processor.go b/mod/state-transition/pkg/core/state_processor.go
index 439cf3895..7602b961b 100644
--- a/mod/state-transition/pkg/core/state_processor.go
+++ b/mod/state-transition/pkg/core/state_processor.go
@@ -24,6 +24,7 @@ import (
 	"bytes"
 
 	"github.com/berachain/beacon-kit/mod/errors"
+	"github.com/berachain/beacon-kit/mod/log"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/constants"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
@@ -77,14 +78,24 @@ type StateProcessor[
 	},
 	WithdrawalCredentialsT ~[32]byte,
 ] struct {
+	// logger is used for logging information and errors.
+	logger log.Logger
 	// cs is the chain specification for the beacon chain.
 	cs common.ChainSpec
 	// signer is the BLS signer used for cryptographic operations.
 	signer crypto.BLSSigner
+	// fGetAddressFromPubKey verifies that a validator public key
+	// matches with the proposer address passed by the consensus
+	// Injected via ctor to simplify testing.
+	fGetAddressFromPubKey func(crypto.BLSPubkey) ([]byte, error)
 	// executionEngine is the engine responsible for executing transactions.
 	executionEngine ExecutionEngine[
 		ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT,
 	]
+
+	// processingGenesis allows initializing correctly
+	// eth1 deposit index upon genesis
+	processingGenesis bool
 }
 
 // NewStateProcessor creates a new state processor.
@@ -132,11 +143,13 @@ func NewStateProcessor[
 	},
 	WithdrawalCredentialsT ~[32]byte,
 ](
+	logger log.Logger,
 	cs common.ChainSpec,
 	executionEngine ExecutionEngine[
 		ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT,
 	],
 	signer crypto.BLSSigner,
+	fGetAddressFromPubKey func(crypto.BLSPubkey) ([]byte, error),
 ) *StateProcessor[
 	BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT,
 	BeaconStateT, ContextT, DepositT, Eth1DataT, ExecutionPayloadT,
@@ -149,9 +162,11 @@ func NewStateProcessor[
 		ExecutionPayloadHeaderT, ForkT, ForkDataT, KVStoreT, ValidatorT,
 		ValidatorsT, WithdrawalT, WithdrawalsT, WithdrawalCredentialsT,
 	]{
-		cs:              cs,
-		executionEngine: executionEngine,
-		signer:          signer,
+		logger:                logger,
+		cs:                    cs,
+		executionEngine:       executionEngine,
+		signer:                signer,
+		fGetAddressFromPubKey: fGetAddressFromPubKey,
 	}
 }
 
@@ -278,33 +293,22 @@ func (sp *StateProcessor[
 	st BeaconStateT,
 	blk BeaconBlockT,
 ) error {
-	// process the freshly created header.
-	if err := sp.processBlockHeader(st, blk); err != nil {
+	if err := sp.processBlockHeader(ctx, st, blk); err != nil {
 		return err
 	}
 
-	// process the execution payload.
-	if err := sp.processExecutionPayload(
-		ctx, st, blk,
-	); err != nil {
+	if err := sp.processExecutionPayload(ctx, st, blk); err != nil {
 		return err
 	}
 
-	// process the withdrawals.
-	if err := sp.processWithdrawals(
-		st, blk.GetBody(),
-	); err != nil {
+	if err := sp.processWithdrawals(st, blk); err != nil {
 		return err
 	}
 
-	// process the randao reveal.
-	if err := sp.processRandaoReveal(
-		st, blk, ctx.GetSkipValidateRandao(),
-	); err != nil {
+	if err := sp.processRandaoReveal(ctx, st, blk); err != nil {
 		return err
 	}
 
-	// process the deposits and ensure they match the local state.
 	if err := sp.processOperations(st, blk); err != nil {
 		return err
 	}
@@ -336,9 +340,11 @@ func (sp *StateProcessor[
 ) (transition.ValidatorUpdates, error) {
 	if err := sp.processRewardsAndPenalties(st); err != nil {
 		return nil, err
-	} else if err = sp.processSlashingsReset(st); err != nil {
+	}
+	if err := sp.processSlashingsReset(st); err != nil {
 		return nil, err
-	} else if err = sp.processRandaoMixesReset(st); err != nil {
+	}
+	if err := sp.processRandaoMixesReset(st); err != nil {
 		return nil, err
 	}
 	return sp.processSyncCommitteeUpdates(st)
@@ -348,23 +354,18 @@ func (sp *StateProcessor[
 // state.
 func (sp *StateProcessor[
 	BeaconBlockT, _, BeaconBlockHeaderT, BeaconStateT,
-	_, _, _, _, _, _, _, _, ValidatorT, _, _, _, _,
+	ContextT, _, _, _, _, _, _, _, ValidatorT, _, _, _, _,
 ]) processBlockHeader(
+	ctx ContextT,
 	st BeaconStateT,
 	blk BeaconBlockT,
 ) error {
-	var (
-		slot              math.Slot
-		err               error
-		latestBlockHeader BeaconBlockHeaderT
-
-		proposer ValidatorT
-	)
-
 	// Ensure the block slot matches the state slot.
-	if slot, err = st.GetSlot(); err != nil {
+	slot, err := st.GetSlot()
+	if err != nil {
 		return err
-	} else if blk.GetSlot() != slot {
+	}
+	if blk.GetSlot() != slot {
 		return errors.Wrapf(
 			ErrSlotMismatch,
 			"expected: %d, got: %d",
@@ -373,23 +374,50 @@ func (sp *StateProcessor[
 	}
 
 	// Verify the parent block root is correct.
-	if latestBlockHeader, err = st.GetLatestBlockHeader(); err != nil {
+	latestBlockHeader, err := st.GetLatestBlockHeader()
+	if err != nil {
 		return err
-	} else if blk.GetSlot() <= latestBlockHeader.GetSlot() {
+	}
+	if blk.GetSlot() <= latestBlockHeader.GetSlot() {
 		return errors.Wrapf(
 			ErrBlockSlotTooLow, "expected: > %d, got: %d",
 			latestBlockHeader.GetSlot(), blk.GetSlot(),
 		)
 	}
 
-	if parentBlockRoot := latestBlockHeader.
-		HashTreeRoot(); parentBlockRoot != blk.GetParentBlockRoot() {
+	parentBlockRoot := latestBlockHeader.HashTreeRoot()
+	if parentBlockRoot != blk.GetParentBlockRoot() {
 		return errors.Wrapf(ErrParentRootMismatch,
 			"expected: %s, got: %s",
 			parentBlockRoot.String(), blk.GetParentBlockRoot().String(),
 		)
 	}
 
+	// Verify that proposer matches with what consensus declares as proposer
+	proposer, err := st.ValidatorByIndex(blk.GetProposerIndex())
+	if err != nil {
+		return err
+	}
+	stateProposerAddress, err := sp.fGetAddressFromPubKey(proposer.GetPubkey())
+	if err != nil {
+		return err
+	}
+	if !bytes.Equal(stateProposerAddress, ctx.GetProposerAddress()) {
+		return errors.Wrapf(
+			ErrProposerMismatch, "store key: %s, consensus key: %s",
+			stateProposerAddress, ctx.GetProposerAddress(),
+		)
+	}
+
+	// Check to make sure the proposer isn't slashed.
+	if proposer.IsSlashed() {
+		return errors.Wrapf(
+			ErrSlashedProposer,
+			"index: %d",
+			blk.GetProposerIndex(),
+		)
+	}
+
 	// Ensure the block is within the acceptable range.
 	// TODO: move this is in the wrong spot.
 	deposits := blk.GetBody().GetDeposits()
@@ -401,31 +429,18 @@ func (sp *StateProcessor[
 	}
 
 	// Calculate the body root to place on the header.
-	var lbh BeaconBlockHeaderT
 	bodyRoot := blk.GetBody().HashTreeRoot()
-	if err = st.SetLatestBlockHeader(
-		lbh.New(
-			blk.GetSlot(),
-			blk.GetProposerIndex(),
-			blk.GetParentBlockRoot(),
-			// state_root is zeroed and overwritten
-			// in the next `process_slot` call.
-			common.Root{},
-			bodyRoot,
-		),
-	); err != nil {
-		return err
-	}
-
-	// Check to make sure the proposer isn't slashed.
-	if proposer, err = st.ValidatorByIndex(blk.GetProposerIndex()); err != nil {
-		return err
-	} else if proposer.IsSlashed() {
-		return errors.Wrapf(
-			ErrSlashedProposer, "index: %d", blk.GetProposerIndex(),
-		)
-	}
-	return nil
+	var lbh BeaconBlockHeaderT
+	lbh = lbh.New(
+		blk.GetSlot(),
+		blk.GetProposerIndex(),
+		blk.GetParentBlockRoot(),
+		// state_root is zeroed and overwritten
+		// in the next `process_slot` call.
+		common.Root{},
+		bodyRoot,
+	)
+	return st.SetLatestBlockHeader(lbh)
 }
 
 // getAttestationDeltas as defined in the Ethereum 2.0 specification.
diff --git a/mod/state-transition/pkg/core/state_processor_genesis.go b/mod/state-transition/pkg/core/state_processor_genesis.go
index a14295059..7633ddfa5 100644
--- a/mod/state-transition/pkg/core/state_processor_genesis.go
+++ b/mod/state-transition/pkg/core/state_processor_genesis.go
@@ -21,6 +21,7 @@
 package core
 
 import (
+	"github.com/berachain/beacon-kit/mod/config/pkg/spec"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/constants"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/hex"
@@ -29,12 +30,6 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/version"
 )
 
-//nolint:lll // temporary.
-const (
-	bArtioValRoot = "0x9147586693b6e8faa837715c0f3071c2000045b54233901c2e7871b15872bc43"
-	bArtioChainID = 80084
-)
-
 // InitializePreminedBeaconStateFromEth1 initializes the beacon state.
 //
 //nolint:gocognit,funlen // todo fix.
@@ -47,6 +42,11 @@ func (sp *StateProcessor[
 	executionPayloadHeader ExecutionPayloadHeaderT,
 	genesisVersion common.Version,
 ) (transition.ValidatorUpdates, error) {
+	sp.processingGenesis = true
+	defer func() {
+		sp.processingGenesis = false
+	}()
+
 	var (
 		blkHeader BeaconBlockHeaderT
 		blkBody   BeaconBlockBodyT
@@ -67,25 +67,28 @@ func (sp *StateProcessor[
 		return nil, err
 	}
 
-	if err := st.SetEth1DepositIndex(0); err != nil {
-		return nil, err
-	}
+	// Eth1DepositIndex will be set in processDeposit
 
-	if err := st.SetEth1Data(eth1Data.New(
-		common.Root{},
-		0,
-		executionPayloadHeader.GetBlockHash(),
-	)); err != nil {
+	if err := st.SetEth1Data(
+		eth1Data.New(
+			common.Root{},
+			0,
+			executionPayloadHeader.GetBlockHash(),
+		)); err != nil {
 		return nil, err
 	}
 
 	// TODO: we need to handle common.Version vs
 	// uint32 better.
-	bodyRoot := blkBody.Empty(
-		version.ToUint32(genesisVersion)).HashTreeRoot()
-	if err := st.SetLatestBlockHeader(blkHeader.New(
-		0, 0, common.Root{}, common.Root{}, bodyRoot,
-	)); err != nil {
+	bodyRoot := blkBody.Empty(version.ToUint32(genesisVersion)).HashTreeRoot()
+	if err := st.SetLatestBlockHeader(
+		blkHeader.New(
+			0,             // slot
+			0,             // proposer index
+			common.Root{}, // parent block root
+			common.Root{}, // state root
+			bodyRoot,
+		)); err != nil {
 		return nil, err
 	}
 
@@ -111,9 +114,9 @@ func (sp *StateProcessor[
 	}
 
 	// Handle special case bartio genesis.
-	if sp.cs.DepositEth1ChainID() == bArtioChainID {
+	if sp.cs.DepositEth1ChainID() == spec.BartioChainID {
 		if err = st.SetGenesisValidatorsRoot(
-			common.Root(hex.MustToBytes(bArtioValRoot))); err != nil {
+			common.Root(hex.MustToBytes(spec.BArtioValRoot))); err != nil {
 			return nil, err
 		}
 	} else if err = st.
diff --git a/mod/state-transition/pkg/core/state_processor_genesis_test.go b/mod/state-transition/pkg/core/state_processor_genesis_test.go
new file mode 100644
index 000000000..95a88c027
--- /dev/null
+++ b/mod/state-transition/pkg/core/state_processor_genesis_test.go
@@ -0,0 +1,328 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package core_test
+
+import (
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/chain-spec/pkg/chain"
+	"github.com/berachain/beacon-kit/mod/config/pkg/spec"
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/constants"
+	cryptomocks "github.com/berachain/beacon-kit/mod/primitives/pkg/crypto/mocks"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/version"
+	"github.com/berachain/beacon-kit/mod/state-transition/pkg/core/mocks"
+	"github.com/stretchr/testify/mock"
+	"github.com/stretchr/testify/require"
+)
+
+func TestInitialize(t *testing.T) {
+	// Create state processor to test
+	cs := spec.BetnetChainSpec()
+	execEngine := mocks.NewExecutionEngine[
+		*types.ExecutionPayload,
+		*types.ExecutionPayloadHeader,
+		engineprimitives.Withdrawals,
+	](t)
+	mocksSigner := &cryptomocks.BLSSigner{}
+
+	sp := createStateProcessor(
+		cs,
+		execEngine,
+		mocksSigner,
+		dummyProposerAddressVerifier,
+	)
+
+	// create test inputs
+	kvStore, err := initStore()
+	require.NoError(t, err)
+	beaconState := new(TestBeaconStateT).NewFromDB(kvStore, cs)
+
+	var (
+		deposits = []*types.Deposit{
+			{
+				Pubkey: [48]byte{0x01},
+				Amount: math.Gwei(cs.MaxEffectiveBalance()),
+				Index:  uint64(0),
+			},
+			{
+				Pubkey: [48]byte{0x02},
+				Amount: math.Gwei(cs.MaxEffectiveBalance() / 2),
+				Index:  uint64(1),
+			},
+			{
+				Pubkey: [48]byte{0x03},
+				Amount: math.Gwei(cs.EffectiveBalanceIncrement()),
+				Index:  uint64(2),
+			},
+			{
+				Pubkey: [48]byte{0x04},
+				Amount: math.Gwei(2 * cs.MaxEffectiveBalance()),
+				Index:  uint64(3),
+			},
+			{
+				Pubkey: [48]byte{0x05},
+				Amount: math.Gwei(cs.EffectiveBalanceIncrement() * 2 / 3),
+				Index:  uint64(4),
+			},
+		}
+		executionPayloadHeader = new(types.ExecutionPayloadHeader).Empty()
+		fork                   = &types.Fork{
+			PreviousVersion: version.FromUint32[common.Version](version.Deneb),
+			CurrentVersion:  version.FromUint32[common.Version](version.Deneb),
+			Epoch:           math.Epoch(constants.GenesisEpoch),
+		}
+	)
+
+	// define mocks expectations
+	mocksSigner.On(
+		"VerifySignature",
+		mock.Anything, mock.Anything, mock.Anything,
+	).Return(nil)
+
+	// run test
+	vals, err := sp.InitializePreminedBeaconStateFromEth1(
+		beaconState,
+		deposits,
+		executionPayloadHeader,
+		fork.CurrentVersion,
+	)
+
+	// check outputs
+	require.NoError(t, err)
+	require.Len(t, vals, len(deposits))
+
+	// check beacon state changes
+	resSlot, err := beaconState.GetSlot()
+	require.NoError(t, err)
+	require.Equal(t, math.Slot(0), resSlot)
+
+	resFork, err := beaconState.GetFork()
+	require.NoError(t, err)
+	require.Equal(t, fork, resFork)
+
+	for _, dep := range deposits {
+		checkValidatorNonBartio(t, cs, beaconState, dep)
+	}
+
+	// check that validator index is duly set
+	latestValIdx, err := beaconState.GetEth1DepositIndex()
+	require.NoError(t, err)
+	require.Equal(t, uint64(len(deposits)-1), latestValIdx)
+}
+
+func checkValidatorNonBartio(
+	t *testing.T,
+	cs chain.Spec[
+		common.DomainType,
+		math.Epoch,
+		common.ExecutionAddress,
+		math.Slot,
+		any,
+	],
+	bs *TestBeaconStateT,
+	dep *types.Deposit,
+) {
+	t.Helper()
+
+	// checks on validators common to all networks
+	commonChecksValidators(t, cs, bs, dep)
+
+	// checks on validators for any network but Bartio
+	idx, err := bs.ValidatorIndexByPubkey(dep.Pubkey)
+	require.NoError(t, err)
+
+	valBal, err := bs.GetBalance(idx)
+	require.NoError(t, err)
+	require.Equal(t, dep.Amount, valBal)
+}
+
+func TestInitializeBartio(t *testing.T) {
+	// Create state processor to test
+	cs := spec.TestnetChainSpec()
+	execEngine := mocks.NewExecutionEngine[
+		*types.ExecutionPayload,
+		*types.ExecutionPayloadHeader,
+		engineprimitives.Withdrawals,
+	](t)
+	mocksSigner := &cryptomocks.BLSSigner{}
+
+	sp := createStateProcessor(
+		cs,
+		execEngine,
+		mocksSigner,
+		dummyProposerAddressVerifier,
+	)
+
+	// create test inputs
+	kvStore, err := initStore()
+	require.NoError(t, err)
+	beaconState := new(TestBeaconStateT).NewFromDB(kvStore, cs)
+
+	var (
+		deposits = []*types.Deposit{
+			{
+				Pubkey: [48]byte{0x01},
+				Amount: math.Gwei(cs.MaxEffectiveBalance()),
+				Index:  uint64(0),
+			},
+			{
+				Pubkey: [48]byte{0x02},
+				Amount: math.Gwei(cs.MaxEffectiveBalance() / 2),
+				Index:  uint64(1),
+			},
+			{
+				Pubkey: [48]byte{0x03},
+				Amount: math.Gwei(cs.EffectiveBalanceIncrement()),
+				Index:  uint64(2),
+			},
+			{
+				Pubkey: [48]byte{0x04},
+				Amount: math.Gwei(2 * cs.MaxEffectiveBalance()),
+				Index:  uint64(3),
+			},
+			{
+				Pubkey: [48]byte{0x05},
+				Amount: math.Gwei(cs.EffectiveBalanceIncrement() * 2 / 3),
+				Index:  uint64(4),
+			},
+		}
+		executionPayloadHeader = new(types.ExecutionPayloadHeader).Empty()
+		fork                   = &types.Fork{
+			PreviousVersion: version.FromUint32[common.Version](version.Deneb),
+			CurrentVersion:  version.FromUint32[common.Version](version.Deneb),
+			Epoch:           math.Epoch(constants.GenesisEpoch),
+		}
+	)
+
+	// define mocks expectations
+	mocksSigner.On(
+		"VerifySignature",
+		mock.Anything, mock.Anything, mock.Anything,
+	).Return(nil)
+
+	// run test
+	vals, err := sp.InitializePreminedBeaconStateFromEth1(
+		beaconState,
+		deposits,
+		executionPayloadHeader,
+		fork.CurrentVersion,
+	)
+
+	// check outputs
+	require.NoError(t, err)
+	require.Len(t, vals, len(deposits))
+
+	// check beacon state changes
+	resSlot, err := beaconState.GetSlot()
+	require.NoError(t, err)
+	require.Equal(t, math.Slot(0), resSlot)
+
+	resFork, err := beaconState.GetFork()
+	require.NoError(t, err)
+	require.Equal(t, fork, resFork)
+
+	for _, dep := range deposits {
+		checkValidatorBartio(t, cs, beaconState, dep)
+	}
+
+	// check that validator index is duly set
+	latestValIdx, err := beaconState.GetEth1DepositIndex()
+	require.NoError(t, err)
+	require.Equal(t, uint64(len(deposits)-1), latestValIdx)
+}
+
+func checkValidatorBartio(
+	t *testing.T,
+	cs chain.Spec[
+		common.DomainType,
+		math.Epoch,
+		common.ExecutionAddress,
+		math.Slot,
+		any,
+	],
+	bs *TestBeaconStateT,
+	dep *types.Deposit,
+) {
+	t.Helper()
+
+	// checks on validators common to all networks
+	commonChecksValidators(t, cs, bs, dep)
+
+	// Bartio specific checks on validators
+	idx, err := bs.ValidatorIndexByPubkey(dep.Pubkey)
+	require.NoError(t, err)
+	val, err := bs.ValidatorByIndex(idx)
+	require.NoError(t, err)
+
+	valBal, err := bs.GetBalance(idx)
+	require.NoError(t, err)
+	require.Equal(t, val.EffectiveBalance, valBal)
+}
+
+func commonChecksValidators(
+	t *testing.T,
+	cs chain.Spec[
+		common.DomainType,
+		math.Epoch,
+		common.ExecutionAddress,
+		math.Slot,
+		any,
+	],
+	bs *TestBeaconStateT,
+	dep *types.Deposit,
+) {
+	t.Helper()
+
+	idx, err := bs.ValidatorIndexByPubkey(dep.Pubkey)
+	require.NoError(t, err)
+	require.Equal(t, math.U64(dep.Index), idx)
+
+	val, err := bs.ValidatorByIndex(idx)
+	require.NoError(t, err)
+	require.Equal(t, dep.Pubkey, val.Pubkey)
+
+	var (
+		maxBalance = math.Gwei(cs.MaxEffectiveBalance())
+		minBalance = math.Gwei(cs.EffectiveBalanceIncrement())
+	)
+	switch {
+	case dep.Amount >= maxBalance:
+		require.Equal(t, maxBalance, val.EffectiveBalance)
+	case dep.Amount >= minBalance && dep.Amount < maxBalance:
+		require.Equal(t, dep.Amount, val.EffectiveBalance)
+
+		// validator balance must be multiple of EffectiveBalanceIncrement
+		require.Equal(t, math.U64(0), val.EffectiveBalance%minBalance)
+	case dep.Amount < minBalance:
+		require.Equal(t, math.Gwei(0), val.EffectiveBalance)
+	}
+}
+
+// in genesis UTs we don't need to verify proposer address
+// (no one proposes genesis), hence the dummy implementation.
+func dummyProposerAddressVerifier(bytes.B48) ([]byte, error) {
+	return nil, nil
+}
diff --git a/mod/state-transition/pkg/core/state_processor_payload.go b/mod/state-transition/pkg/core/state_processor_payload.go
index 715d8d8af..3d1a6002a 100644
--- a/mod/state-transition/pkg/core/state_processor_payload.go
+++ b/mod/state-transition/pkg/core/state_processor_payload.go
@@ -23,8 +23,11 @@ package core
 import (
 	"context"
 
+	payloadtime "github.com/berachain/beacon-kit/mod/beacon/payload-time"
+	"github.com/berachain/beacon-kit/mod/config/pkg/spec"
 	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
 	"github.com/berachain/beacon-kit/mod/errors"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 	"golang.org/x/sync/errgroup"
 )
 
@@ -45,11 +48,21 @@ func (sp *StateProcessor[
 		g, gCtx = errgroup.WithContext(context.Background())
 	)
 
+	sp.logger.Info("processExecutionPayload",
+		"consensus height", blk.GetSlot().Unwrap(),
+		"payload height", payload.GetNumber().Unwrap(),
+		"payload timestamp", payload.GetTimestamp().Unwrap(),
+		"consensus timestamp", ctx.GetConsensusTime().Unwrap(),
+		"skip payload verification", ctx.GetSkipPayloadVerification(),
+	)
+
 	// Skip payload verification if the context is configured as such.
 	if !ctx.GetSkipPayloadVerification() {
 		g.Go(func() error {
 			return sp.validateExecutionPayload(
-				gCtx, st, blk, ctx.GetOptimisticEngine(),
+				gCtx, st, blk,
+				ctx.GetConsensusTime(),
+				ctx.GetOptimisticEngine(),
 			)
 		})
 	}
@@ -60,10 +73,7 @@ func (sp *StateProcessor[
 	// changes.
 	g.Go(func() error {
 		var err error
-		header, err = payload.ToHeader(
-			sp.cs.MaxWithdrawalsPerPayload(),
-			sp.cs.DepositEth1ChainID(),
-		)
+		header, err = payload.ToHeader()
 		return err
 	})
 
@@ -84,26 +94,34 @@ func (sp *StateProcessor[
 	ctx context.Context,
 	st BeaconStateT,
 	blk BeaconBlockT,
+	consensusTime math.U64,
 	optimisticEngine bool,
 ) error {
 	if err := sp.validateStatelessPayload(blk); err != nil {
 		return err
 	}
-	return sp.validateStatefulPayload(ctx, st, blk, optimisticEngine)
+	return sp.validateStatefulPayload(
+		ctx,
+		st,
+		blk,
+		consensusTime,
+		optimisticEngine,
+	)
 }
 
 // validateStatelessPayload performs stateless checks on the execution payload.
 func (sp *StateProcessor[
 	BeaconBlockT, _, _, _,
 	_, _, _, _, _, _, _, _, _, _, _, _, _,
-]) validateStatelessPayload(blk BeaconBlockT) error {
+]) validateStatelessPayload(
+	blk BeaconBlockT,
+) error {
 	body := blk.GetBody()
 	payload := body.GetExecutionPayload()
 
 	// Verify the number of withdrawals.
-	if withdrawals := payload.GetWithdrawals(); uint64(
-		len(withdrawals),
-	) > sp.cs.MaxWithdrawalsPerPayload() {
+	withdrawals := payload.GetWithdrawals()
+	if uint64(len(withdrawals)) > sp.cs.MaxWithdrawalsPerPayload() {
 		return errors.Wrapf(
 			ErrExceedMaximumWithdrawals,
 			"too many withdrawals, expected: %d, got: %d",
@@ -132,6 +150,7 @@ func (sp *StateProcessor[
 	ctx context.Context,
 	st BeaconStateT,
 	blk BeaconBlockT,
+	consensusTime math.U64,
 	optimisticEngine bool,
 ) error {
 	body := blk.GetBody()
@@ -142,8 +161,21 @@ func (sp *StateProcessor[
 		return err
 	}
 
+	// We skip timestamp check on Bartio for backward compatibility reasons
+	// TODO: enforce the check when we drop other Bartio special cases.
+	if sp.cs.DepositEth1ChainID() != spec.BartioChainID {
+		if err = payloadtime.Verify(
+			consensusTime,
+			lph.GetTimestamp(),
+			payload.GetTimestamp(),
+		); err != nil {
+			return err
+		}
+	}
+
 	// Check chain canonicity
-	if safeHash := lph.GetBlockHash(); safeHash != payload.GetParentHash() {
+	safeHash := lph.GetBlockHash()
+	if safeHash != payload.GetParentHash() {
 		return errors.Wrapf(
 			ErrParentPayloadHashMismatch,
 			"parent block with hash %x is not finalized, expected finalized hash %x",
diff --git a/mod/state-transition/pkg/core/state_processor_randao.go b/mod/state-transition/pkg/core/state_processor_randao.go
index ff7bf3ba9..7d0be4494 100644
--- a/mod/state-transition/pkg/core/state_processor_randao.go
+++ b/mod/state-transition/pkg/core/state_processor_randao.go
@@ -33,11 +33,11 @@ import (
 // ensures it matches the local state.
 func (sp *StateProcessor[
 	BeaconBlockT, _, _, BeaconStateT,
-	_, _, _, _, _, _, ForkDataT, _, _, _, _, _, _,
+	ContextT, _, _, _, _, _, ForkDataT, _, _, _, _, _, _,
 ]) processRandaoReveal(
+	ctx ContextT,
 	st BeaconStateT,
 	blk BeaconBlockT,
-	skipVerification bool,
 ) error {
 	slot, err := st.GetSlot()
 	if err != nil {
@@ -65,7 +65,7 @@ func (sp *StateProcessor[
 		), genesisValidatorsRoot,
 	)
 
-	if !skipVerification {
+	if !ctx.GetSkipValidateRandao() {
 		signingRoot := fd.ComputeRandaoSigningRoot(
 			sp.cs.DomainTypeRandao(), epoch,
 		)
diff --git a/mod/state-transition/pkg/core/state_processor_staking.go b/mod/state-transition/pkg/core/state_processor_staking.go
index a98def71a..91ffe721d 100644
--- a/mod/state-transition/pkg/core/state_processor_staking.go
+++ b/mod/state-transition/pkg/core/state_processor_staking.go
@@ -21,10 +21,15 @@
 package core
 
 import (
+	"fmt"
+
+	"github.com/berachain/beacon-kit/mod/config/pkg/spec"
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
 	"github.com/berachain/beacon-kit/mod/errors"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/version"
+	"github.com/berachain/beacon-kit/mod/state-transition/pkg/core/state"
 	"github.com/davecgh/go-spew/spew"
 )
 
@@ -83,14 +88,24 @@ func (sp *StateProcessor[
 	st BeaconStateT,
 	dep DepositT,
 ) error {
-	depositIndex, err := st.GetEth1DepositIndex()
-	if err != nil {
-		return err
+	var nextDepositIndex uint64
+	switch depositIndex, err := st.GetEth1DepositIndex(); {
+	case err == nil:
+		// just increment the deposit index if no error
+		nextDepositIndex = depositIndex + 1
+	case sp.processingGenesis && err != nil:
+		// If errored and still processing genesis,
+		// Eth1DepositIndex may have not been set yet.
+		nextDepositIndex = 0
+	default:
+		// Failed retrieving Eth1DepositIndex outside genesis is an error
+		return fmt.Errorf(
+			"failed retrieving eth1 deposit index outside of processing genesis: %w",
+			err,
+		)
 	}
 
-	if err = st.SetEth1DepositIndex(
-		depositIndex + 1,
-	); err != nil {
+	if err := st.SetEth1DepositIndex(nextDepositIndex); err != nil {
 		return err
 	}
 
@@ -105,23 +120,30 @@ func (sp *StateProcessor[
 	dep DepositT,
 ) error {
 	idx, err := st.ValidatorIndexByPubkey(dep.GetPubkey())
-	// If the validator already exists, we update the balance.
-	if err == nil {
-		var val ValidatorT
-		val, err = st.ValidatorByIndex(idx)
-		if err != nil {
-			return err
-		}
+	if err != nil {
+		// If the validator does not exist, we add the validator.
+		// Add the validator to the registry.
+		return sp.createValidator(st, dep)
+	}
 
-		// TODO: Modify balance here and then effective balance once per epoch.
-		val.SetEffectiveBalance(min(val.GetEffectiveBalance()+dep.GetAmount(),
-			math.Gwei(sp.cs.MaxEffectiveBalance())))
-		return st.UpdateValidatorAtIndex(idx, val)
+	// If the validator already exists, we update the balance.
+	var val ValidatorT
+	val, err = st.ValidatorByIndex(idx)
+	if err != nil {
+		return err
 	}
 
-	// If the validator does not exist, we add the validator.
-	// Add the validator to the registry.
-	return sp.createValidator(st, dep)
+	// TODO: Modify balance here and then effective balance once per epoch.
+	updatedBalance := types.ComputeEffectiveBalance(
+		val.GetEffectiveBalance()+dep.GetAmount(),
+		math.Gwei(sp.cs.EffectiveBalanceIncrement()),
+		math.Gwei(sp.cs.MaxEffectiveBalance()),
+	)
+	val.SetEffectiveBalance(updatedBalance)
+	if err = st.UpdateValidatorAtIndex(idx, val); err != nil {
+		return err
+	}
+	return st.IncreaseBalance(idx, dep.GetAmount())
 }
 
 // createValidator creates a validator if the deposit is valid.
@@ -131,12 +153,6 @@ func (sp *StateProcessor[
 	st BeaconStateT,
 	dep DepositT,
 ) error {
-	var (
-		genesisValidatorsRoot common.Root
-		epoch                 math.Epoch
-		err                   error
-	)
-
 	// Get the current slot.
 	slot, err := st.GetSlot()
 	if err != nil {
@@ -144,9 +160,8 @@ func (sp *StateProcessor[
 	}
 
 	// At genesis, the validators sign over an empty root.
-	if slot == 0 {
-		genesisValidatorsRoot = common.Root{}
-	} else {
+	genesisValidatorsRoot := common.Root{}
+	if slot != 0 {
 		// Get the genesis validators root to be used to find fork data later.
 		genesisValidatorsRoot, err = st.GetGenesisValidatorsRoot()
 		if err != nil {
@@ -155,7 +170,7 @@ func (sp *StateProcessor[
 	}
 
 	// Get the current epoch.
-	epoch = sp.cs.SlotToEpoch(slot)
+	epoch := sp.cs.SlotToEpoch(slot)
 
 	// Verify that the message was signed correctly.
 	var d ForkDataT
@@ -192,20 +207,19 @@ func (sp *StateProcessor[
 	)
 
 	// TODO: This is a bug that lives on bArtio. Delete this eventually.
-	const bArtioChainID = 80084
-	if sp.cs.DepositEth1ChainID() == bArtioChainID {
-		if err := st.AddValidatorBartio(val); err != nil {
-			return err
-		}
-	} else if err := st.AddValidator(val); err != nil {
-		return err
+	if sp.cs.DepositEth1ChainID() == spec.BartioChainID {
+		// Note in AddValidatorBartio we implicitly increase
+		// the balance from state st. This is unlike AddValidator.
+		return st.AddValidatorBartio(val)
 	}
 
+	if err := st.AddValidator(val); err != nil {
+		return err
+	}
 	idx, err := st.ValidatorIndexByPubkey(val.GetPubkey())
 	if err != nil {
 		return err
 	}
-
 	return st.IncreaseBalance(idx, dep.GetAmount())
 }
 
@@ -214,11 +228,13 @@ func (sp *StateProcessor[
 //
 //nolint:lll
 func (sp *StateProcessor[
-	_, BeaconBlockBodyT, _, BeaconStateT, _, _, _, _, _, _, _, _, _, _, _, _, _,
+	BeaconBlockT, _, _, BeaconStateT, _, _, _, _, _, _, _, _, _, _, _, _, _,
 ]) processWithdrawals(
 	st BeaconStateT,
-	body BeaconBlockBodyT,
+	blk BeaconBlockT,
 ) error {
+	body := blk.GetBody()
+
 	// Dequeue and verify the logs.
 	var (
 		nextValidatorIndex math.ValidatorIndex
@@ -242,6 +258,22 @@ func (sp *StateProcessor[
 		)
 	}
 
+	// Slot used to mint EVM tokens.
+	slot := blk.GetSlot()
+	if slot.Unwrap() == state.EVMMintingSlot {
+		// Sanity check.
+		wd := expectedWithdrawals[0]
+		if !wd.Equals(payloadWithdrawals[0]) {
+			return fmt.Errorf(
+				"minting withdrawal does not match expected %s, got %s",
+				spew.Sdump(wd), spew.Sdump(payloadWithdrawals[0]),
+			)
+		}
+
+		// No processing needed.
+		return nil
+	}
+
 	// Compare and process each withdrawal.
 	for i, wd := range expectedWithdrawals {
 		// Ensure the withdrawals match the local state.
diff --git a/mod/state-transition/pkg/core/state_processor_staking_test.go b/mod/state-transition/pkg/core/state_processor_staking_test.go
new file mode 100644
index 000000000..8ed6c99b9
--- /dev/null
+++ b/mod/state-transition/pkg/core/state_processor_staking_test.go
@@ -0,0 +1,167 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package core_test
+
+import (
+	"testing"
+
+	"github.com/berachain/beacon-kit/mod/config/pkg/spec"
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
+	cryptomocks "github.com/berachain/beacon-kit/mod/primitives/pkg/crypto/mocks"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/transition"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/version"
+	"github.com/berachain/beacon-kit/mod/state-transition/pkg/core/mocks"
+	"github.com/stretchr/testify/mock"
+	"github.com/stretchr/testify/require"
+)
+
+func TestTransitionUpdateValidators(t *testing.T) {
+	// Create state processor to test
+	cs := spec.BetnetChainSpec()
+	execEngine := mocks.NewExecutionEngine[
+		*types.ExecutionPayload,
+		*types.ExecutionPayloadHeader,
+		engineprimitives.Withdrawals,
+	](t)
+	mocksSigner := &cryptomocks.BLSSigner{}
+	dummyProposerAddr := []byte{0xff}
+
+	sp := createStateProcessor(
+		cs,
+		execEngine,
+		mocksSigner,
+		func(bytes.B48) ([]byte, error) {
+			return dummyProposerAddr, nil
+		},
+	)
+
+	kvStore, err := initStore()
+	require.NoError(t, err)
+	beaconState := new(TestBeaconStateT).NewFromDB(kvStore, cs)
+
+	var (
+		maxBalance       = math.Gwei(cs.MaxEffectiveBalance())
+		minBalance       = math.Gwei(cs.EffectiveBalanceIncrement())
+		emptyAddress     = common.ExecutionAddress{}
+		emptyCredentials = types.NewCredentialsFromExecutionAddress(
+			emptyAddress,
+		)
+	)
+
+	// Setup initial state via genesis
+	// TODO: consider instead setting state artificially
+	var (
+		genDeposits = []*types.Deposit{
+			{
+				Pubkey:      [48]byte{0x01},
+				Credentials: emptyCredentials,
+				Amount:      maxBalance - 3*minBalance,
+				Index:       uint64(0),
+			},
+			{
+				Pubkey:      [48]byte{0x02},
+				Credentials: emptyCredentials,
+				Amount:      maxBalance - 6*minBalance,
+				Index:       uint64(1),
+			},
+		}
+		genPayloadHeader = new(types.ExecutionPayloadHeader).Empty()
+		genVersion       = version.FromUint32[common.Version](version.Deneb)
+	)
+
+	mocksSigner.On(
+		"VerifySignature",
+		mock.Anything, mock.Anything, mock.Anything,
+	).Return(nil)
+
+	_, err = sp.InitializePreminedBeaconStateFromEth1(
+		beaconState,
+		genDeposits,
+		genPayloadHeader,
+		genVersion,
+	)
+	require.NoError(t, err)
+
+	// create test inputs
+	var (
+		ctx = &transition.Context{
+			SkipPayloadVerification: true,
+			SkipValidateResult:      true,
+			ProposerAddress:         dummyProposerAddr,
+		}
+		blkDeposits = []*types.Deposit{
+			{
+				Pubkey:      genDeposits[0].Pubkey,
+				Credentials: emptyCredentials,
+				Amount:      minBalance, // avoid breaching maxBalance
+				Index:       genDeposits[0].Index,
+			},
+		}
+	)
+
+	blk := buildNextBlock(
+		t,
+		beaconState,
+		&types.BeaconBlockBody{
+			ExecutionPayload: &types.ExecutionPayload{
+				Timestamp:     10,
+				ExtraData:     []byte("testing"),
+				Transactions:  [][]byte{},
+				Withdrawals:   []*engineprimitives.Withdrawal{}, // no withdrawals
+				BaseFeePerGas: math.NewU256(0),
+			},
+			Eth1Data: &types.Eth1Data{},
+			Deposits: blkDeposits,
+		},
+	)
+
+	// run the test
+	vals, err := sp.Transition(ctx, beaconState, blk)
+
+	// check outputs
+	require.NoError(t, err)
+	require.Zero(t, vals) // just update, no new validators
+
+	// check validator is duly updated
+	expectedValBalance := genDeposits[0].Amount + blkDeposits[0].Amount
+	idx, err := beaconState.ValidatorIndexByPubkey(genDeposits[0].Pubkey)
+	require.NoError(t, err)
+	require.Equal(t, math.U64(genDeposits[0].Index), idx)
+
+	val, err := beaconState.ValidatorByIndex(idx)
+	require.NoError(t, err)
+	require.Equal(t, genDeposits[0].Pubkey, val.Pubkey)
+	require.Equal(t, expectedValBalance, val.EffectiveBalance)
+
+	// check validator balance is updated
+	valBal, err := beaconState.GetBalance(idx)
+	require.NoError(t, err)
+	require.Equal(t, expectedValBalance, valBal)
+
+	// check that validator index is duly set (1-indexed here, to be fixed)
+	latestValIdx, err := beaconState.GetEth1DepositIndex()
+	require.NoError(t, err)
+	require.Equal(t, uint64(len(genDeposits)), latestValIdx)
+}
diff --git a/mod/state-transition/pkg/core/types.go b/mod/state-transition/pkg/core/types.go
index 5a359344d..1c22fdbc3 100644
--- a/mod/state-transition/pkg/core/types.go
+++ b/mod/state-transition/pkg/core/types.go
@@ -31,6 +31,7 @@ import (
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/eip4844"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	"github.com/karalabe/ssz"
 )
 
 // BeaconBlock represents a generic interface for a beacon block.
@@ -118,6 +119,12 @@ type Context interface {
 	// GetSkipValidateResult returns whether to validate the result of the state
 	// transition.
 	GetSkipValidateResult() bool
+	// GetProposerAddress returns the address of the validator
+	// selected by consensus to propose the block
+	GetProposerAddress() []byte
+	// GetConsensusTime returns the timestamp of current consensus request.
+	// It is used to build next payload and to validate currentpayload.
+	GetConsensusTime() math.U64
 }
 
 // Deposit is the interface for a deposit.
@@ -163,14 +170,18 @@ type ExecutionPayload[
 	GetBaseFeePerGas() *math.U256
 	GetBlobGasUsed() math.U64
 	GetExcessBlobGas() math.U64
-	ToHeader(
-		maxWithdrawalsPerPayload uint64,
-		eth1ChainID uint64,
-	) (ExecutionPayloadHeaderT, error)
+	ToHeader() (ExecutionPayloadHeaderT, error)
 }
 
 type ExecutionPayloadHeader interface {
 	GetBlockHash() common.ExecutionHash
+	GetTimestamp() math.U64
+}
+
+// Withdrawals defines the interface for managing withdrawal operations.
+type Withdrawals interface {
+	Len() int
+	EncodeIndex(int, *stdbytes.Buffer)
 }
 
 // ExecutionEngine is the interface for the execution engine.
@@ -178,10 +189,7 @@ type ExecutionEngine[
 	ExecutionPayloadT ExecutionPayload[
 		ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT],
 	ExecutionPayloadHeaderT any,
-	WithdrawalsT interface {
-		Len() int
-		EncodeIndex(int, *stdbytes.Buffer)
-	},
+	WithdrawalsT Withdrawals,
 ] interface {
 	// VerifyAndNotifyNewPayload verifies the new payload and notifies the
 	// execution client.
@@ -209,7 +217,7 @@ type Validator[
 	WithdrawalCredentialsT ~[32]byte,
 ] interface {
 	constraints.SSZMarshallableRootable
-	SizeSSZ() uint32
+	SizeSSZ(*ssz.Sizer) uint32
 	// New creates a new validator with the given parameters.
 	New(
 		pubkey crypto.BLSPubkey,
diff --git a/mod/storage/go.mod b/mod/storage/go.mod
index 59f0cb7f9..bc0d51c13 100644
--- a/mod/storage/go.mod
+++ b/mod/storage/go.mod
@@ -5,6 +5,9 @@ go 1.23.0
 replace (
 	cosmossdk.io/api => cosmossdk.io/api v0.7.3-0.20240806152830-8fb47b368cd4
 	cosmossdk.io/core => cosmossdk.io/core v0.0.0-20240806152830-8fb47b368cd4
+	cosmossdk.io/core/testing => cosmossdk.io/core/testing v0.0.0-20240806152830-8fb47b368cd4
+	github.com/berachain/beacon-kit/mod/node-core => ../node-core
+	github.com/berachain/beacon-kit/mod/observability => ../observability
 	github.com/cosmos/cosmos-sdk => github.com/berachain/cosmos-sdk v0.46.0-beta2.0.20240808182639-7bdbf06a94f2
 )
 
@@ -12,8 +15,10 @@ require (
 	cosmossdk.io/collections v0.4.0
 	cosmossdk.io/core v1.0.0
 	cosmossdk.io/log v1.4.1
+	github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f
 	github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0
 	github.com/berachain/beacon-kit/mod/log v0.0.0-20240821000339-4d4242ba4a50
+	github.com/berachain/beacon-kit/mod/node-core v0.0.0-20240821225446-81f31b0aac98
 	github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570
 	github.com/cometbft/cometbft v1.0.0-rc1.0.20240806094948-2c4293ef36c4
 	github.com/cosmos/cosmos-sdk v0.53.0
@@ -24,30 +29,125 @@ require (
 )
 
 require (
+	cosmossdk.io/core/testing v0.0.0-unpublished // indirect
+	cosmossdk.io/errors/v2 v2.0.0-20240731132947-df72853b3ca5 // indirect
+	cosmossdk.io/store/v2 v2.0.0-20240821144902-e88c138760a3 // indirect
 	cosmossdk.io/x/auth v0.0.0-20240806152830-8fb47b368cd4 // indirect
+	cosmossdk.io/x/bank v0.0.0-20240806152830-8fb47b368cd4 // indirect
 	cosmossdk.io/x/consensus v0.0.0-20240806152830-8fb47b368cd4 // indirect
+	cosmossdk.io/x/staking v0.0.0-20240806152830-8fb47b368cd4 // indirect
+	filippo.io/edwards25519 v1.1.0 // indirect
+	github.com/99designs/go-keychain v0.0.0-20191008050251-8e49817e8af4 // indirect
+	github.com/99designs/keyring v1.2.2 // indirect
+	github.com/DataDog/datadog-go v4.8.3+incompatible // indirect
 	github.com/Microsoft/go-winio v0.6.2 // indirect
+	github.com/VictoriaMetrics/fastcache v1.12.2 // indirect
+	github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 // indirect
+	github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e // indirect
 	github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df // indirect
-	github.com/btcsuite/btcd/chaincfg/chainhash v1.1.0 // indirect
+	github.com/berachain/beacon-kit/mod/cli v0.0.0-20241107170417-7905e3d59a1d // indirect
+	github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad // indirect
+	github.com/berachain/beacon-kit/mod/consensus v0.0.0-20241107170417-7905e3d59a1d // indirect
+	github.com/berachain/beacon-kit/mod/da v0.0.0-20240820191615-398849c34954 // indirect
+	github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720 // indirect
+	github.com/berachain/beacon-kit/mod/execution v0.0.0-20240820191615-398849c34954 // indirect
+	github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e // indirect
+	github.com/berachain/beacon-kit/mod/node-api v0.0.0-20241107170417-7905e3d59a1d // indirect
+	github.com/berachain/beacon-kit/mod/node-api/engines v0.0.0-20240806160829-cde2d1347e7e // indirect
+	github.com/berachain/beacon-kit/mod/observability v0.0.0-unpublished // indirect
+	github.com/berachain/beacon-kit/mod/payload v0.0.0-20240705193247-d464364483df // indirect
+	github.com/berachain/beacon-kit/mod/state-transition v0.0.0-20240717225334-64ec6650da31 // indirect
+	github.com/bgentry/speakeasy v0.2.0 // indirect
+	github.com/bits-and-blooms/bitset v1.13.0 // indirect
 	github.com/cockroachdb/fifo v0.0.0-20240616162244-4768e80dfb9a // indirect
 	github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 // indirect
+	github.com/consensys/bavard v0.1.13 // indirect
+	github.com/consensys/gnark-crypto v0.13.0 // indirect
+	github.com/cosmos/crypto v0.1.2 // indirect
+	github.com/cosmos/go-bip39 v1.0.0 // indirect
 	github.com/cosmos/iavl v1.2.1-0.20240731145221-594b181f427e // indirect
+	github.com/cosmos/ledger-cosmos-go v0.13.3 // indirect
+	github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a // indirect
+	github.com/crate-crypto/go-kzg-4844 v1.1.0 // indirect
+	github.com/danieljoos/wincred v1.2.1 // indirect
+	github.com/deckarep/golang-set/v2 v2.6.0 // indirect
 	github.com/dvsekhvalnov/jose2go v1.7.0 // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
+	github.com/ethereum/c-kzg-4844 v1.0.3 // indirect
+	github.com/ethereum/go-ethereum v1.14.7 // indirect
+	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 // indirect
+	github.com/fsnotify/fsnotify v1.7.0 // indirect
+	github.com/gabriel-vasile/mimetype v1.4.6 // indirect
+	github.com/go-faster/xor v1.0.0 // indirect
+	github.com/go-ole/go-ole v1.3.0 // indirect
+	github.com/go-playground/locales v0.14.1 // indirect
+	github.com/go-playground/universal-translator v0.18.1 // indirect
+	github.com/go-playground/validator/v10 v10.22.0 // indirect
 	github.com/goccy/go-json v0.10.3 // indirect
+	github.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2 // indirect
+	github.com/gofrs/flock v0.12.1 // indirect
+	github.com/gofrs/uuid v4.4.0+incompatible // indirect
+	github.com/golang-jwt/jwt v3.2.2+incompatible // indirect
+	github.com/golang-jwt/jwt/v4 v4.5.1 // indirect
+	github.com/golang-jwt/jwt/v5 v5.2.1 // indirect
+	github.com/google/gofuzz v1.2.0 // indirect
+	github.com/google/orderedcode v0.0.1 // indirect
+	github.com/google/uuid v1.6.0 // indirect
+	github.com/gorilla/websocket v1.5.3 // indirect
+	github.com/grpc-ecosystem/grpc-gateway v1.16.0 // indirect
+	github.com/gsterjov/go-libsecret v0.0.0-20161001094733-a6f4afe4910c // indirect
+	github.com/hashicorp/hcl v1.0.0 // indirect
+	github.com/hdevalence/ed25519consensus v0.2.0 // indirect
+	github.com/holiman/bloomfilter/v2 v2.0.3 // indirect
 	github.com/karalabe/ssz v0.2.1-0.20240724074312-3d1ff7a6f7c4 // indirect
 	github.com/klauspost/cpuid/v2 v2.2.8 // indirect
+	github.com/labstack/echo/v4 v4.12.0 // indirect
+	github.com/labstack/gommon v0.4.2 // indirect
+	github.com/leodido/go-urn v1.4.0 // indirect
+	github.com/lib/pq v1.10.9 // indirect
+	github.com/magiconair/properties v1.8.7 // indirect
+	github.com/mattn/go-runewidth v0.0.16 // indirect
+	github.com/minio/highwayhash v1.0.3 // indirect
 	github.com/minio/sha256-simd v1.0.1 // indirect
 	github.com/mitchellh/mapstructure v1.5.0 // indirect
+	github.com/mmcloughlin/addchain v0.4.0 // indirect
+	github.com/mtibben/percent v0.2.1 // indirect
 	github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect
-	github.com/onsi/gomega v1.33.1 // indirect
+	github.com/olekukonko/tablewriter v0.0.5 // indirect
+	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
+	github.com/phuslu/log v1.0.110 // indirect
 	github.com/prysmaticlabs/go-bitfield v0.0.0-20240618144021-706c95b2dd15 // indirect
 	github.com/prysmaticlabs/gohashtree v0.0.4-beta.0.20240624100937-73632381301b // indirect
+	github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect
+	github.com/rivo/uniseg v0.4.7 // indirect
+	github.com/rs/cors v1.11.0 // indirect
 	github.com/sagikazarmark/locafero v0.6.0 // indirect
+	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
+	github.com/shirou/gopsutil v3.21.11+incompatible // indirect
 	github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8 // indirect
+	github.com/spf13/viper v1.19.0 // indirect
+	github.com/subosito/gotenv v1.6.0 // indirect
+	github.com/tidwall/btree v1.7.0 // indirect
+	github.com/tklauser/go-sysconf v0.3.14 // indirect
+	github.com/tklauser/numcpus v0.8.0 // indirect
+	github.com/umbracle/fastrlp v0.1.0 // indirect
+	github.com/valyala/bytebufferpool v1.0.0 // indirect
+	github.com/valyala/fasttemplate v1.2.2 // indirect
+	github.com/yusufpapurcu/wmi v1.2.4 // indirect
+	github.com/zondax/hid v0.9.2 // indirect
+	github.com/zondax/ledger-go v0.14.3 // indirect
+	gitlab.com/yawning/secp256k1-voi v0.0.0-20230925100816-f2616030848b // indirect
+	gitlab.com/yawning/tuplehash v0.0.0-20230713102510-df83abbf9a02 // indirect
 	golang.org/x/sync v0.8.0 // indirect
-	google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 // indirect
+	golang.org/x/term v0.25.0 // indirect
+	golang.org/x/time v0.5.0 // indirect
+	google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d // indirect
+	gopkg.in/ini.v1 v1.67.0 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
+	gotest.tools/v3 v3.5.1 // indirect
+	pgregory.net/rapid v1.1.0 // indirect
+	rsc.io/tmplfunc v0.0.3 // indirect
 )
 
 require (
@@ -57,7 +157,7 @@ require (
 	cosmossdk.io/depinject v1.0.0 // indirect
 	cosmossdk.io/errors v1.0.1 // indirect
 	cosmossdk.io/math v1.3.0 // indirect
-	cosmossdk.io/store v1.1.1-0.20240418092142-896cdf1971bc // indirect
+	cosmossdk.io/store v1.1.1-0.20240418092142-896cdf1971bc
 	cosmossdk.io/x/tx v0.13.4-0.20240623110059-dec2d5583e39 // indirect
 	github.com/DataDog/zstd v1.5.6 // indirect
 	github.com/beorn7/perks v1.0.1 // indirect
@@ -105,7 +205,7 @@ require (
 	github.com/mattn/go-colorable v0.1.13 // indirect
 	github.com/mattn/go-isatty v0.0.20 // indirect
 	github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a // indirect
-	github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
 	github.com/prometheus/client_golang v1.20.1 // indirect
@@ -114,7 +214,7 @@ require (
 	github.com/prometheus/procfs v0.15.1 // indirect
 	github.com/rogpeppe/go-internal v1.12.0 // indirect
 	github.com/rs/zerolog v1.33.0 // indirect
-	github.com/sasha-s/go-deadlock v0.3.1 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
 	github.com/spf13/cast v1.7.0 // indirect
 	github.com/spf13/cobra v1.8.1 // indirect
 	github.com/spf13/pflag v1.0.5 // indirect
@@ -123,15 +223,15 @@ require (
 	github.com/syndtr/goleveldb v1.0.1-0.20220721030215-126854af5e6d // indirect
 	github.com/tendermint/go-amino v0.16.0 // indirect
 	go.opencensus.io v0.24.0 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
+	golang.org/x/net v0.30.0 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
 	google.golang.org/grpc v1.65.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 	sigs.k8s.io/yaml v1.4.0 // indirect
 )
diff --git a/mod/storage/go.sum b/mod/storage/go.sum
index 4500d8cf3..b0e4e1ee1 100644
--- a/mod/storage/go.sum
+++ b/mod/storage/go.sum
@@ -3,16 +3,21 @@ buf.build/gen/go/cometbft/cometbft/protocolbuffers/go v1.34.2-20240701160653-fed
 buf.build/gen/go/cosmos/gogo-proto/protocolbuffers/go v1.34.2-20240130113600-88ef6483f90f.2 h1:b7EEYTUHmWSBEyISHlHvXbJPqtKiHRuUignL1tsHnNQ=
 buf.build/gen/go/cosmos/gogo-proto/protocolbuffers/go v1.34.2-20240130113600-88ef6483f90f.2/go.mod h1:HqcXMSa5qnNuakaMUo+hWhF51mKbcrZxGl9Vp5EeJXc=
 cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
 cosmossdk.io/api v0.7.3-0.20240806152830-8fb47b368cd4 h1:GWHIYxkZnQZ2/BVzBV0Qu2xyPRcysPI3kHToCGmRmh0=
 cosmossdk.io/api v0.7.3-0.20240806152830-8fb47b368cd4/go.mod h1:vV3VnJvvK4IWkc1deNEJ1OAL028zw1WPezwKKDAsq60=
 cosmossdk.io/collections v0.4.0 h1:PFmwj2W8szgpD5nOd8GWH6AbYNi1f2J6akWXJ7P5t9s=
 cosmossdk.io/collections v0.4.0/go.mod h1:oa5lUING2dP+gdDquow+QjlF45eL1t4TJDypgGd+tv0=
 cosmossdk.io/core v0.0.0-20240806152830-8fb47b368cd4 h1:dDdZ0xneWTA63vu1OOc1fEpqYQNangvSsxrdPWymlQ8=
 cosmossdk.io/core v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:sLzMwAW9HW+Nm3GltUVHDRSRZbcXLy9+2AYgi2bwt/s=
+cosmossdk.io/core/testing v0.0.0-20240806152830-8fb47b368cd4 h1:M/Rcz6Bp6mQLgBdysfnu0ABUWWWcATQ1192/W8jBGy0=
+cosmossdk.io/core/testing v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:s6VKCgPZqs+CnW+18fNQqKoQtqxZ+U9bjz9BcySgNPs=
 cosmossdk.io/depinject v1.0.0 h1:dQaTu6+O6askNXO06+jyeUAnF2/ssKwrrszP9t5q050=
 cosmossdk.io/depinject v1.0.0/go.mod h1:zxK/h3HgHoA/eJVtiSsoaRaRA2D5U4cJ5thIG4ssbB8=
 cosmossdk.io/errors v1.0.1 h1:bzu+Kcr0kS/1DuPBtUFdWjzLqyUuCiyHjyJB6srBV/0=
 cosmossdk.io/errors v1.0.1/go.mod h1:MeelVSZThMi4bEakzhhhE/CKqVv3nOJDA25bIqRDu/U=
+cosmossdk.io/errors/v2 v2.0.0-20240731132947-df72853b3ca5 h1:IQNdY2kB+k+1OM2DvqFG1+UgeU1JzZrWtwuWzI3ZfwA=
+cosmossdk.io/errors/v2 v2.0.0-20240731132947-df72853b3ca5/go.mod h1:0CuYKkFHxc1vw2JC+t21THBCALJVROrWVR/3PQ1urpc=
 cosmossdk.io/log v1.4.1 h1:wKdjfDRbDyZRuWa8M+9nuvpVYxrEOwbD/CA8hvhU8QM=
 cosmossdk.io/log v1.4.1/go.mod h1:k08v0Pyq+gCP6phvdI6RCGhLf/r425UT6Rk/m+o74rU=
 cosmossdk.io/math v1.3.0 h1:RC+jryuKeytIiictDslBP9i1fhkVm6ZDmZEoNP316zE=
@@ -21,10 +26,16 @@ cosmossdk.io/schema v0.1.1 h1:I0M6pgI7R10nq+/HCQfbO6BsGBZA8sQy+duR1Y3aKcA=
 cosmossdk.io/schema v0.1.1/go.mod h1:RDAhxIeNB4bYqAlF4NBJwRrgtnciMcyyg0DOKnhNZQQ=
 cosmossdk.io/store v1.1.1-0.20240418092142-896cdf1971bc h1:R9O9d75e0qZYUsVV0zzi+D7cNLnX2JrUOQNoIPaF0Bg=
 cosmossdk.io/store v1.1.1-0.20240418092142-896cdf1971bc/go.mod h1:amTTatOUV3u1PsKmNb87z6/galCxrRbz9kRdJkL0DyU=
+cosmossdk.io/store/v2 v2.0.0-20240821144902-e88c138760a3 h1:KhVcFQYUqkBMnqEo+2NjYv0+rwazWuGaY5iXdQOHgDw=
+cosmossdk.io/store/v2 v2.0.0-20240821144902-e88c138760a3/go.mod h1:IWUShGUIixihbCEiAJtM9Z2fwIVqahXLVXEjxEn2/ps=
 cosmossdk.io/x/auth v0.0.0-20240806152830-8fb47b368cd4 h1:e+6AXOLdjp0j+ZCdOyJVJ+zAMF2PVLlMwyBFiVm+gWk=
 cosmossdk.io/x/auth v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:B9HtgWG6fy6XZZLvOnGqMxU31CUVaC3q+yWvZ1IXCqk=
+cosmossdk.io/x/bank v0.0.0-20240806152830-8fb47b368cd4 h1:p11oqqwpPM+YpVmk3zl0MHlNQBp4y61p/GZpSw9DVMg=
+cosmossdk.io/x/bank v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:b9+OQO/zoDDLjKK20CwhPjU7GDpLIeVw3gyYxjam/DM=
 cosmossdk.io/x/consensus v0.0.0-20240806152830-8fb47b368cd4 h1:CISlpOSE+2UGSPA0WNwAqjwKLrT1rHSEGwLZ3QCug2M=
 cosmossdk.io/x/consensus v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:eMHEvLm6/1ijhYtaZw/D4SxVXrufrx6d4UhcY/Zr3xI=
+cosmossdk.io/x/staking v0.0.0-20240806152830-8fb47b368cd4 h1:k5VbC0/BYAkMg/BJKFNQBSE3/B/I+NMuPO99jIhAAm0=
+cosmossdk.io/x/staking v0.0.0-20240806152830-8fb47b368cd4/go.mod h1:iZUWClYP5k18b6vRY8Xaq+qlhr9a/VB8gdq6XqRvF1s=
 cosmossdk.io/x/tx v0.13.4-0.20240623110059-dec2d5583e39 h1:fZvdmYfQdJ+CX5axx3ChtLOCAIXoLzLoFf7hHAI+fws=
 cosmossdk.io/x/tx v0.13.4-0.20240623110059-dec2d5583e39/go.mod h1:iEnMX34NiupZH074wbEtyiozWEGhsk2OSNB3AriYl3A=
 filippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=
@@ -33,6 +44,8 @@ github.com/99designs/go-keychain v0.0.0-20191008050251-8e49817e8af4 h1:/vQbFIOMb
 github.com/99designs/go-keychain v0.0.0-20191008050251-8e49817e8af4/go.mod h1:hN7oaIRCjzsZ2dE+yG5k+rsdt3qcwykqK6HVGcKwsw4=
 github.com/99designs/keyring v1.2.2 h1:pZd3neh/EmUzWONb35LxQfvuY7kiSXAq3HQd97+XBn0=
 github.com/99designs/keyring v1.2.2/go.mod h1:wes/FrByc8j7lFOAGLGSNEg8f/PaI3cgTBqhFkHUrPk=
+github.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 h1:L/gRVlceqvL25UVaW/CKtUDjefjrs0SPonmDGUVOYP0=
+github.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=
 github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
 github.com/DataDog/datadog-go v3.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=
 github.com/DataDog/datadog-go v4.8.3+incompatible h1:fNGaYSuObuQb5nzeTQqowRAd9bpDIRRV4/gUtIBjh8Q=
@@ -41,36 +54,80 @@ github.com/DataDog/zstd v1.5.6 h1:LbEglqepa/ipmmQJUDnSsfvA8e8IStVcGaFWDuxvGOY=
 github.com/DataDog/zstd v1.5.6/go.mod h1:g4AWEaM3yOg3HYfnJ3YIawPnVdXJh9QME85blwSAmyw=
 github.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=
 github.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=
+github.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 h1:TngWCqHvy9oXAN6lEVMRuU21PR1EtLVZJmdB18Gu3Rw=
+github.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5/go.mod h1:lmUJ/7eu/Q8D7ML55dXQrVaamCz2vxCfdQBasLZfHKk=
+github.com/VictoriaMetrics/fastcache v1.12.2 h1:N0y9ASrJ0F6h0QaC3o6uJb3NIZ9VKLjCM7NQbSmF7WI=
+github.com/VictoriaMetrics/fastcache v1.12.2/go.mod h1:AmC+Nzz1+3G2eCPapF6UcsnkThDcMsQicp4xDukwJYI=
 github.com/VividCortex/gohistogram v1.0.0 h1:6+hBz+qvs0JOrrNhhmR7lFxo5sINxBCGXrdtl/UvroE=
 github.com/VividCortex/gohistogram v1.0.0/go.mod h1:Pf5mBqqDxYaXu3hDrrU+w6nw50o/4+TcAqDqk/vUH7g=
+github.com/adlio/schema v1.3.6 h1:k1/zc2jNfeiZBA5aFTRy37jlBIuCkXCm0XmvpzCKI9I=
+github.com/adlio/schema v1.3.6/go.mod h1:qkxwLgPBd1FgLRHYVCmQT/rrBr3JH38J9LjmVzWNudg=
 github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
 github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
 github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
 github.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
+github.com/allegro/bigcache v1.2.1-0.20190218064605-e24eb225f156 h1:eMwmnE/GDgah4HI848JfFxHt+iPb26b4zyfspmqY0/8=
+github.com/allegro/bigcache v1.2.1-0.20190218064605-e24eb225f156/go.mod h1:Cb/ax3seSYIx7SuZdm2G2xzfwmv3TPSk2ucNfQESPXM=
+github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
 github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=
 github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=
 github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=
 github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=
+github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8 h1:04G7REWDoTzty7rWlTBrmdmcFALoKYluUhz5NXeqaiM=
+github.com/berachain/beacon-kit/mod/async v0.0.0-20240821213929-f32b8e2dc5c8/go.mod h1:3wR01SglBZ+HvDvhbugz/Mxem22JUThJRwo2Ec8Q0No=
+github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e h1:Eruedz4oEjURJs9fab95hR3B746mccZr9sF0eDlGx4I=
+github.com/berachain/beacon-kit/mod/beacon v0.0.0-20240821052951-c15422305b4e/go.mod h1:hyB6jdTwCalJ6IMwCtYOXjXrqIg3T1QruIzs4NPrNkw=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df h1:mnD1LKqDQ0n+OFdDqOuvKaEiUKRJzsO4V0wyyn/gJYg=
 github.com/berachain/beacon-kit/mod/chain-spec v0.0.0-20240705193247-d464364483df/go.mod h1:bTFB4Rdvm7D/WdwPYkqQ+8T0XOMBv0pzXfp1E46BFX8=
+github.com/berachain/beacon-kit/mod/cli v0.0.0-20241107170417-7905e3d59a1d h1:n/19ZIZOHbXaPPRsMakklmEg3ru5Q2qDvRVvL6dUkho=
+github.com/berachain/beacon-kit/mod/cli v0.0.0-20241107170417-7905e3d59a1d/go.mod h1:M4ld8lQp4xs/afMrmZGvdwtnwRN1KmQoVVAkxxS99NM=
+github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad h1:A71t/ENiUmIAbeosMeoV2Re1cSG1OJHwsDlRGjmRGy8=
+github.com/berachain/beacon-kit/mod/config v0.0.0-20241113214258-240f617103ad/go.mod h1:sWT7sNyE7fyNtn0EwxBHRNsEy6NlaGFDbPpQUkbrGvY=
+github.com/berachain/beacon-kit/mod/consensus v0.0.0-20241107170417-7905e3d59a1d h1:eMT1D2nGa1u0xvwzvL8xak2u6i1Si6bzyavwkHfFAKg=
+github.com/berachain/beacon-kit/mod/consensus v0.0.0-20241107170417-7905e3d59a1d/go.mod h1:7yo4F0saeNWgYWhU5h0nDdZClISGZj4y2EIQv/9LSxg=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f h1:Vzglhdv60M7LBS3FBuqK0eUX8vYJBJnL/RwYpxUswpo=
+github.com/berachain/beacon-kit/mod/consensus-types v0.0.0-20240904192942-99aeabe6bb1f/go.mod h1:cZd8cFZ+ylhh3/NUbrdXO2ri1/7KOaYBjo1B8MgbgMM=
+github.com/berachain/beacon-kit/mod/da v0.0.0-20240820191615-398849c34954 h1:uFAdG6vtoOFxvz0pjkl5D0XGc4PcR0Ukf3M7gU3B92o=
+github.com/berachain/beacon-kit/mod/da v0.0.0-20240820191615-398849c34954/go.mod h1:n6pq+wYP5+jBZbxsVwL0Y9pspcXhNYcA3gHOaJ4rxeA=
+github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720 h1:rVltwwt4JAhpvqeRDZ8J07e9XM+jzfDCJEghPA4r5lg=
+github.com/berachain/beacon-kit/mod/engine-primitives v0.0.0-20240809202957-3e3f169ad720/go.mod h1:kGxAesqTkt75+QYQ73O9I5PqAicSL9JGh5wypiWgb8I=
 github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0 h1:kCSrkb/uVXfMKJPKjf0c7nlJkwn5cNwMxtzRW4zNq2A=
 github.com/berachain/beacon-kit/mod/errors v0.0.0-20240806211103-d1105603bfc0/go.mod h1:og0jtHZosPDTyhge9tMBlRItoZ4Iv3aZFM9n4QDpcdo=
+github.com/berachain/beacon-kit/mod/execution v0.0.0-20240820191615-398849c34954 h1:n68WUPCAFBsk439G7YQB91sSnBEPZ83c2sJlGQ4B3Wc=
+github.com/berachain/beacon-kit/mod/execution v0.0.0-20240820191615-398849c34954/go.mod h1:Hz9RML6GtY9eiCy6lhtf2HtzW5GEoazcv/IHbMw6R1A=
+github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e h1:0/FDBXtagMkpta/f4J2uAah2NM1G+0dqxngzMzrmbw4=
+github.com/berachain/beacon-kit/mod/geth-primitives v0.0.0-20240806160829-cde2d1347e7e/go.mod h1:7/SXz8S5VpFl2thcKuBdu1OId+SgI1o4N+S1FB92Zw8=
 github.com/berachain/beacon-kit/mod/log v0.0.0-20240821000339-4d4242ba4a50 h1:7NCEVmPxy4Tp0WF5n9NR7iSf5owQNq4zSE96gyvxCGc=
 github.com/berachain/beacon-kit/mod/log v0.0.0-20240821000339-4d4242ba4a50/go.mod h1:HbttMaTWH7JU3vzKxwxIirnLju7rHeUg1vKjuKWlcbA=
+github.com/berachain/beacon-kit/mod/node-api v0.0.0-20241107170417-7905e3d59a1d h1:6x9yEAKgkm+3JbQ0j+hW4stWTXQtUxKc0FtRjQ0Fyas=
+github.com/berachain/beacon-kit/mod/node-api v0.0.0-20241107170417-7905e3d59a1d/go.mod h1:kJxnsgUePnGHJKnaiYqa0yYmqJmLmcMTPD7p2fG6RU8=
+github.com/berachain/beacon-kit/mod/node-api/engines v0.0.0-20240806160829-cde2d1347e7e h1:RJSPVKiuK4h2IJEIsJDX2JGbqY3ZdKGzvaEN8Dx7kYc=
+github.com/berachain/beacon-kit/mod/node-api/engines v0.0.0-20240806160829-cde2d1347e7e/go.mod h1:lj5dEWEjUn4Mj9/qVrCKrfGqE7FCObk39VfqXs3Eo/E=
+github.com/berachain/beacon-kit/mod/payload v0.0.0-20240705193247-d464364483df h1:fLL+7ZZcbVOmE3XE0o+ZGS8zyPLjki7LrZAsXpcG4Sc=
+github.com/berachain/beacon-kit/mod/payload v0.0.0-20240705193247-d464364483df/go.mod h1:wbSa9W1CDDzR9AptQfYf/16bWqktaIQIZdJsuKWeqC8=
 github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570 h1:w0Gkg31VQRFDv0EJjYgVtlpza7kSaJq7U28zxZjfZeE=
 github.com/berachain/beacon-kit/mod/primitives v0.0.0-20240911165923-82f71ec86570/go.mod h1:Mrq1qol8vbkgZp2IMPFwngg75qE3k9IvT2MouBEhuus=
+github.com/berachain/beacon-kit/mod/state-transition v0.0.0-20240717225334-64ec6650da31 h1:1bJbJcoksyXfYMiga8YxPnkVKqT1lKwym/8kZnEPz58=
+github.com/berachain/beacon-kit/mod/state-transition v0.0.0-20240717225334-64ec6650da31/go.mod h1:sIzib45R7B9Q99yvsYUcj2xJZPBpe3J9JbcBDMZNp7E=
 github.com/berachain/cosmos-sdk v0.46.0-beta2.0.20240808182639-7bdbf06a94f2 h1:4qwOPga+dKeDelSJ6pseasQq6fcjd7iXhah0y7enuco=
 github.com/berachain/cosmos-sdk v0.46.0-beta2.0.20240808182639-7bdbf06a94f2/go.mod h1:DUyJJMMuFJ9OZAhnFMLA0KTFGoVw61p8wnqtV3Wgx3c=
 github.com/bgentry/speakeasy v0.2.0 h1:tgObeVOf8WAvtuAX6DhJ4xks4CFNwPDZiqzGqIHE51E=
 github.com/bgentry/speakeasy v0.2.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=
+github.com/bits-and-blooms/bitset v1.13.0 h1:bAQ9OPNFYbGHV6Nez0tmNI0RiEu7/hxlYJRUA0wFAVE=
+github.com/bits-and-blooms/bitset v1.13.0/go.mod h1:7hO7Gc7Pp1vODcmWvKMRA9BNmbv6a/7QIWpPxHddWR8=
 github.com/btcsuite/btcd/btcec/v2 v2.3.3 h1:6+iXlDKE8RMtKsvK0gshlXIuPbyWM/h84Ensb7o3sC0=
 github.com/btcsuite/btcd/btcec/v2 v2.3.3/go.mod h1:zYzJ8etWJQIv1Ogk7OzpWjowwOdXY1W/17j2MW85J04=
 github.com/btcsuite/btcd/btcutil v1.1.5 h1:+wER79R5670vs/ZusMTF1yTcRYE5GUsFbdjdisflzM8=
 github.com/btcsuite/btcd/btcutil v1.1.5/go.mod h1:PSZZ4UitpLBWzxGd5VGOrLnmOjtPP/a6HaFo12zMs00=
 github.com/btcsuite/btcd/chaincfg/chainhash v1.1.0 h1:59Kx4K6lzOW5w6nFlA0v5+lk/6sjybR934QNHSJZPTQ=
 github.com/btcsuite/btcd/chaincfg/chainhash v1.1.0/go.mod h1:7SFka0XMvUgj3hfZtydOrQY2mwhPclbT2snogU7SQQc=
+github.com/cenkalti/backoff v2.2.1+incompatible h1:tNowT99t7UNflLxfYYSlKYsBpXdEet03Pg2g16Swow4=
+github.com/cenkalti/backoff v2.2.1+incompatible/go.mod h1:90ReRw6GdpyfrHakVjL/QHaoyV4aDUVVkXQJJJ3NXXM=
 github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
+github.com/cespare/cp v1.1.1 h1:nCb6ZLdB7NRaqsm91JtQTAme2SKJzXVsdPIPkyJr1MU=
+github.com/cespare/cp v1.1.1/go.mod h1:SOGHArjBr4JWaSDEVpWpo/hNg6RoKrls6Oh40hiwW+s=
 github.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
+github.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=
 github.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=
@@ -100,6 +157,12 @@ github.com/cometbft/cometbft-db v0.13.0 h1:Ea0YyR4phCwdOzFo1IWoN9fZz1DHFh6w59b3T
 github.com/cometbft/cometbft-db v0.13.0/go.mod h1:KiHYylxxaQrOxdiTOpJMhwiGvOKpiCdaqkAM9JcxcJ8=
 github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4 h1:dEOaTNsJrOTOSysBgAE9pK6zeNASUR6gsFW8s0zcRRU=
 github.com/cometbft/cometbft/api v1.0.0-rc.1.0.20240806094948-2c4293ef36c4/go.mod h1:NDFKiBBD8HJC6QQLAoUI99YhsiRZtg2+FJWfk6A6m6o=
+github.com/consensys/bavard v0.1.13 h1:oLhMLOFGTLdlda/kma4VOJazblc7IM5y5QPd2A/YjhQ=
+github.com/consensys/bavard v0.1.13/go.mod h1:9ItSMtA/dXMAiL7BG6bqW2m3NdSEObYWoH223nGHukI=
+github.com/consensys/gnark-crypto v0.13.0 h1:VPULb/v6bbYELAPTDFINEVaMTTybV5GLxDdcjnS+4oc=
+github.com/consensys/gnark-crypto v0.13.0/go.mod h1:wKqwsieaKPThcFkHe0d0zMsbHEUWFmZcG7KBCse210o=
+github.com/containerd/continuity v0.3.0 h1:nisirsYROK15TAMVukJOUyGJjz4BNQJBVsNvAXZJ/eg=
+github.com/containerd/continuity v0.3.0/go.mod h1:wJEAIwKOm/pBZuBd0JmeTvnLquTB1Ag8espWhkykbPM=
 github.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
 github.com/cosmos/btcutil v1.0.5 h1:t+ZFcX77LpKtDBhjucvnOH8C2l2ioGsBNEQ3jef8xFk=
 github.com/cosmos/btcutil v1.0.5/go.mod h1:IyB7iuqZMJlthe2tkIFL33xPyzbFYP0XVdS8P5lUPis=
@@ -121,7 +184,12 @@ github.com/cosmos/ics23/go v0.10.0 h1:iXqLLgp2Lp+EdpIuwXTYIQU+AiHj9mOC2X9ab++bZD
 github.com/cosmos/ics23/go v0.10.0/go.mod h1:ZfJSmng/TBNTBkFemHHHj5YY7VAU/MBU980F4VU1NG0=
 github.com/cosmos/ledger-cosmos-go v0.13.3 h1:7ehuBGuyIytsXbd4MP43mLeoN2LTOEnk5nvue4rK+yM=
 github.com/cosmos/ledger-cosmos-go v0.13.3/go.mod h1:HENcEP+VtahZFw38HZ3+LS3Iv5XV6svsnkk9vdJtLr8=
+github.com/cpuguy83/go-md2man/v2 v2.0.4 h1:wfIWP927BUkWJb2NmU/kNDYIBTh/ziUX91+lVfRxZq4=
 github.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
+github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a h1:W8mUrRp6NOVl3J+MYp5kPMoUZPp7aOYHtaua31lwRHg=
+github.com/crate-crypto/go-ipa v0.0.0-20240724233137-53bbb0ceb27a/go.mod h1:sTwzHBvIzm2RfVCGNEBZgRyjwK40bVoun3ZnGOCafNM=
+github.com/crate-crypto/go-kzg-4844 v1.1.0 h1:EN/u9k2TF6OWSHrCCDBBU6GLNMq88OspHHlMnHfoyU4=
+github.com/crate-crypto/go-kzg-4844 v1.1.0/go.mod h1:JolLjpSff1tCCJKaJx4psrlEdlXuJEC996PL3tTAFks=
 github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
 github.com/danieljoos/wincred v1.2.1 h1:dl9cBrupW8+r5250DYkYxocLeZ1Y4vB1kxgtjxw8GQs=
 github.com/danieljoos/wincred v1.2.1/go.mod h1:uGaFL9fDn3OLTvzCGulzE+SzjEe5NGlh5FdCcyfPwps=
@@ -129,6 +197,8 @@ github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSs
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=
 github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/deckarep/golang-set/v2 v2.6.0 h1:XfcQbWM1LlMB8BsJ8N9vW5ehnnPVIw0je80NsVHagjM=
+github.com/deckarep/golang-set/v2 v2.6.0/go.mod h1:VAky9rY/yGXJOLEDv3OMci+7wtDpOF4IN+y82NBOac4=
 github.com/decred/dcrd/crypto/blake256 v1.0.1 h1:7PltbUIQB7u/FfZ39+DGa/ShuMyJ5ilcvdfma9wOH6Y=
 github.com/decred/dcrd/crypto/blake256 v1.0.1/go.mod h1:2OfgNZ5wDpcsFmHmCK5gZTPcCXqlm2ArzUIkw9czNJo=
 github.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 h1:rpfIENRNNilwHwZeG5+P150SMrnNEcHYvcCuK6dPZSg=
@@ -140,6 +210,10 @@ github.com/dgraph-io/ristretto v0.1.1/go.mod h1:S1GPSBCYCIhmVNfcth17y2zZtQT6wzkz
 github.com/dgryski/go-farm v0.0.0-20190423205320-6a90982ecee2/go.mod h1:SqUrOPUnsFjfmXRMNPybcSiG0BgUW2AuFH8PAnS2iTw=
 github.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13 h1:fAjc9m62+UWV/WAFKLNi6ZS0675eEUC9y3AlwSbQu1Y=
 github.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13/go.mod h1:SqUrOPUnsFjfmXRMNPybcSiG0BgUW2AuFH8PAnS2iTw=
+github.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=
+github.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=
+github.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=
+github.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
 github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
 github.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=
 github.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=
@@ -151,12 +225,20 @@ github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymF
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
+github.com/ethereum/c-kzg-4844 v1.0.3 h1:IEnbOHwjixW2cTvKRUlAAUOeleV7nNM/umJR+qy4WDs=
+github.com/ethereum/c-kzg-4844 v1.0.3/go.mod h1:VewdlzQmpT5QSrVhbBuGoCdFJkpaJlO1aQputP83wc0=
+github.com/ethereum/go-ethereum v1.14.7 h1:EHpv3dE8evQmpVEQ/Ne2ahB06n2mQptdwqaMNhAT29g=
+github.com/ethereum/go-ethereum v1.14.7/go.mod h1:Mq0biU2jbdmKSZoqOj29017ygFrMnB5/Rifwp980W4o=
+github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 h1:KrE8I4reeVvf7C1tm8elRjj4BdscTYzz/WAbYyf/JI4=
+github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0/go.mod h1:D9AJLVXSyZQXJQVk8oh1EwjISE+sJTn2duYIZC0dy3w=
 github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
 github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
 github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
 github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
+github.com/fjl/memsize v0.0.2 h1:27txuSD9or+NZlnOWdKUxeBzTAUkWCVh+4Gf2dWFOzA=
+github.com/fjl/memsize v0.0.2/go.mod h1:VvhXpOYNQvB+uIk2RvXzuaQtkQJzzIx6lSBe1xv7hi0=
 github.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=
 github.com/fortytw2/leaktest v1.3.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=
 github.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=
@@ -166,10 +248,17 @@ github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
 github.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=
 github.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=
+github.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=
+github.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=
+github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08 h1:f6D9Hr8xV8uYKlyuj8XIruxlh9WjVjdh1gIicAS7ays=
+github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08/go.mod h1:x7DCsMOv1taUwEWCzT4cmDeAkigA5/QCwUodaVOe8Ww=
 github.com/getsentry/sentry-go v0.28.1 h1:zzaSm/vHmGllRM6Tpx1492r0YDzauArdBfkJRtY6P5k=
 github.com/getsentry/sentry-go v0.28.1/go.mod h1:1fQZ+7l7eeJ3wYi82q5Hg8GqAPgefRq+FP/QhafYVgg=
+github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
 github.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=
 github.com/go-errors/errors v1.4.2/go.mod h1:sIVyrIiJhuEF+Pj9Ebtd6P/rEYROXFi3BopGUQ5a5Og=
+github.com/go-faster/xor v1.0.0 h1:2o8vTOgErSGHP3/7XwA5ib1FTtUsNtwCoLLBjl31X38=
+github.com/go-faster/xor v1.0.0/go.mod h1:x5CaDY9UKErKzqfRfFZdfu+OSTfoZny3w5Ak7UxcipQ=
 github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
 github.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
 github.com/go-kit/kit v0.13.0 h1:OoneCcHKHQ03LfBpoQCUfCluwd2Vt3ohz+kvbJneZAU=
@@ -180,6 +269,17 @@ github.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9
 github.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=
 github.com/go-logfmt/logfmt v0.6.0 h1:wGYYu3uicYdqXVgoYbvnkrPVXkuLM1p1ifugDMEdRi4=
 github.com/go-logfmt/logfmt v0.6.0/go.mod h1:WYhtIu8zTZfxdn5+rREduYbwxfcBr/Vr6KEVveWlfTs=
+github.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=
+github.com/go-ole/go-ole v1.3.0 h1:Dt6ye7+vXGIKZ7Xtk4s6/xVdGDQynvom7xCFEdWr6uE=
+github.com/go-ole/go-ole v1.3.0/go.mod h1:5LS6F96DhAwUc7C+1HLexzMXY1xGRSryjyPPKW6zv78=
+github.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=
+github.com/go-playground/assert/v2 v2.2.0/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
+github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
+github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
+github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
+github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
+github.com/go-playground/validator/v10 v10.22.0 h1:k6HsTZ0sTnROkhS//R0O+55JgM8C4Bx7ia+JlgcnOao=
+github.com/go-playground/validator/v10 v10.22.0/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=
 github.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=
 github.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=
 github.com/goccy/go-json v0.10.3 h1:KZ5WoDbxAIgm2HNbYckL0se1fHD6rz5j4ywS6ebzDqA=
@@ -187,11 +287,21 @@ github.com/goccy/go-json v0.10.3/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PU
 github.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2 h1:ZpnhV/YsD2/4cESfV5+Hoeu/iUR3ruzNvZ+yQfO03a0=
 github.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2/go.mod h1:bBOAhwG1umN6/6ZUMtDFBMQR8jRg9O75tm9K00oMsK4=
 github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
+github.com/gofrs/flock v0.12.1 h1:MTLVXXHf8ekldpJk3AKicLij9MdwOWkZ+a/jHHZby9E=
+github.com/gofrs/flock v0.12.1/go.mod h1:9zxTsyu5xtJ9DK+1tFZyibEV7y3uwDxPPfbxeeHCoD0=
+github.com/gofrs/uuid v4.4.0+incompatible h1:3qXRTX8/NbyulANqlc0lchS1gqAVxRgsuW1YrTJupqA=
+github.com/gofrs/uuid v4.4.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=
 github.com/gogo/googleapis v1.4.1 h1:1Yx4Myt7BxzvUr5ldGSbwYiZG6t9wGBZ+8/fX3Wvtq0=
 github.com/gogo/googleapis v1.4.1/go.mod h1:2lpHqI5OcWCtVElxXnPt+s8oJvMpySlOyM6xDCrzib4=
 github.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
 github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
+github.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=
+github.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=
+github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
+github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
+github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
+github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/glog v1.2.1 h1:OptwRhECazUx5ix5TTWC3EZhsZEHWcYWY4FQHTIubm4=
 github.com/golang/glog v1.2.1/go.mod h1:6AhwSGph0fcJtXVM/PEHPqZlFeoLxhs7/t5UDAwmO+w=
@@ -205,6 +315,7 @@ github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5y
 github.com/golang/protobuf v1.3.0/go.mod h1:Qd/q+1AKNOZr9uGQzbzCmRO6sUih6GTPZv6a1/R87v0=
 github.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
 github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+github.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=
 github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=
 github.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=
 github.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=
@@ -238,8 +349,13 @@ github.com/google/gofuzz v0.0.0-20170612174753-24818f796faf/go.mod h1:HP5RmnzzSN
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=
 github.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
+github.com/google/orderedcode v0.0.1 h1:UzfcAexk9Vhv8+9pNOgRu41f16lHq725vPwnSeiG/Us=
+github.com/google/orderedcode v0.0.1/go.mod h1:iVyU4/qPKHY5h/wSd6rZZCDcLJNxiWO6dvsYES2Sb20=
 github.com/google/pprof v0.0.0-20210407192527-94a9f03dee38/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=
+github.com/google/subcommands v1.2.0/go.mod h1:ZjhPrFU+Olkh9WazFPsl27BQ4UPiG37m3yTrtFlrHVk=
 github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
+github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/gorilla/handlers v1.5.2 h1:cLTUSsNkgcwhgRqvCNmdbRWG0A3N4F+M2nWKdScwyEE=
 github.com/gorilla/handlers v1.5.2/go.mod h1:dX+xVpaxdSw+q0Qek8SSsl3dfMk3jNddUkMzo0GtH0w=
 github.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=
@@ -252,6 +368,8 @@ github.com/grpc-ecosystem/grpc-gateway v1.16.0 h1:gmcG1KaJ57LophUzW0Hy8NmPhnMZb4
 github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=
 github.com/gsterjov/go-libsecret v0.0.0-20161001094733-a6f4afe4910c h1:6rhixN/i8ZofjG1Y75iExal34USq5p+wiN1tpie8IrU=
 github.com/gsterjov/go-libsecret v0.0.0-20161001094733-a6f4afe4910c/go.mod h1:NMPJylDgVpX0MLRlPy15sqSwOFv/U1GZ2m21JhFfek0=
+github.com/hashicorp/go-bexpr v0.1.14 h1:uKDeyuOhWhT1r5CiMTjdVY4Aoxdxs6EtwgTGnlosyp4=
+github.com/hashicorp/go-bexpr v0.1.14/go.mod h1:gN7hRKB3s7yT+YvTdnhZVLTENejvhlkZ8UE4YVBS+Q8=
 github.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=
 github.com/hashicorp/go-hclog v1.6.3 h1:Qr2kF+eVWjTiYmU7Y31tYlP1h0q/X3Nl3tPGdaB11/k=
 github.com/hashicorp/go-hclog v1.6.3/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=
@@ -277,16 +395,24 @@ github.com/hashicorp/yamux v0.1.1 h1:yrQxtgseBDrq9Y652vSRDvsKCJKOUD+GzTS4Y0Y8pvE
 github.com/hashicorp/yamux v0.1.1/go.mod h1:CtWFDAQgb7dxtzFs4tWbplKIe2jSi3+5vKbgIO0SLnQ=
 github.com/hdevalence/ed25519consensus v0.2.0 h1:37ICyZqdyj0lAZ8P4D1d1id3HqbbG1N3iBb1Tb4rdcU=
 github.com/hdevalence/ed25519consensus v0.2.0/go.mod h1:w3BHWjwJbFU29IRHL1Iqkw3sus+7FctEyM4RqDxYNzo=
+github.com/holiman/billy v0.0.0-20240322075458-72a4e81ec6da h1:8qEhdMGSUx67L2s5aGQinJhOwLfIRKLRBHPQq8m6WxE=
+github.com/holiman/billy v0.0.0-20240322075458-72a4e81ec6da/go.mod h1:5GuXa7vkL8u9FkFuWdVvfR5ix8hRB7DbOAaYULamFpc=
+github.com/holiman/bloomfilter/v2 v2.0.3 h1:73e0e/V0tCydx14a0SCYS/EWCxgwLZ18CZcZKVu0fao=
+github.com/holiman/bloomfilter/v2 v2.0.3/go.mod h1:zpoh+gs7qcpqrHr3dB55AMiJwo0iURXE7ZOP9L9hSkA=
 github.com/holiman/uint256 v1.3.1 h1:JfTzmih28bittyHM8z360dCjIA9dbPIBlcTI6lmctQs=
 github.com/holiman/uint256 v1.3.1/go.mod h1:EOMSn4q6Nyt9P6efbI3bueV4e1b3dGlUCXeiRV4ng7E=
 github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
 github.com/huandu/skiplist v1.2.0 h1:gox56QD77HzSC0w+Ws3MH3iie755GBJU1OER3h5VsYw=
 github.com/huandu/skiplist v1.2.0/go.mod h1:7v3iFjLcSAzO4fN5B8dvebvo/qsfumiLiDXMrPiHF9w=
+github.com/huin/goupnp v1.3.0 h1:UvLUlWDNpoUdYzb2TCn+MuTWtcjXKSza2n6CBdQ0xXc=
+github.com/huin/goupnp v1.3.0/go.mod h1:gnGPsThkYa7bFi/KWmEysQRf48l2dvR5bxr2OFckNX8=
 github.com/iancoleman/strcase v0.3.0 h1:nTXanmYxhfFAMjZL34Ov6gkzEsSJZ5DbhxWjvSASxEI=
 github.com/iancoleman/strcase v0.3.0/go.mod h1:iwCmte+B7n89clKwxIoIXy/HfoL7AsD47ZCWhYzw7ho=
 github.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=
 github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
 github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
+github.com/jackpal/go-nat-pmp v1.0.2 h1:KzKSgb7qkJvOUTqYl9/Hg/me3pWgBmERKrTGD7BdWus=
+github.com/jackpal/go-nat-pmp v1.0.2/go.mod h1:QPH045xvCAeXUZOxsnwmrtiCoxIr9eob+4orBN1SBKc=
 github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
 github.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=
@@ -307,6 +433,18 @@ github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
+github.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=
+github.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=
+github.com/labstack/echo/v4 v4.12.0 h1:IKpw49IMryVB2p1a4dzwlhP1O2Tf2E0Ir/450lH+kI0=
+github.com/labstack/echo/v4 v4.12.0/go.mod h1:UP9Cr2DJXbOK3Kr9ONYzNowSh7HP0aG0ShAyycHSJvM=
+github.com/labstack/gommon v0.4.2 h1:F8qTUNXgG1+6WQmqoUWnz8WiEU60mXVVw0P4ht1WRA0=
+github.com/labstack/gommon v0.4.2/go.mod h1:QlUFxVM+SNXhDL/Z7YhocGIBYOiwB0mXm1+1bAPHPyU=
+github.com/leanovate/gopter v0.2.9 h1:fQjYxZaynp97ozCzfOyOuAGOU4aU/z37zf/tOujFk7c=
+github.com/leanovate/gopter v0.2.9/go.mod h1:U2L/78B+KVFIx2VmW6onHJQzXtFb+p5y3y2Sh+Jxxv8=
+github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
+github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
+github.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=
+github.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
 github.com/linxGnu/grocksdb v1.9.2 h1:O3mzvO0wuzQ9mtlHbDrShixyVjVbmuqTjFrzlf43wZ8=
 github.com/linxGnu/grocksdb v1.9.2/go.mod h1:QYiYypR2d4v63Wj1adOOfzglnoII0gLj3PNh4fZkcFA=
 github.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=
@@ -317,13 +455,23 @@ github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/
 github.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
 github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
 github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
+github.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=
+github.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=
+github.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
 github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
+github.com/minio/highwayhash v1.0.3 h1:kbnuUMoHYyVl7szWjSxJnxw11k2U709jqFPPmIUyD6Q=
+github.com/minio/highwayhash v1.0.3/go.mod h1:GGYsuwP/fPD6Y9hMiXuapVvlIUEhFhMTh0rxU3ik1LQ=
 github.com/minio/sha256-simd v1.0.1 h1:6kaan5IFmwTNynnKKpDHe6FWHohJOHhCPchzK49dzMM=
 github.com/minio/sha256-simd v1.0.1/go.mod h1:Pz6AKMiUdngCLpeTL/RJY1M9rUuPMYujV5xJjtbRSN8=
 github.com/mitchellh/go-testing-interface v1.14.1 h1:jrgshOhYAUVNMAJiKbEu7EqAwgJJ2JqpQmpLJOu07cU=
 github.com/mitchellh/go-testing-interface v1.14.1/go.mod h1:gfgS7OtZj6MA4U1UrDRp04twqAjfvlZyCfX3sDjEym8=
 github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=
 github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
+github.com/mitchellh/pointerstructure v1.2.1 h1:ZhBBeX8tSlRpu/FFhXH4RC4OJzFlqsQhoHZAz4x7TIw=
+github.com/mitchellh/pointerstructure v1.2.1/go.mod h1:BRAsLI5zgXmw97Lf6s25bs8ohIXc3tViBH44KcwB2g4=
+github.com/mmcloughlin/addchain v0.4.0 h1:SobOdjm2xLj1KkXN5/n0xTIWyZA2+s99UCY1iPfkHRY=
+github.com/mmcloughlin/addchain v0.4.0/go.mod h1:A86O+tHqZLMNO4w6ZZ4FlVQEadcoqkyU72HC5wJ4RlU=
+github.com/mmcloughlin/profile v0.1.1/go.mod h1:IhHD7q1ooxgwTgjxQYkACGA77oFTDdFVejUS1/tS/qU=
 github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
@@ -342,6 +490,8 @@ github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a h1:dl
 github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a/go.mod h1:hVoHR2EVESiICEMbg137etN/Lx+lSrHPTD39Z/uE+2s=
 github.com/oklog/run v1.1.0 h1:GEenZ1cK0+q0+wsJew9qUg/DyD8k3JzYsZAi5gYi2mA=
 github.com/oklog/run v1.1.0/go.mod h1:sVPdnTZT1zYwAJeCMu2Th4T21pA3FPOQRfWjQlk7DVU=
+github.com/olekukonko/tablewriter v0.0.5 h1:P2Ga83D34wi1o9J6Wh1mRuqd4mF/x/lgBS7N7AbDhec=
+github.com/olekukonko/tablewriter v0.0.5/go.mod h1:hPp6KlRPjbx+hW8ykQs1w3UBbZlj6HuIJcUGPhkA7kY=
 github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
 github.com/onsi/ginkgo v1.12.1/go.mod h1:zj2OWP4+oCPe1qIXoGWkgMRwljMUYCdkwsT2108oapk=
 github.com/onsi/ginkgo v1.16.4/go.mod h1:dX+/inL/fNMqNlz0e9LfyB9TswhZpCVdJM/Z6Vvnwo0=
@@ -354,13 +504,22 @@ github.com/onsi/gomega v1.17.0/go.mod h1:HnhC7FXeEQY45zxNK3PPoIUhzk/80Xly9PcubAl
 github.com/onsi/gomega v1.19.0/go.mod h1:LY+I3pBVzYsTBU1AnDwOSxaYi9WoWiqgwooUqq9yPro=
 github.com/onsi/gomega v1.33.1 h1:dsYjIxxSR755MDmKVsaFQTE22ChNBcuuTWgkUDSubOk=
 github.com/onsi/gomega v1.33.1/go.mod h1:U4R44UsT+9eLIaYRB2a5qajjtQYn0hauxvRm16AVYg0=
+github.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=
+github.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=
+github.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=
+github.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=
+github.com/opencontainers/runc v1.1.12 h1:BOIssBaW1La0/qbNZHXOOa71dZfZEQOzW7dqQf3phss=
+github.com/opencontainers/runc v1.1.12/go.mod h1:S+lQwSfncpBha7XTy/5lBwWgm5+y5Ma/O44Ekby9FK8=
+github.com/ory/dockertest v3.3.5+incompatible h1:iLLK6SQwIhcbrG783Dghaaa3WPzGc+4Emza6EbVUUGA=
+github.com/ory/dockertest v3.3.5+incompatible/go.mod h1:1vX4m9wsvi00u5bseYwXaSnhNrne+V0E6LAcBILJdPs=
 github.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0MwY=
 github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
 github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
 github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
-github.com/petermattis/goid v0.0.0-20180202154549-b0b1615b78e5/go.mod h1:jvVRKCrJTQWu0XVbaOlby/2lO20uSCHEMzzplHXte1o=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 h1:CtBLeckhC0zAXgp5V8uR30CNYH0JgCJoxCg5+6i2zQk=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
+github.com/phuslu/log v1.0.110 h1:9WQnpL1/CBi3IwZaVadYnI/i0bgobTvit2ayXIgSg4c=
+github.com/phuslu/log v1.0.110/go.mod h1:F8osGJADo5qLK/0F88djWwdyoZZ9xDJQL1HYRHFEkS0=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
 github.com/pingcap/errors v0.11.4/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
@@ -397,21 +556,32 @@ github.com/prysmaticlabs/gohashtree v0.0.4-beta.0.20240624100937-73632381301b h1
 github.com/prysmaticlabs/gohashtree v0.0.4-beta.0.20240624100937-73632381301b/go.mod h1:HRuvtXLZ4WkaB1MItToVH2e8ZwKwZPY5/Rcby+CvvLY=
 github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 h1:N/ElC8H3+5XpJzTSTfLsJV/mx9Q9g7kxmchpfZyxgzM=
 github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=
+github.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=
+github.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=
+github.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=
+github.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=
 github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
 github.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=
 github.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=
+github.com/rs/cors v1.11.0 h1:0B9GE/r9Bc2UxRMMtymBkHTenPkHDv0CW4Y98GBY+po=
+github.com/rs/cors v1.11.0/go.mod h1:XyqrcTp5zjWr1wsJ8PIRZssZ8b/WMcMf71DJnit4EMU=
 github.com/rs/xid v1.5.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=
 github.com/rs/zerolog v1.33.0 h1:1cU2KZkvPxNyfgEmhHAz/1A9Bz+llsdYzklWFzgp0r8=
 github.com/rs/zerolog v1.33.0/go.mod h1:/7mN4D5sKwJLZQ2b/znpjC3/GQWY/xaDXUM0kKWRHss=
+github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=
 github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
 github.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3N51bwOk=
 github.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=
 github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
 github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
-github.com/sasha-s/go-deadlock v0.3.1 h1:sqv7fDNShgjcaxkO0JNcOAlr8B9+cV5Ey/OB71efZx0=
-github.com/sasha-s/go-deadlock v0.3.1/go.mod h1:F73l+cr82YSh10GxyRI6qZiCgK64VaZjwesgfQ1/iLM=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
+github.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=
+github.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
 github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
 github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=
+github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=
+github.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
 github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8 h1:+jumHNA0Wrelhe64i8F6HNlS8pkoyMv5sreGx2Ry5Rw=
 github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8/go.mod h1:3n1Cwaq1E1/1lhQhtRK2ts/ZwZEhjcQeJQ1RuC6Q/8U=
 github.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=
@@ -424,6 +594,8 @@ github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
 github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
 github.com/spf13/viper v1.19.0 h1:RWq5SEjt8o25SROyN3z2OrDB9l7RPd3lwTWU8EcEdcI=
 github.com/spf13/viper v1.19.0/go.mod h1:GQUN9bilAbhU/jgc1bKs99f/suXKeUMct8Adx5+Ntkg=
+github.com/status-im/keycard-go v0.3.2 h1:YusIF/bHx6YZis8UTOJrpZFnTs4IkRBdmJXqdiXkpFE=
+github.com/status-im/keycard-go v0.3.2/go.mod h1:wlp8ZLbsmrF6g6WjugPAx+IzoLrkdf9+mHxBEeo3Hbg=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
@@ -434,10 +606,12 @@ github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXf
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
 github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
 github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
+github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.2/go.mod h1:R6va5+xMeoiuVRoj+gSkQ7d3FALtqAAGI1FQKckRals=
 github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
 github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
+github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
 github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
 github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
 github.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=
@@ -450,9 +624,27 @@ github.com/tendermint/go-amino v0.16.0 h1:GyhmgQKvqF82e2oZeuMSp9JTN0N09emoSZlb2l
 github.com/tendermint/go-amino v0.16.0/go.mod h1:TQU0M1i/ImAo+tYpZi73AU3V/dKeCoMC9Sphe2ZwGME=
 github.com/tidwall/btree v1.7.0 h1:L1fkJH/AuEh5zBnnBbmTwQ5Lt+bRJ5A8EWecslvo9iI=
 github.com/tidwall/btree v1.7.0/go.mod h1:twD9XRA5jj9VUQGELzDO4HPQTNJsoWWfYEL+EUQ2cKY=
+github.com/tklauser/go-sysconf v0.3.14 h1:g5vzr9iPFFz24v2KZXs/pvpvh8/V9Fw6vQK5ZZb78yU=
+github.com/tklauser/go-sysconf v0.3.14/go.mod h1:1ym4lWMLUOhuBOPGtRcJm7tEGX4SCYNEEEtghGG/8uY=
+github.com/tklauser/numcpus v0.8.0 h1:Mx4Wwe/FjZLeQsK/6kt2EOepwwSl7SmJrK5bV/dXYgY=
+github.com/tklauser/numcpus v0.8.0/go.mod h1:ZJZlAY+dmR4eut8epnzf0u/VwodKmryxR8txiloSqBE=
 github.com/tv42/httpunix v0.0.0-20150427012821-b75d8614f926/go.mod h1:9ESjWnEqriFuLhtthL60Sar/7RFoluCcXsuvEwTV5KM=
+github.com/tyler-smith/go-bip39 v1.1.0 h1:5eUemwrMargf3BSLRRCalXT93Ns6pQJIjYQN2nyfOP8=
+github.com/tyler-smith/go-bip39 v1.1.0/go.mod h1:gUYDtqQw1JS3ZJ8UWVcGTGqqr6YIN3CWg+kkNaLt55U=
+github.com/umbracle/fastrlp v0.1.0 h1:V0W3f6ZKWqbu1KggdhnRWOi+t7+PfL3VyAffJqayI5s=
+github.com/umbracle/fastrlp v0.1.0/go.mod h1:5RHgqiFjd4vLJESMWagP/E7su+5Gzk0iqqmrotR8WdA=
+github.com/urfave/cli/v2 v2.27.2 h1:6e0H+AkS+zDckwPCUrZkKX38mRaau4nL2uipkJpbkcI=
+github.com/urfave/cli/v2 v2.27.2/go.mod h1:g0+79LmHHATl7DAcHO99smiR/T7uGLw84w8Y42x+4eM=
+github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=
+github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
+github.com/valyala/fasttemplate v1.2.2 h1:lxLXG0uE3Qnshl9QyaK6XJxMXlQZELvChBOCmQD0Loo=
+github.com/valyala/fasttemplate v1.2.2/go.mod h1:KHLXt3tVN2HBp8eijSv/kGJopbvo7S+qRAEEKiv+SiQ=
+github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 h1:gEOO8jv9F4OT7lGCjxCBTO/36wtF6j2nSip77qHd4x4=
+github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1/go.mod h1:Ohn+xnUBiLI6FVj/9LpzZWtj1/D6lUovWYBkxHVV3aM=
 github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
+github.com/yusufpapurcu/wmi v1.2.4 h1:zFUKzehAFReQwLys1b/iSMl+JQGSCSjtVqQn9bBrPo0=
+github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=
 github.com/zondax/hid v0.9.2 h1:WCJFnEDMiqGF64nlZz28E9qLVZ0KSJ7xpc5DLEyma2U=
 github.com/zondax/hid v0.9.2/go.mod h1:l5wttcP0jwtdLjqjMMWFVEE7d1zO0jvSPA9OPZxWpEM=
 github.com/zondax/ledger-go v0.14.3 h1:wEpJt2CEcBJ428md/5MgSLsXLBos98sBOyxNmCjfUCw=
@@ -467,8 +659,9 @@ golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnf
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.0.0-20200728195943-123391ffb6de/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
@@ -481,6 +674,7 @@ golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73r
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
@@ -488,14 +682,16 @@ golang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLL
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
+golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
+golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -513,6 +709,7 @@ golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5h
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -528,21 +725,26 @@ golang.org/x/sys v0.0.0-20220412211240-33da011f77ad/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20221010170243-090e33056c14/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.21.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.23.0 h1:F6D4vR+EHoL9/sWAWgAR1H2DcHr4PareCbAaCo1RpuU=
-golang.org/x/term v0.23.0/go.mod h1:DgV24QBUrK6jhZXl+20l6UWznPlwAHm1Q1mGHtydmSk=
+golang.org/x/term v0.25.0 h1:WtHI/ltw4NvSUig5KARz9h521QvRC8RmF/cuYqifU24=
+golang.org/x/term v0.25.0/go.mod h1:RPyXicDX+6vLxogjjRxjgD2TKtmAO6NZBsBRfrOLu7M=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
+golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
@@ -562,17 +764,19 @@ google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7
 google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
 google.golang.org/genproto v0.0.0-20180831171423-11092d34479b/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
 google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
+google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4 h1:CUiCqkPw1nNrNQzCCG4WA65m0nAmQiwXHpub3dNyruU=
-google.golang.org/genproto v0.0.0-20240617180043-68d350f18fd4/go.mod h1:EvuUDCulqGgV80RvP1BHuom+smhX4qtlhnNatHuroGQ=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d h1:PksQg4dV6Sem3/HkBX+Ltq8T0ke0PKIRBNBatoDTVls=
+google.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d/go.mod h1:s7iA721uChleev562UJO2OYB0PPT9CMFjV+Ce7VJH5M=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 h1:0+ozOGcrp+Y8Aq8TLNN2Aliibms5LEzsq99ZZmAGYm0=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094/go.mod h1:fJ/e3If/Q67Mj99hin0hMhiNyCRmt6BQ2aWIJshUSJw=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d h1:JU0iKnSg02Gmb5ZdV8nYsKEKsP6o/FGVWTrw4i1DA9A=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
 google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
 google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
 google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
+google.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=
 google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=
 google.golang.org/grpc v1.65.0 h1:bs/cUb4lp1G5iImFFd3u5ixQzweKizoZJAwBNLR42lc=
 google.golang.org/grpc v1.65.0/go.mod h1:WgYC2ypjlB0EiQi6wdKixMqukr6lBc0Vo+oOgjrM5ZQ=
@@ -587,8 +791,8 @@ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpAD
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
@@ -598,10 +802,13 @@ gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EV
 gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
 gopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=
 gopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
+gopkg.in/natefinch/lumberjack.v2 v2.2.1 h1:bBRl1b0OH9s/DuPhuXpNl+VtCaJXFZ5/uEFST95x9zc=
+gopkg.in/natefinch/lumberjack.v2 v2.2.1/go.mod h1:YD8tP3GAjkrDg1eZH7EGmyESg/lsYskCTPBJVb9jqSc=
 gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=
 gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
 gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
@@ -610,12 +817,13 @@ gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
-gotest.tools v2.2.0+incompatible h1:VsBPFP1AI068pPrMxtb/S8Zkgf9xEmTLJjfM+P5UIEo=
 gotest.tools/v3 v3.5.1 h1:EENdUnS3pdur5nybKYIh2Vfgc8IUNBjxDPSjtiJcOzU=
 gotest.tools/v3 v3.5.1/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=
 honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 pgregory.net/rapid v1.1.0 h1:CMa0sjHSru3puNx+J0MIAuiiEV4N0qj8/cMWGBBCsjw=
 pgregory.net/rapid v1.1.0/go.mod h1:PY5XlDGj0+V1FCq0o192FdRhpKHGTRIWBgqjDBTrq04=
+rsc.io/tmplfunc v0.0.3 h1:53XFQh69AfOa8Tw0Jm7t+GV7KZhOi6jzsCzTtKbMvzU=
+rsc.io/tmplfunc v0.0.3/go.mod h1:AG3sTPzElb1Io3Yg4voV9AGZJuleGAwaVRxL9M49PhA=
 sigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=
 sigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=
diff --git a/mod/storage/pkg/beacondb/registry.go b/mod/storage/pkg/beacondb/registry.go
index 25c0d1165..2853d77ef 100644
--- a/mod/storage/pkg/beacondb/registry.go
+++ b/mod/storage/pkg/beacondb/registry.go
@@ -21,6 +21,8 @@
 package beacondb
 
 import (
+	"errors"
+
 	"cosmossdk.io/collections/indexes"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
@@ -138,7 +140,7 @@ func (kv *KVStore[
 	}
 
 	var (
-		vals = make([]ValidatorT, registrySize)
+		vals = make([]ValidatorT, 0, registrySize)
 		val  ValidatorT
 	)
 
@@ -146,19 +148,19 @@ func (kv *KVStore[
 	if err != nil {
 		return nil, err
 	}
+	defer func() {
+		err = errors.Join(err, iter.Close())
+	}()
 
-	i := 0
-	for iter.Valid() {
+	for ; iter.Valid(); iter.Next() {
 		val, err = iter.Value()
 		if err != nil {
 			return nil, err
 		}
-		vals[i] = val
-		iter.Next()
-		i++
+		vals = append(vals, val)
 	}
 
-	return vals, nil
+	return vals, err
 }
 
 // GetTotalValidators returns the total number of validators.
@@ -194,6 +196,9 @@ func (kv *KVStore[
 	if err != nil {
 		return nil, err
 	}
+	defer func() {
+		err = errors.Join(err, iter.Close())
+	}()
 
 	// Iterate over all validators and collect them.
 	for ; iter.Valid(); iter.Next() {
@@ -206,7 +211,7 @@ func (kv *KVStore[
 		}
 		vals = append(vals, v)
 	}
-	return vals, nil
+	return vals, err
 }
 
 // GetBalance returns the balance of a validator.
@@ -241,17 +246,19 @@ func (kv *KVStore[
 	if err != nil {
 		return nil, err
 	}
+	defer func() {
+		err = errors.Join(err, iter.Close())
+	}()
 
 	var balance uint64
-	for iter.Valid() {
+	for ; iter.Valid(); iter.Next() {
 		balance, err = iter.Value()
 		if err != nil {
 			return nil, err
 		}
 		balances = append(balances, balance)
-		iter.Next()
 	}
-	return balances, nil
+	return balances, err
 }
 
 // GetTotalActiveBalances returns the total active balances of all validatorkv.
@@ -263,19 +270,23 @@ func (kv *KVStore[
 ]) GetTotalActiveBalances(
 	slotsPerEpoch uint64,
 ) (math.Gwei, error) {
-	iter, err := kv.validators.Indexes.EffectiveBalance.Iterate(kv.ctx, nil)
+	slot, err := kv.slot.Get(kv.ctx)
 	if err != nil {
 		return 0, err
 	}
 
-	slot, err := kv.slot.Get(kv.ctx)
+	totalActiveBalances := math.Gwei(0)
+	epoch := math.Epoch(slot / slotsPerEpoch)
+
+	iter, err := kv.validators.Indexes.EffectiveBalance.Iterate(kv.ctx, nil)
 	if err != nil {
 		return 0, err
 	}
+	defer func() {
+		err = errors.Join(err, iter.Close())
+	}()
 
-	totalActiveBalances := math.Gwei(0)
-	epoch := math.Epoch(slot / slotsPerEpoch)
-	return totalActiveBalances, indexes.ScanValues(
+	err = indexes.ScanValues(
 		kv.ctx, kv.validators, iter, func(v ValidatorT,
 		) bool {
 			if v.IsActive(epoch) {
@@ -284,4 +295,5 @@ func (kv *KVStore[
 			return false
 		},
 	)
+	return totalActiveBalances, err
 }
diff --git a/mod/storage/pkg/beacondb/registry_test.go b/mod/storage/pkg/beacondb/registry_test.go
new file mode 100644
index 000000000..bdccb88be
--- /dev/null
+++ b/mod/storage/pkg/beacondb/registry_test.go
@@ -0,0 +1,244 @@
+// SPDX-License-Identifier: BUSL-1.1
+//
+// Copyright (C) 2024, Berachain Foundation. All rights reserved.
+// Use of this software is governed by the Business Source License included
+// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
+//
+// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
+// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
+// VERSIONS OF THE LICENSED WORK.
+//
+// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
+// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
+// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
+//
+// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
+// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
+// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
+// TITLE.
+
+package beacondb_test
+
+import (
+	"context"
+	"fmt"
+	"testing"
+
+	corestore "cosmossdk.io/core/store"
+	"cosmossdk.io/log"
+	"cosmossdk.io/store"
+	"cosmossdk.io/store/metrics"
+	storetypes "cosmossdk.io/store/types"
+	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
+	"github.com/berachain/beacon-kit/mod/node-core/pkg/components"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
+	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
+	"github.com/berachain/beacon-kit/mod/storage/pkg/beacondb"
+	"github.com/berachain/beacon-kit/mod/storage/pkg/db"
+	"github.com/berachain/beacon-kit/mod/storage/pkg/encoding"
+	dbm "github.com/cosmos/cosmos-db"
+	sdk "github.com/cosmos/cosmos-sdk/types"
+	"github.com/stretchr/testify/require"
+)
+
+type testKVStoreService struct {
+	ctx sdk.Context
+}
+
+func (kvs *testKVStoreService) OpenKVStore(context.Context) corestore.KVStore {
+	//nolint:contextcheck // fine with tests
+	return components.NewKVStore(
+		sdk.UnwrapSDKContext(kvs.ctx).KVStore(testStoreKey),
+	)
+}
+
+var (
+	testStoreKey = storetypes.NewKVStoreKey("storage-tests")
+	testCodec    = &encoding.SSZInterfaceCodec[*types.ExecutionPayloadHeader]{}
+)
+
+func TestBalances(t *testing.T) {
+	store, err := initTestStore()
+	require.NoError(t, err)
+
+	// no balance to start
+	res, err := store.GetBalances()
+	require.NoError(t, err)
+	require.Empty(t, res)
+
+	// add balances
+	var (
+		idx1, idx2     = math.U64(1_987), math.U64(1_989)
+		inBal1, inBal2 = math.U64(8_992), math.U64(10_000)
+	)
+	require.NoError(t, store.SetBalance(idx1, inBal1))
+	require.NoError(t, store.SetBalance(idx2, inBal2))
+
+	// check we can query added balances
+	outBal, err := store.GetBalance(idx1)
+	require.NoError(t, err)
+	require.Equal(t, inBal1, outBal)
+
+	outBal, err = store.GetBalance(idx2)
+	require.NoError(t, err)
+	require.Equal(t, inBal2, outBal)
+
+	res, err = store.GetBalances()
+	require.NoError(t, err)
+	require.Len(t, res, 2)
+	require.Equal(t, inBal1.Unwrap(), res[0])
+	require.Equal(t, inBal2.Unwrap(), res[1])
+
+	// update existing balances
+	newInBal1, newInBal2 := math.U64(0), inBal2*2
+	require.NoError(t, store.SetBalance(idx1, newInBal1))
+	require.NoError(t, store.SetBalance(idx2, newInBal2))
+
+	// check we can query updated balances
+	outBal, err = store.GetBalance(idx1)
+	require.NoError(t, err)
+	require.Equal(t, newInBal1, outBal)
+
+	outBal, err = store.GetBalance(idx2)
+	require.NoError(t, err)
+	require.Equal(t, newInBal2, outBal)
+
+	res, err = store.GetBalances()
+	require.NoError(t, err)
+	require.Len(t, res, 2)
+	require.Equal(t, newInBal1.Unwrap(), res[0])
+	require.Equal(t, newInBal2.Unwrap(), res[1])
+}
+
+func TestValidators(t *testing.T) {
+	store, err := initTestStore()
+	require.NoError(t, err)
+
+	// no validators to start
+	res, err := store.GetValidators()
+	require.NoError(t, err)
+	require.Empty(t, res)
+
+	// add validators
+	var (
+		inVal1 = &types.Validator{
+			Pubkey:           bytes.B48{0x01},
+			EffectiveBalance: 31e9,
+		}
+		inVal2 = &types.Validator{
+			Pubkey:           bytes.B48{0x02},
+			EffectiveBalance: 32e9,
+		}
+	)
+	require.NoError(t, store.AddValidator(inVal1))
+	require.NoError(t, store.AddValidator(inVal2))
+
+	// check we can query added validators
+	valIdx1, err := store.ValidatorIndexByPubkey(inVal1.GetPubkey())
+	require.NoError(t, err)
+	outVal, err := store.ValidatorByIndex(valIdx1)
+	require.NoError(t, err)
+	require.Equal(t, inVal1, outVal)
+
+	valIdx2, err := store.ValidatorIndexByPubkey(inVal2.GetPubkey())
+	require.NoError(t, err)
+	outVal, err = store.ValidatorByIndex(valIdx2)
+	require.NoError(t, err)
+	require.Equal(t, inVal2, outVal)
+
+	valCount, err := store.GetTotalValidators()
+	require.NoError(t, err)
+	require.Equal(t, uint64(2), valCount)
+
+	res, err = store.GetValidators()
+	require.NoError(t, err)
+	require.Len(t, res, int(valCount))
+	require.Equal(t, inVal1, res[0])
+	require.Equal(t, inVal2, res[1])
+
+	// update existing validators balances
+	var (
+		inUpdatedVal1 = &types.Validator{
+			Pubkey:           inVal1.GetPubkey(),
+			EffectiveBalance: inVal1.EffectiveBalance * 2,
+		}
+		inUpdatedVal2 = &types.Validator{
+			Pubkey:           inVal2.GetPubkey(),
+			EffectiveBalance: inVal1.EffectiveBalance / 2,
+		}
+	)
+	require.NoError(t, store.UpdateValidatorAtIndex(valIdx1, inUpdatedVal1))
+	require.NoError(t, store.UpdateValidatorAtIndex(valIdx2, inUpdatedVal2))
+
+	// check we can query updated validators
+	upValIdx1, err := store.ValidatorIndexByPubkey(inVal1.GetPubkey())
+	require.NoError(t, err)
+	require.Equal(t, valIdx1, upValIdx1)
+	outVal, err = store.ValidatorByIndex(upValIdx1)
+	require.NoError(t, err)
+	require.Equal(t, inUpdatedVal1, outVal)
+
+	upValIdx2, err := store.ValidatorIndexByPubkey(inVal2.GetPubkey())
+	require.NoError(t, err)
+	require.Equal(t, valIdx2, upValIdx2)
+	outVal, err = store.ValidatorByIndex(upValIdx2)
+	require.NoError(t, err)
+	require.Equal(t, inUpdatedVal2, outVal)
+
+	upValCount, err := store.GetTotalValidators()
+	require.NoError(t, err)
+	require.Equal(t, valCount, upValCount)
+
+	res, err = store.GetValidators()
+	require.NoError(t, err)
+	require.Len(t, res, int(valCount))
+	require.Equal(t, inUpdatedVal1, res[0])
+	require.Equal(t, inUpdatedVal2, res[1])
+}
+
+func initTestStore() (
+	*beacondb.KVStore[
+		*types.BeaconBlockHeader,
+		*types.Eth1Data,
+		*types.ExecutionPayloadHeader,
+		*types.Fork,
+		*types.Validator,
+		[]*types.Validator,
+	], error) {
+	db, err := db.OpenDB("", dbm.MemDBBackend)
+	if err != nil {
+		return nil, fmt.Errorf("failed opening mem db: %w", err)
+	}
+	var (
+		nopLog     = log.NewNopLogger()
+		nopMetrics = metrics.NewNoOpMetrics()
+	)
+
+	cms := store.NewCommitMultiStore(
+		db,
+		nopLog,
+		nopMetrics,
+	)
+
+	ctx := sdk.NewContext(cms, true, nopLog)
+	cms.MountStoreWithDB(testStoreKey, storetypes.StoreTypeIAVL, nil)
+	if err = cms.LoadLatestVersion(); err != nil {
+		return nil, fmt.Errorf("failed to load latest version: %w", err)
+	}
+	testStoreService := &testKVStoreService{
+		ctx: ctx,
+	}
+
+	return beacondb.New[
+		*types.BeaconBlockHeader,
+		*types.Eth1Data,
+		*types.ExecutionPayloadHeader,
+		*types.Fork,
+		*types.Validator,
+		[]*types.Validator,
+	](
+		testStoreService,
+		testCodec,
+	), nil
+}
diff --git a/mod/storage/pkg/beacondb/slashing.go b/mod/storage/pkg/beacondb/slashing.go
index 97b3a9f0b..a44334580 100644
--- a/mod/storage/pkg/beacondb/slashing.go
+++ b/mod/storage/pkg/beacondb/slashing.go
@@ -29,22 +29,25 @@ import (
 func (kv *KVStore[
 	BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT,
 	ForkT, ValidatorT, ValidatorsT,
-]) GetSlashings() ([]uint64, error) {
-	var slashings []uint64
+]) GetSlashings() ([]math.Gwei, error) {
+	var slashings []math.Gwei
 	iter, err := kv.slashings.Iterate(kv.ctx, nil)
 	if err != nil {
 		return nil, err
 	}
-	for iter.Valid() {
+	defer func() {
+		err = errors.Join(err, iter.Close())
+	}()
+
+	for ; iter.Valid(); iter.Next() {
 		var slashing uint64
 		slashing, err = iter.Value()
 		if err != nil {
 			return nil, err
 		}
-		slashings = append(slashings, slashing)
-		iter.Next()
+		slashings = append(slashings, math.Gwei(slashing))
 	}
-	return slashings, nil
+	return slashings, err
 }
 
 // GetSlashingAtIndex retrieves the slashing amount by index from the store.
diff --git a/mod/storage/pkg/block/store.go b/mod/storage/pkg/block/store.go
index 3e1c069ec..a309d81b3 100644
--- a/mod/storage/pkg/block/store.go
+++ b/mod/storage/pkg/block/store.go
@@ -23,6 +23,7 @@ package block
 import (
 	"fmt"
 
+	"github.com/berachain/beacon-kit/mod/errors"
 	"github.com/berachain/beacon-kit/mod/log"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
@@ -32,10 +33,18 @@ import (
 // KVStore is a simple memory store based implementation that stores metadata of
 // beacon blocks.
 type KVStore[BeaconBlockT BeaconBlock] struct {
-	blockRoots       *lru.Cache[common.Root, math.Slot]
-	executionNumbers *lru.Cache[math.U64, math.Slot]
-	stateRoots       *lru.Cache[common.Root, math.Slot]
+	// Beacon block root to slot mapping is injective for finalized blocks.
+	blockRoots *lru.Cache[common.Root, math.Slot]
 
+	// Timestamp to slot mapping is injective for finalized blocks. This is
+	// guaranteed by CometBFT consensus. So each slot will be associated with a
+	// different timestamp (no overwriting) as we store only finalized blocks.
+	timestamps *lru.Cache[math.U64, math.Slot]
+
+	// Beacon state root to slot mapping is injective for finalized blocks.
+	stateRoots *lru.Cache[common.Root, math.Slot]
+
+	// Logger for the store.
 	logger log.Logger
 }
 
@@ -48,7 +57,7 @@ func NewStore[BeaconBlockT BeaconBlock](
 	if err != nil {
 		panic(err)
 	}
-	executionNumbers, err := lru.New[math.U64, math.Slot](availabilityWindow)
+	timestamps, err := lru.New[math.U64, math.Slot](availabilityWindow)
 	if err != nil {
 		panic(err)
 	}
@@ -57,20 +66,20 @@ func NewStore[BeaconBlockT BeaconBlock](
 		panic(err)
 	}
 	return &KVStore[BeaconBlockT]{
-		blockRoots:       blockRoots,
-		executionNumbers: executionNumbers,
-		stateRoots:       stateRoots,
-		logger:           logger,
+		blockRoots: blockRoots,
+		timestamps: timestamps,
+		stateRoots: stateRoots,
+		logger:     logger,
 	}
 }
 
 // Set sets the block by a given index in the store, storing the block root,
-// execution number, and state root. Only this function may potentially evict
+// timestamp, and state root. Only this function may potentially evict
 // entries from the store if the availability window is reached.
 func (kv *KVStore[BeaconBlockT]) Set(blk BeaconBlockT) error {
 	slot := blk.GetSlot()
 	kv.blockRoots.Add(blk.HashTreeRoot(), slot)
-	kv.executionNumbers.Add(blk.GetExecutionNumber(), slot)
+	kv.timestamps.Add(blk.GetTimestamp(), slot)
 	kv.stateRoots.Add(blk.GetStateRoot(), slot)
 	return nil
 }
@@ -86,19 +95,20 @@ func (kv *KVStore[BeaconBlockT]) GetSlotByBlockRoot(
 	return slot, nil
 }
 
-// GetSlotByExecutionNumber retrieves the slot by a given execution number from
+// GetParentSlotByTimestamp retrieves the parent slot by a given timestamp from
 // the store.
-func (kv *KVStore[BeaconBlockT]) GetSlotByExecutionNumber(
-	executionNumber math.U64,
+func (kv *KVStore[BeaconBlockT]) GetParentSlotByTimestamp(
+	timestamp math.U64,
 ) (math.Slot, error) {
-	slot, ok := kv.executionNumbers.Peek(executionNumber)
+	slot, ok := kv.timestamps.Peek(timestamp)
 	if !ok {
-		return 0, fmt.Errorf(
-			"slot not found at execution number: %d",
-			executionNumber,
-		)
+		return slot, fmt.Errorf("slot not found at timestamp: %d", timestamp)
 	}
-	return slot, nil
+	if slot == 0 {
+		return slot, errors.New("parent slot not supported for genesis slot 0")
+	}
+
+	return slot - 1, nil
 }
 
 // GetSlotByStateRoot retrieves the slot by a given state root from the store.
diff --git a/mod/storage/pkg/block/store_test.go b/mod/storage/pkg/block/store_test.go
index e41553b7b..14de7a5fe 100644
--- a/mod/storage/pkg/block/store_test.go
+++ b/mod/storage/pkg/block/store_test.go
@@ -42,7 +42,7 @@ func (m MockBeaconBlock) HashTreeRoot() common.Root {
 	return [32]byte{byte(m.slot)}
 }
 
-func (m MockBeaconBlock) GetExecutionNumber() math.U64 {
+func (m MockBeaconBlock) GetTimestamp() math.U64 {
 	return m.slot
 }
 
@@ -65,15 +65,15 @@ func TestBlockStore(t *testing.T) {
 		require.NoError(t, err)
 	}
 
-	// Get the slots by roots & execution numbers.
+	// Get the slots by roots & timestamps.
 	for i := math.Slot(3); i <= 7; i++ {
 		slot, err = blockStore.GetSlotByBlockRoot([32]byte{byte(i)})
 		require.NoError(t, err)
 		require.Equal(t, i, slot)
 
-		slot, err = blockStore.GetSlotByExecutionNumber(i)
+		slot, err = blockStore.GetParentSlotByTimestamp(i)
 		require.NoError(t, err)
-		require.Equal(t, i, slot)
+		require.Equal(t, i-1, slot)
 
 		slot, err = blockStore.GetSlotByStateRoot([32]byte{byte(i)})
 		require.NoError(t, err)
@@ -83,6 +83,6 @@ func TestBlockStore(t *testing.T) {
 	// Try getting a slot that doesn't exist.
 	_, err = blockStore.GetSlotByBlockRoot([32]byte{byte(8)})
 	require.ErrorContains(t, err, "not found")
-	_, err = blockStore.GetSlotByExecutionNumber(2)
+	_, err = blockStore.GetParentSlotByTimestamp(2)
 	require.ErrorContains(t, err, "not found")
 }
diff --git a/mod/storage/pkg/block/types.go b/mod/storage/pkg/block/types.go
index 07afd7603..3b02a2a9e 100644
--- a/mod/storage/pkg/block/types.go
+++ b/mod/storage/pkg/block/types.go
@@ -26,10 +26,10 @@ import (
 )
 
 // BeaconBlock is a block in the beacon chain that has a slot, block root (hash
-// tree root), execution number, and state root.
+// tree root), timestamp, and state root.
 type BeaconBlock interface {
 	GetSlot() math.U64
 	HashTreeRoot() common.Root
-	GetExecutionNumber() math.U64
+	GetTimestamp() math.U64
 	GetStateRoot() common.Root
 }
diff --git a/mod/storage/pkg/deposit/store.go b/mod/storage/pkg/deposit/store.go
index 18218eea9..a58e9e835 100644
--- a/mod/storage/pkg/deposit/store.go
+++ b/mod/storage/pkg/deposit/store.go
@@ -28,6 +28,7 @@ import (
 	sdkcollections "cosmossdk.io/collections"
 	"cosmossdk.io/core/store"
 	"github.com/berachain/beacon-kit/mod/storage/pkg/encoding"
+	"github.com/berachain/beacon-kit/mod/storage/pkg/pruner"
 )
 
 const KeyDepositPrefix = "deposit"
@@ -104,6 +105,10 @@ func (kv *KVStore[DepositT]) setDeposit(deposit DepositT) error {
 
 // Prune removes the [start, end) deposits from the store.
 func (kv *KVStore[DepositT]) Prune(start, end uint64) error {
+	if start > end {
+		return pruner.ErrInvalidRange
+	}
+
 	var ctx = context.TODO()
 	kv.mu.Lock()
 	defer kv.mu.Unlock()
diff --git a/mod/storage/pkg/filedb/range_db.go b/mod/storage/pkg/filedb/range_db.go
index 707034cd4..3ac665f96 100644
--- a/mod/storage/pkg/filedb/range_db.go
+++ b/mod/storage/pkg/filedb/range_db.go
@@ -93,6 +93,9 @@ func (db *RangeDB) DeleteRange(from, to uint64) error {
 	if !ok {
 		return errors.New("rangedb: delete range not supported for this db")
 	}
+	if from > to {
+		return pruner.ErrInvalidRange
+	}
 	for ; from < to; from++ {
 		path := strconv.FormatUint(from, 10) + "/"
 		if err := f.fs.RemoveAll(path); err != nil {
@@ -105,6 +108,10 @@ func (db *RangeDB) DeleteRange(from, to uint64) error {
 // Prune removes all values in the given range [start, end) from the db.
 func (db *RangeDB) Prune(start, end uint64) error {
 	start = max(start, db.firstNonNilIndex)
+	if start > end {
+		return pruner.ErrInvalidRange
+	}
+
 	if err := db.DeleteRange(start, end); err != nil {
 		// Resets last pruned index in case Delete somehow populates indices on
 		// err. This will cause the next prune operation is O(n), but next
@@ -119,7 +126,7 @@ func (db *RangeDB) Prune(start, end uint64) error {
 
 // prefix prefixes the given key with the index and a slash.
 func (db *RangeDB) prefix(index uint64, key []byte) []byte {
-	return []byte(fmt.Sprintf("%d/%s", index, hex.FromBytes(key).Unwrap()))
+	return []byte(fmt.Sprintf("%d/%s", index, hex.EncodeBytes(key)))
 }
 
 // ExtractIndex extracts the index from a prefixed key.
diff --git a/mod/storage/pkg/filedb/range_db_test.go b/mod/storage/pkg/filedb/range_db_test.go
index 51334ce80..23de7c5c1 100644
--- a/mod/storage/pkg/filedb/range_db_test.go
+++ b/mod/storage/pkg/filedb/range_db_test.go
@@ -246,6 +246,15 @@ func TestRangeDB_Prune(t *testing.T) {
 				requireExist(t, rdb, 0, 1)
 			},
 		},
+		{
+			name: "PruneWithDeleteRange-InvalidRange",
+			setupFunc: func(rdb *file.RangeDB) error {
+				return populateTestDB(rdb, 0, 50)
+			},
+			start:         7,
+			end:           2,
+			expectedError: true,
+		},
 	}
 
 	for _, tt := range tests {
@@ -253,7 +262,7 @@ func TestRangeDB_Prune(t *testing.T) {
 			rdb := file.NewRangeDB(newTestFDB("/tmp/testdb-2"))
 
 			if tt.setupFunc != nil {
-				if err := tt.setupFunc(rdb); (err != nil) != tt.expectedError {
+				if err := tt.setupFunc(rdb); err != nil {
 					t.Fatalf(
 						"setupFunc() error = %v, expectedError %v",
 						err,
diff --git a/mod/storage/pkg/interfaces/mocks/db.mock.go b/mod/storage/pkg/interfaces/mocks/db.mock.go
index a67fec8f9..f9cdef39a 100644
--- a/mod/storage/pkg/interfaces/mocks/db.mock.go
+++ b/mod/storage/pkg/interfaces/mocks/db.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
diff --git a/mod/storage/pkg/pruner/mocks/beacon_block.mock.go b/mod/storage/pkg/pruner/mocks/beacon_block.mock.go
index fb4421811..ba68c5bf2 100644
--- a/mod/storage/pkg/pruner/mocks/beacon_block.mock.go
+++ b/mod/storage/pkg/pruner/mocks/beacon_block.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
diff --git a/mod/storage/pkg/pruner/mocks/block_event.mock.go b/mod/storage/pkg/pruner/mocks/block_event.mock.go
index 62dd1b060..5d2d1891c 100644
--- a/mod/storage/pkg/pruner/mocks/block_event.mock.go
+++ b/mod/storage/pkg/pruner/mocks/block_event.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
@@ -84,7 +84,9 @@ func (_m *BlockEvent[BeaconBlockT]) Data() BeaconBlockT {
 	if rf, ok := ret.Get(0).(func() BeaconBlockT); ok {
 		r0 = rf()
 	} else {
-		r0 = ret.Get(0).(BeaconBlockT)
+		if ret.Get(0) != nil {
+			r0 = ret.Get(0).(BeaconBlockT)
+		}
 	}
 
 	return r0
diff --git a/mod/storage/pkg/pruner/mocks/prunable.mock.go b/mod/storage/pkg/pruner/mocks/prunable.mock.go
index d841b3a8f..0b84e1e0b 100644
--- a/mod/storage/pkg/pruner/mocks/prunable.mock.go
+++ b/mod/storage/pkg/pruner/mocks/prunable.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
diff --git a/mod/storage/pkg/pruner/mocks/pruner.mock.go b/mod/storage/pkg/pruner/mocks/pruner.mock.go
index 292a9cc75..77e354f31 100644
--- a/mod/storage/pkg/pruner/mocks/pruner.mock.go
+++ b/mod/storage/pkg/pruner/mocks/pruner.mock.go
@@ -1,4 +1,4 @@
-// Code generated by mockery v2.45.1. DO NOT EDIT.
+// Code generated by mockery v2.48.0. DO NOT EDIT.
 
 package mocks
 
diff --git a/mod/storage/pkg/pruner/types.go b/mod/storage/pkg/pruner/types.go
index 1080a7911..b07e3d063 100644
--- a/mod/storage/pkg/pruner/types.go
+++ b/mod/storage/pkg/pruner/types.go
@@ -27,11 +27,14 @@ package pruner
 
 import (
 	"context"
+	"errors"
 
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/async"
 	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
 )
 
+var ErrInvalidRange = errors.New("range start greater than end")
+
 // BeaconBlock is an interface for beacon blocks.
 type BeaconBlock interface {
 	GetSlot() math.U64
@@ -48,6 +51,7 @@ type BlockEvent[BeaconBlockT BeaconBlock] interface {
 // Prunable is an interface representing a store that can be pruned.
 type Prunable interface {
 	// Prune prunes the store from [start, end).
+	// Returns ErrInvalidRange if start > end
 	Prune(start, end uint64) error
 }
 
diff --git a/testing/e2e/config/config.go b/testing/e2e/config/config.go
index ae93473c4..0a41752ef 100644
--- a/testing/e2e/config/config.go
+++ b/testing/e2e/config/config.go
@@ -202,7 +202,7 @@ func defaultValidators() NodeSet {
 			},
 			{
 				ElType:   "besu",
-				Replicas: 1,
+				Replicas: 0, // Besu causing flakey tests.
 				KZGImpl:  "crate-crypto/go-kzg-4844",
 			},
 		},
@@ -267,12 +267,12 @@ func defaultExecutionSettings() ExecutionSettings {
 		Specs: NodeSpecs{
 			MinCPU:    0,
 			MaxCPU:    0,
-			MinMemory: 1024, //nolint:mnd // 1 GB
+			MinMemory: 0,
 			MaxMemory: 2048, //nolint:mnd // 2 GB
 		},
 		Images: map[string]string{
 			"besu":       "hyperledger/besu:24.5.4",
-			"erigon":     "thorax/erigon:v2.60.1",
+			"erigon":     "erigontech/erigon:v2.60.9",
 			"ethereumjs": "ethpandaops/ethereumjs:stable",
 			"geth":       "ethereum/client-go:stable",
 			"nethermind": "nethermind/nethermind:latest",
diff --git a/testing/forge-script/README.md b/testing/forge-script/README.md
index b00ac3fbe..968ff5503 100644
--- a/testing/forge-script/README.md
+++ b/testing/forge-script/README.md
@@ -70,3 +70,4 @@ dependency:
     status : true
     path: "dependency.sh"
 ```
+
diff --git a/testing/forge-script/dependency.sh b/testing/forge-script/dependency/dependency.sh
similarity index 100%
rename from testing/forge-script/dependency.sh
rename to testing/forge-script/dependency/dependency.sh
diff --git a/testing/forge-script/forge-config.yaml b/testing/forge-script/forge-config.yaml
index 9bd32b788..a6d12b2f0 100644
--- a/testing/forge-script/forge-config.yaml
+++ b/testing/forge-script/forge-config.yaml
@@ -24,10 +24,10 @@ deployment:
   contracts_path: "contracts"  # give the path till contracts, if the repository is the contract folder itself, then leave it empty
   script_path: "script/DeployAndCallERC20.s.sol"  # this must be relative to the repository path + contracts_path(if applicable)
   contract_name: "DeployAndCallERC20"
+  dependency:
+    type: "none"  # type can be `git` or `local` or `none`
+    path: "script/berps/dependency/dependency.sh"
   rpc_url: "http://HOST_IP_ADDRESS:8547"  # If you spin up local devnet via kurtosis, then public port is 8547
   wallet:
     type: "private_key"  # currently only private_key wallet is supported. Do not change the type.
-    value: "0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306"
-  dependency:
-    status: false
-    path: "dependency.sh"
+    value: "0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306" # private key of the account which will deploy the contract.
diff --git a/testing/forge-script/main.star b/testing/forge-script/main.star
index 86355b5a9..341a035e2 100644
--- a/testing/forge-script/main.star
+++ b/testing/forge-script/main.star
@@ -15,7 +15,7 @@ def deploy_contracts(plan, deployment):
     rpc_url = deployment["rpc_url"]
     wallet = deployment["wallet"]
     dependency = deployment["dependency"]
-    dependency_status = dependency["status"]
+    dependency_type = dependency["type"]
 
     # TODO: Support other wallet options such as mnemonics, keystore, hardware wallets.
     if wallet["type"] == "private_key":
@@ -26,9 +26,10 @@ def deploy_contracts(plan, deployment):
     folder = plan.upload_files(src = repository, name = "contracts")
 
     dependency_artifact_name = ""
-    if dependency_status:
+    if dependency_type == "local" or dependency_type == "git":
         dependency_path = dependency["path"]
-        plan.upload_files(src = dependency_path, name = "dependency")
+
+        plan.upload_files(src = "dependency", name = "dependency")
         dependency_artifact_name = "dependency"
 
     foundry_service = plan.add_service(
@@ -41,8 +42,7 @@ def deploy_contracts(plan, deployment):
     else:
         contract_path = SOURCE_DIR_PATH
 
-    # Check if dependency status is set to true
-    if dependency_status:
+    if dependency_type == "local":
         # Run shell script
         plan.exec(
             service_name = foundry_service.name,
@@ -50,26 +50,33 @@ def deploy_contracts(plan, deployment):
                 command = ["/bin/sh", "-c", "sh {}/{}".format(DEPENDENCY_DIR_PATH, dependency_path)],
             ),
         )
-
-    result = plan.exec(
-        service_name = foundry_service.name,
-        recipe = ExecRecipe(
-            command = ["/bin/sh", "-c", "cd {} && forge build".format(contract_path)],
-        ),
-    )
-    plan.verify(result["code"], "==", 0)
-
-    script_output = exec_on_service(
-        plan,
-        foundry_service.name,
-        "cd {} && forge script {}:{} --broadcast --rpc-url {} {} --json  --skip test > output.json ".format(
-            contract_path,
-            script_path,
-            contract_name,
-            rpc_url,
-            wallet_command,
-        ),
-    )
+    elif dependency_type == "git":
+        plan.exec(
+            service_name = foundry_service.name,
+            recipe = ExecRecipe(
+                command = ["/bin/sh", "-c", "cd {} && sh {}".format(contract_path, dependency_path)],
+            ),
+        )
+    if script_path:
+        result = plan.exec(
+            service_name = foundry_service.name,
+            recipe = ExecRecipe(
+                command = ["/bin/sh", "-c", "cd {} && forge build".format(contract_path)],
+            ),
+        )
+        plan.verify(result["code"], "==", 0)
+
+        script_output = exec_on_service(
+            plan,
+            foundry_service.name,
+            "cd {} && forge script {}:{} --broadcast --rpc-url {} {} --json  --skip test > output.json ".format(
+                contract_path,
+                script_path,
+                contract_name,
+                rpc_url,
+                wallet_command,
+            ),
+        )
 
     exec_on_service(
         plan,
@@ -77,16 +84,17 @@ def deploy_contracts(plan, deployment):
         "cat {}/output.json ".format(contract_path),
     )
 
-    # Get the forge script output in a output.json file and grep from it
-    transaction_file = "grep 'Transactions saved to' output.json | awk -F': ' '{print $2}'"
-    plan.print("transaction_file", transaction_file)
+    if script_path:
+        # Get the forge script output in a output.json file and grep from it
+        transaction_file = "grep 'Transactions saved to' output.json | awk -F': ' '{print $2}'"
+        plan.print("transaction_file", transaction_file)
 
-    transaction_file_details = exec_on_service(plan, foundry_service.name, "cd {} && {}".format(contract_path, transaction_file))
+        transaction_file_details = exec_on_service(plan, foundry_service.name, "cd {} && {}".format(contract_path, transaction_file))
 
-    if not transaction_file_details["output"]:
-        fail("Transaction file not found.")
-    exec_output = exec_on_service(plan, foundry_service.name, "cat {}".format(transaction_file_details["output"]))
-    plan.verify(exec_output["code"], "==", 0)
+        if not transaction_file_details["output"]:
+            fail("Transaction file not found.")
+        exec_output = exec_on_service(plan, foundry_service.name, "chmod -R 777 /app/contracts && cat {}".format(transaction_file_details["output"]))
+        plan.verify(exec_output["code"], "==", 0)
 
 def exec_on_service(plan, service_name, command):
     return plan.exec(
diff --git a/testing/go.mod b/testing/go.mod
index 523cdc1cb..68aa0081b 100644
--- a/testing/go.mod
+++ b/testing/go.mod
@@ -55,12 +55,13 @@ require (
 	github.com/dgraph-io/ristretto v0.1.1 // indirect
 	github.com/dsnet/compress v0.0.2-0.20210315054119-f66993602bf5 // indirect
 	github.com/dustin/go-humanize v1.0.1 // indirect
+	github.com/emicklei/dot v1.6.2 // indirect
 	github.com/ethereum/c-kzg-4844 v1.0.3 // indirect
 	github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 // indirect
 	github.com/fatih/color v1.17.0 // indirect
-	github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 // indirect
+	github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 // indirect
 	github.com/fsnotify/fsnotify v1.7.0 // indirect
-	github.com/gabriel-vasile/mimetype v1.4.4 // indirect
+	github.com/gabriel-vasile/mimetype v1.4.6 // indirect
 	github.com/getsentry/sentry-go v0.28.1 // indirect
 	github.com/ghodss/yaml v1.0.0 // indirect
 	github.com/go-kit/kit v0.13.0 // indirect
@@ -72,9 +73,10 @@ require (
 	github.com/go-playground/validator/v10 v10.22.0 // indirect
 	github.com/go-yaml/yaml v2.1.0+incompatible // indirect
 	github.com/goccy/go-json v0.10.3 // indirect
-	github.com/goccy/go-yaml v1.9.2 // indirect
+	github.com/goccy/go-yaml v1.11.0 // indirect
 	github.com/gofrs/flock v0.12.1 // indirect
 	github.com/gogo/protobuf v1.3.2 // indirect
+	github.com/golang-jwt/jwt/v4 v4.5.1 // indirect
 	github.com/golang/glog v1.2.1 // indirect
 	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
 	github.com/golang/protobuf v1.5.4 // indirect
@@ -110,7 +112,7 @@ require (
 	github.com/nwaples/rardecode v1.1.3 // indirect
 	github.com/oasisprotocol/curve25519-voi v0.0.0-20230904125328-1f23a7beb09a // indirect
 	github.com/olekukonko/tablewriter v0.0.5 // indirect
-	github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 // indirect
+	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/phuslu/log v1.0.110 // indirect
 	github.com/pierrec/lz4 v2.6.1+incompatible // indirect
 	github.com/pk910/dynamic-ssz v0.0.3 // indirect
@@ -127,7 +129,7 @@ require (
 	github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect
 	github.com/rivo/uniseg v0.4.7 // indirect
 	github.com/rogpeppe/go-internal v1.12.0 // indirect
-	github.com/sasha-s/go-deadlock v0.3.1 // indirect
+	github.com/sasha-s/go-deadlock v0.3.5 // indirect
 	github.com/shirou/gopsutil v3.21.11+incompatible // indirect
 	github.com/sirupsen/logrus v1.9.3 // indirect
 	github.com/stretchr/objx v0.5.2 // indirect
@@ -143,17 +145,17 @@ require (
 	go.opentelemetry.io/otel v1.27.0 // indirect
 	go.opentelemetry.io/otel/metric v1.27.0 // indirect
 	go.opentelemetry.io/otel/trace v1.27.0 // indirect
-	golang.org/x/crypto v0.26.0 // indirect
+	golang.org/x/crypto v0.28.0 // indirect
 	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
-	golang.org/x/net v0.28.0 // indirect
+	golang.org/x/net v0.30.0 // indirect
 	golang.org/x/sync v0.8.0 // indirect
-	golang.org/x/sys v0.24.0 // indirect
-	golang.org/x/text v0.17.0 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
 	golang.org/x/xerrors v0.0.0-20231012003039-104605ab7028 // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d // indirect
 	google.golang.org/grpc v1.65.0 // indirect
-	google.golang.org/protobuf v1.34.2 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
 	gopkg.in/Knetic/govaluate.v3 v3.0.0 // indirect
 	gopkg.in/cenkalti/backoff.v1 v1.1.0 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
diff --git a/testing/go.sum b/testing/go.sum
index f582ab298..1b6243114 100644
--- a/testing/go.sum
+++ b/testing/go.sum
@@ -115,6 +115,8 @@ github.com/dsnet/golib v0.0.0-20171103203638-1ea166775780/go.mod h1:Lj+Z9rebOhdf
 github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
 github.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=
 github.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=
+github.com/emicklei/dot v1.6.2 h1:08GN+DD79cy/tzN6uLCT84+2Wk9u+wvqP+Hkx/dIR8A=
+github.com/emicklei/dot v1.6.2/go.mod h1:DeV7GvQtIw4h2u73RKBkkFdvVAz0D9fzeJrgPW6gy/s=
 github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
@@ -125,11 +127,10 @@ github.com/ethereum/go-ethereum v1.14.7 h1:EHpv3dE8evQmpVEQ/Ne2ahB06n2mQptdwqaMN
 github.com/ethereum/go-ethereum v1.14.7/go.mod h1:Mq0biU2jbdmKSZoqOj29017ygFrMnB5/Rifwp980W4o=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0 h1:KrE8I4reeVvf7C1tm8elRjj4BdscTYzz/WAbYyf/JI4=
 github.com/ethereum/go-verkle v0.1.1-0.20240306133620-7d920df305f0/go.mod h1:D9AJLVXSyZQXJQVk8oh1EwjISE+sJTn2duYIZC0dy3w=
-github.com/fatih/color v1.10.0/go.mod h1:ELkj/draVOlAH/xkhN6mQ50Qd0MPOk5AAr3maGEBuJM=
 github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
 github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79 h1:oMYkNRlaY+YxcbYW4U84mQQkujiloBbxQFnTOHUbkec=
-github.com/ferranbt/fastssz v0.1.4-0.20240629094022-eac385e6ee79/go.mod h1:EGSbefgAPd3M0hlBwOCw4Mkj+0YAaSnXw1QeLasY6XQ=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81 h1:SNHNj7UyVnQV3AAi1LweOKnU6+OJ2CmxgaHpRmU7+mc=
+github.com/ferranbt/fastssz v0.1.5-0.20240903094032-455b54c08c81/go.mod h1:Ea3+oeoRGGLGm5shYAeDgu6PGUlcvQhE2fILyD9+tGg=
 github.com/fjl/memsize v0.0.2 h1:27txuSD9or+NZlnOWdKUxeBzTAUkWCVh+4Gf2dWFOzA=
 github.com/fjl/memsize v0.0.2/go.mod h1:VvhXpOYNQvB+uIk2RvXzuaQtkQJzzIx6lSBe1xv7hi0=
 github.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=
@@ -141,8 +142,8 @@ github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4
 github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
 github.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=
 github.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=
-github.com/gabriel-vasile/mimetype v1.4.4 h1:QjV6pZ7/XZ7ryI2KuyeEDE8wnh7fHP9YnQy+R0LnH8I=
-github.com/gabriel-vasile/mimetype v1.4.4/go.mod h1:JwLei5XPtWdGiMFB5Pjle1oEeoSeEuJfJE+TtfvdB/s=
+github.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=
+github.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=
 github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08 h1:f6D9Hr8xV8uYKlyuj8XIruxlh9WjVjdh1gIicAS7ays=
 github.com/gballet/go-libpcsclite v0.0.0-20191108122812-4678299bea08/go.mod h1:x7DCsMOv1taUwEWCzT4cmDeAkigA5/QCwUodaVOe8Ww=
 github.com/getsentry/sentry-go v0.28.1 h1:zzaSm/vHmGllRM6Tpx1492r0YDzauArdBfkJRtY6P5k=
@@ -165,14 +166,10 @@ github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre
 github.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=
 github.com/go-ole/go-ole v1.3.0 h1:Dt6ye7+vXGIKZ7Xtk4s6/xVdGDQynvom7xCFEdWr6uE=
 github.com/go-ole/go-ole v1.3.0/go.mod h1:5LS6F96DhAwUc7C+1HLexzMXY1xGRSryjyPPKW6zv78=
-github.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
-github.com/go-playground/locales v0.13.0/go.mod h1:taPMhCMXrRLJO55olJkUXHZBHCxTMfnGwq/HNwmWNS8=
 github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
 github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
-github.com/go-playground/universal-translator v0.17.0/go.mod h1:UkSxE5sNxxRwHyU+Scu5vgOQjsIJAF8j9muTVoKLVtA=
 github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
 github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
-github.com/go-playground/validator/v10 v10.4.1/go.mod h1:nlOn6nFhuKACm19sB/8EGNn9GlaMV7XkbRSipzJ0Ii4=
 github.com/go-playground/validator/v10 v10.22.0 h1:k6HsTZ0sTnROkhS//R0O+55JgM8C4Bx7ia+JlgcnOao=
 github.com/go-playground/validator/v10 v10.22.0/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=
 github.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=
@@ -180,8 +177,8 @@ github.com/go-yaml/yaml v2.1.0+incompatible h1:RYi2hDdss1u4YE7GwixGzWwVo47T8UQwn
 github.com/go-yaml/yaml v2.1.0+incompatible/go.mod h1:w2MrLa16VYP0jy6N7M5kHaCkaLENm+P+Tv+MfurjSw0=
 github.com/goccy/go-json v0.10.3 h1:KZ5WoDbxAIgm2HNbYckL0se1fHD6rz5j4ywS6ebzDqA=
 github.com/goccy/go-json v0.10.3/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=
-github.com/goccy/go-yaml v1.9.2 h1:2Njwzw+0+pjU2gb805ZC1B/uBuAs2VcZ3K+ZgHwDs7w=
-github.com/goccy/go-yaml v1.9.2/go.mod h1:U/jl18uSupI5rdI2jmuCswEA2htH9eXfferR3KfscvA=
+github.com/goccy/go-yaml v1.11.0 h1:n7Z+zx8S9f9KgzG6KtQKf+kwqXZlLNR2F6018Dgau54=
+github.com/goccy/go-yaml v1.11.0/go.mod h1:H+mJrWtjPTJAHvRbV09MCK9xYwODM+wRTVFFTWckfng=
 github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
 github.com/gofrs/flock v0.12.1 h1:MTLVXXHf8ekldpJk3AKicLij9MdwOWkZ+a/jHHZby9E=
 github.com/gofrs/flock v0.12.1/go.mod h1:9zxTsyu5xtJ9DK+1tFZyibEV7y3uwDxPPfbxeeHCoD0=
@@ -189,8 +186,8 @@ github.com/gofrs/uuid v4.4.0+incompatible h1:3qXRTX8/NbyulANqlc0lchS1gqAVxRgsuW1
 github.com/gofrs/uuid v4.4.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=
 github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
-github.com/golang-jwt/jwt/v4 v4.5.0 h1:7cYmW1XlMY7h7ii7UhUyChSgS5wUJEnm9uZVTGqOWzg=
-github.com/golang-jwt/jwt/v4 v4.5.0/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
+github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
+github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/glog v1.2.1 h1:OptwRhECazUx5ix5TTWC3EZhsZEHWcYWY4FQHTIubm4=
 github.com/golang/glog v1.2.1/go.mod h1:6AhwSGph0fcJtXVM/PEHPqZlFeoLxhs7/t5UDAwmO+w=
@@ -295,17 +292,14 @@ github.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0
 github.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=
 github.com/leanovate/gopter v0.2.9 h1:fQjYxZaynp97ozCzfOyOuAGOU4aU/z37zf/tOujFk7c=
 github.com/leanovate/gopter v0.2.9/go.mod h1:U2L/78B+KVFIx2VmW6onHJQzXtFb+p5y3y2Sh+Jxxv8=
-github.com/leodido/go-urn v1.2.0/go.mod h1:+8+nEpDfqqsY+g338gtMEUOtuK+4dEMhiQEgxpxOKII=
 github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
 github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
 github.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=
 github.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
 github.com/linxGnu/grocksdb v1.9.2 h1:O3mzvO0wuzQ9mtlHbDrShixyVjVbmuqTjFrzlf43wZ8=
 github.com/linxGnu/grocksdb v1.9.2/go.mod h1:QYiYypR2d4v63Wj1adOOfzglnoII0gLj3PNh4fZkcFA=
-github.com/mattn/go-colorable v0.1.8/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=
 github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=
 github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
-github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
 github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
 github.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
 github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
@@ -350,9 +344,8 @@ github.com/onsi/gomega v1.17.0/go.mod h1:HnhC7FXeEQY45zxNK3PPoIUhzk/80Xly9PcubAl
 github.com/onsi/gomega v1.19.0/go.mod h1:LY+I3pBVzYsTBU1AnDwOSxaYi9WoWiqgwooUqq9yPro=
 github.com/onsi/gomega v1.33.1 h1:dsYjIxxSR755MDmKVsaFQTE22ChNBcuuTWgkUDSubOk=
 github.com/onsi/gomega v1.33.1/go.mod h1:U4R44UsT+9eLIaYRB2a5qajjtQYn0hauxvRm16AVYg0=
-github.com/petermattis/goid v0.0.0-20180202154549-b0b1615b78e5/go.mod h1:jvVRKCrJTQWu0XVbaOlby/2lO20uSCHEMzzplHXte1o=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7 h1:CtBLeckhC0zAXgp5V8uR30CNYH0JgCJoxCg5+6i2zQk=
-github.com/petermattis/goid v0.0.0-20240607163614-bb94eb51e7a7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 h1:Dx7Ovyv/SFnMFw3fD4oEoeorXc6saIiQ23LrGLth0Gw=
+github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
 github.com/phuslu/log v1.0.110 h1:9WQnpL1/CBi3IwZaVadYnI/i0bgobTvit2ayXIgSg4c=
 github.com/phuslu/log v1.0.110/go.mod h1:F8osGJADo5qLK/0F88djWwdyoZZ9xDJQL1HYRHFEkS0=
 github.com/pierrec/lz4 v2.6.1+incompatible h1:9UY3+iC23yxF0UfGaYrGplQ+79Rg+h/q9FV9ix19jjM=
@@ -403,8 +396,8 @@ github.com/rs/zerolog v1.33.0 h1:1cU2KZkvPxNyfgEmhHAz/1A9Bz+llsdYzklWFzgp0r8=
 github.com/rs/zerolog v1.33.0/go.mod h1:/7mN4D5sKwJLZQ2b/znpjC3/GQWY/xaDXUM0kKWRHss=
 github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=
 github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
-github.com/sasha-s/go-deadlock v0.3.1 h1:sqv7fDNShgjcaxkO0JNcOAlr8B9+cV5Ey/OB71efZx0=
-github.com/sasha-s/go-deadlock v0.3.1/go.mod h1:F73l+cr82YSh10GxyRI6qZiCgK64VaZjwesgfQ1/iLM=
+github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb2NsU=
+github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=
 github.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
 github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=
@@ -464,8 +457,8 @@ go.opentelemetry.io/otel/trace v1.27.0/go.mod h1:6RiD1hkAprV4/q+yd2ln1HG9GoPx39S
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
-golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
 golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
@@ -489,8 +482,8 @@ golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
 golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
-golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -508,8 +501,6 @@ golang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20201101102859-da207088b7d1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -529,17 +520,16 @@ golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
-golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
-golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
-golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
-golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
 golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
 golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -563,8 +553,8 @@ google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7
 google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
 google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 h1:0+ozOGcrp+Y8Aq8TLNN2Aliibms5LEzsq99ZZmAGYm0=
+google.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094/go.mod h1:fJ/e3If/Q67Mj99hin0hMhiNyCRmt6BQ2aWIJshUSJw=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d h1:JU0iKnSg02Gmb5ZdV8nYsKEKsP6o/FGVWTrw4i1DA9A=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20240711142825-46eb208f015d/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
@@ -585,8 +575,8 @@ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpAD
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
-google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
 gopkg.in/Knetic/govaluate.v3 v3.0.0 h1:18mUyIt4ZlRlFZAAfVetz4/rzlJs9yhN+U02F4u1AOc=
 gopkg.in/Knetic/govaluate.v3 v3.0.0/go.mod h1:csKLBORsPbafmSCGTEh3U7Ozmsuq8ZSIlKk1bcqph0E=
 gopkg.in/cenkalti/backoff.v1 v1.1.0 h1:Arh75ttbsvlpVA7WtVpH4u9h6Zl46xuptxqLxPiSo4Y=
diff --git a/testing/networks/80084/app.toml b/testing/networks/80084/app.toml
index 3bdc8c2fd..52eefb54a 100644
--- a/testing/networks/80084/app.toml
+++ b/testing/networks/80084/app.toml
@@ -100,111 +100,6 @@ statsd-addr = ""
 # Datadog. Only utilized if MetricsSink is set to "dogstatsd".
 datadog-hostname = ""
 
-###############################################################################
-###                           API Configuration                             ###
-###############################################################################
-
-[api]
-
-# Enable defines if the API server should be enabled.
-enable = false
-
-# Swagger defines if swagger documentation should automatically be registered.
-swagger = false
-
-# Address defines the API server to listen on.
-address = "tcp://localhost:1317"
-
-# MaxOpenConnections defines the number of maximum open connections.
-max-open-connections = 1000
-
-# RPCReadTimeout defines the CometBFT RPC read timeout (in seconds).
-rpc-read-timeout = 10
-
-# RPCWriteTimeout defines the CometBFT RPC write timeout (in seconds).
-rpc-write-timeout = 0
-
-# RPCMaxBodyBytes defines the CometBFT maximum request body (in bytes).
-rpc-max-body-bytes = 1000000
-
-# EnableUnsafeCORS defines if CORS should be enabled (unsafe - use it at your own risk).
-enabled-unsafe-cors = false
-
-###############################################################################
-###                           gRPC Configuration                            ###
-###############################################################################
-
-[grpc]
-
-# Enable defines if the gRPC server should be enabled.
-enable = true
-
-# Address defines the gRPC server address to bind to.
-address = "localhost:9090"
-
-# MaxRecvMsgSize defines the max message size in bytes the server can receive.
-# The default value is 10MB.
-max-recv-msg-size = "10485760"
-
-# MaxSendMsgSize defines the max message size in bytes the server can send.
-# The default value is math.MaxInt32.
-max-send-msg-size = "2147483647"
-
-###############################################################################
-###                        State Sync Configuration                         ###
-###############################################################################
-
-# State sync snapshots allow other nodes to rapidly join the network without replaying historical
-# blocks, instead downloading and applying a snapshot of the application state at a given height.
-[state-sync]
-
-# snapshot-interval specifies the block interval at which local state sync snapshots are
-# taken (0 to disable).
-snapshot-interval = 0
-
-# snapshot-keep-recent specifies the number of recent snapshots to keep and serve (0 to keep all).
-snapshot-keep-recent = 2
-
-###############################################################################
-###                              State Streaming                            ###
-###############################################################################
-
-# Streaming allows nodes to stream state to external systems.
-[streaming]
-
-# streaming.abci specifies the configuration for the ABCI Listener streaming service.
-[streaming.abci]
-
-# List of kv store keys to stream out via gRPC.
-# The store key names MUST match the module's StoreKey name.
-#
-# Example:
-# ["acc", "bank", "gov", "staking", "mint"[,...]]
-# ["*"] to expose all keys.
-keys = []
-
-# The plugin name used for streaming via gRPC.
-# Streaming is only enabled if this is set.
-# Supported plugins: abci
-plugin = ""
-
-# stop-node-on-err specifies whether to stop the node on message delivery error.
-stop-node-on-err = true
-
-###############################################################################
-###                         Mempool                                         ###
-###############################################################################
-
-[mempool]
-# Setting max-txs to 0 will allow for a unbounded amount of transactions in the mempool.
-# Setting max_txs to negative 1 (-1) will disable transactions from being inserted into the mempool (no-op mempool).
-# Setting max_txs to a positive number (> 0) will limit the number of transactions in the mempool, by the specified amount.
-#
-# Note, this configuration only applies to SDK built-in app-side mempool
-# implementations.
-max-txs = -1
-
-
 ###############################################################################
 ###                                BeaconKit                                ###
 ###############################################################################
@@ -223,7 +118,7 @@ rpc-timeout = "900ms"
 rpc-startup-check-interval = "3s"
 
 # Interval for the JWT refresh.
-rpc-jwt-refresh-interval = "30s"
+rpc-jwt-refresh-interval = "20s"
 
 # Path to the execution client JWT-secret
 jwt-secret-path = "./jwt.hex"
@@ -267,3 +162,20 @@ graffiti = ""
 # EnableOptimisticPayloadBuilds enables building the next block's payload optimistically in
 # process-proposal to allow for the execution client to have more time to assemble the block.
 enable-optimistic-payload-builds = "true"
+
+[beacon-kit.block-store-service]
+# Enabled determines if the block store service is enabled.
+enabled = "false"
+
+# AvailabilityWindow is the number of slots to keep in the store.
+availability-window = "8192"
+
+[beacon-kit.node-api]
+# Enabled determines if the node API is enabled.
+enabled = "false"
+
+# Address is the address to bind the node API to.
+address = "0.0.0.0:3500"
+
+# Logging determines if the node API logging is enabled.
+logging = "false"
