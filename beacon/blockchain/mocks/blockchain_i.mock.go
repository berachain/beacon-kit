// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	transition "github.com/berachain/beacon-kit/primitives/transition"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"

	v1 "github.com/cometbft/cometbft/api/cometbft/abci/v1"
)

// BlockchainI is an autogenerated mock type for the BlockchainI type
type BlockchainI struct {
	mock.Mock
}

type BlockchainI_Expecter struct {
	mock *mock.Mock
}

func (_m *BlockchainI) EXPECT() *BlockchainI_Expecter {
	return &BlockchainI_Expecter{mock: &_m.Mock}
}

// FinalizeBlock provides a mock function with given fields: _a0, _a1
func (_m *BlockchainI) FinalizeBlock(_a0 types.Context, _a1 *v1.FinalizeBlockRequest) (transition.ValidatorUpdates, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeBlock")
	}

	var r0 transition.ValidatorUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, *v1.FinalizeBlockRequest) (transition.ValidatorUpdates, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(types.Context, *v1.FinalizeBlockRequest) transition.ValidatorUpdates); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transition.ValidatorUpdates)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, *v1.FinalizeBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainI_FinalizeBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeBlock'
type BlockchainI_FinalizeBlock_Call struct {
	*mock.Call
}

// FinalizeBlock is a helper method to define mock.On call
//   - _a0 types.Context
//   - _a1 *v1.FinalizeBlockRequest
func (_e *BlockchainI_Expecter) FinalizeBlock(_a0 interface{}, _a1 interface{}) *BlockchainI_FinalizeBlock_Call {
	return &BlockchainI_FinalizeBlock_Call{Call: _e.mock.On("FinalizeBlock", _a0, _a1)}
}

func (_c *BlockchainI_FinalizeBlock_Call) Run(run func(_a0 types.Context, _a1 *v1.FinalizeBlockRequest)) *BlockchainI_FinalizeBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*v1.FinalizeBlockRequest))
	})
	return _c
}

func (_c *BlockchainI_FinalizeBlock_Call) Return(_a0 transition.ValidatorUpdates, _a1 error) *BlockchainI_FinalizeBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainI_FinalizeBlock_Call) RunAndReturn(run func(types.Context, *v1.FinalizeBlockRequest) (transition.ValidatorUpdates, error)) *BlockchainI_FinalizeBlock_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessGenesisData provides a mock function with given fields: _a0, _a1
func (_m *BlockchainI) ProcessGenesisData(_a0 context.Context, _a1 []byte) (transition.ValidatorUpdates, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ProcessGenesisData")
	}

	var r0 transition.ValidatorUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (transition.ValidatorUpdates, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) transition.ValidatorUpdates); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transition.ValidatorUpdates)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainI_ProcessGenesisData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessGenesisData'
type BlockchainI_ProcessGenesisData_Call struct {
	*mock.Call
}

// ProcessGenesisData is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []byte
func (_e *BlockchainI_Expecter) ProcessGenesisData(_a0 interface{}, _a1 interface{}) *BlockchainI_ProcessGenesisData_Call {
	return &BlockchainI_ProcessGenesisData_Call{Call: _e.mock.On("ProcessGenesisData", _a0, _a1)}
}

func (_c *BlockchainI_ProcessGenesisData_Call) Run(run func(_a0 context.Context, _a1 []byte)) *BlockchainI_ProcessGenesisData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *BlockchainI_ProcessGenesisData_Call) Return(_a0 transition.ValidatorUpdates, _a1 error) *BlockchainI_ProcessGenesisData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainI_ProcessGenesisData_Call) RunAndReturn(run func(context.Context, []byte) (transition.ValidatorUpdates, error)) *BlockchainI_ProcessGenesisData_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessProposal provides a mock function with given fields: _a0, _a1
func (_m *BlockchainI) ProcessProposal(_a0 types.Context, _a1 *v1.ProcessProposalRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ProcessProposal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *v1.ProcessProposalRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockchainI_ProcessProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessProposal'
type BlockchainI_ProcessProposal_Call struct {
	*mock.Call
}

// ProcessProposal is a helper method to define mock.On call
//   - _a0 types.Context
//   - _a1 *v1.ProcessProposalRequest
func (_e *BlockchainI_Expecter) ProcessProposal(_a0 interface{}, _a1 interface{}) *BlockchainI_ProcessProposal_Call {
	return &BlockchainI_ProcessProposal_Call{Call: _e.mock.On("ProcessProposal", _a0, _a1)}
}

func (_c *BlockchainI_ProcessProposal_Call) Run(run func(_a0 types.Context, _a1 *v1.ProcessProposalRequest)) *BlockchainI_ProcessProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*v1.ProcessProposalRequest))
	})
	return _c
}

func (_c *BlockchainI_ProcessProposal_Call) Return(_a0 error) *BlockchainI_ProcessProposal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockchainI_ProcessProposal_Call) RunAndReturn(run func(types.Context, *v1.ProcessProposalRequest) error) *BlockchainI_ProcessProposal_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlockchainI creates a new instance of BlockchainI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockchainI(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockchainI {
	mock := &BlockchainI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
