// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	builder "github.com/berachain/beacon-kit/payload/builder"
	bytes "github.com/berachain/beacon-kit/primitives/bytes"

	context "context"

	engineprimitives "github.com/berachain/beacon-kit/engine-primitives/engine-primitives"

	mock "github.com/stretchr/testify/mock"
)

// LocalBuilder is an autogenerated mock type for the LocalBuilder type
type LocalBuilder struct {
	mock.Mock
}

type LocalBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *LocalBuilder) EXPECT() *LocalBuilder_Expecter {
	return &LocalBuilder_Expecter{mock: &_m.Mock}
}

// Enabled provides a mock function with given fields:
func (_m *LocalBuilder) Enabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LocalBuilder_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type LocalBuilder_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *LocalBuilder_Expecter) Enabled() *LocalBuilder_Enabled_Call {
	return &LocalBuilder_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *LocalBuilder_Enabled_Call) Run(run func()) *LocalBuilder_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LocalBuilder_Enabled_Call) Return(_a0 bool) *LocalBuilder_Enabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LocalBuilder_Enabled_Call) RunAndReturn(run func() bool) *LocalBuilder_Enabled_Call {
	_c.Call.Return(run)
	return _c
}

// RequestPayloadAsync provides a mock function with given fields: ctx, r
func (_m *LocalBuilder) RequestPayloadAsync(ctx context.Context, r *builder.RequestPayloadData) (*engineprimitives.PayloadID, bytes.B4, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for RequestPayloadAsync")
	}

	var r0 *engineprimitives.PayloadID
	var r1 bytes.B4
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *builder.RequestPayloadData) (*engineprimitives.PayloadID, bytes.B4, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *builder.RequestPayloadData) *engineprimitives.PayloadID); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*engineprimitives.PayloadID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *builder.RequestPayloadData) bytes.B4); ok {
		r1 = rf(ctx, r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(bytes.B4)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *builder.RequestPayloadData) error); ok {
		r2 = rf(ctx, r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LocalBuilder_RequestPayloadAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPayloadAsync'
type LocalBuilder_RequestPayloadAsync_Call struct {
	*mock.Call
}

// RequestPayloadAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - r *builder.RequestPayloadData
func (_e *LocalBuilder_Expecter) RequestPayloadAsync(ctx interface{}, r interface{}) *LocalBuilder_RequestPayloadAsync_Call {
	return &LocalBuilder_RequestPayloadAsync_Call{Call: _e.mock.On("RequestPayloadAsync", ctx, r)}
}

func (_c *LocalBuilder_RequestPayloadAsync_Call) Run(run func(ctx context.Context, r *builder.RequestPayloadData)) *LocalBuilder_RequestPayloadAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*builder.RequestPayloadData))
	})
	return _c
}

func (_c *LocalBuilder_RequestPayloadAsync_Call) Return(_a0 *engineprimitives.PayloadID, _a1 bytes.B4, _a2 error) *LocalBuilder_RequestPayloadAsync_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LocalBuilder_RequestPayloadAsync_Call) RunAndReturn(run func(context.Context, *builder.RequestPayloadData) (*engineprimitives.PayloadID, bytes.B4, error)) *LocalBuilder_RequestPayloadAsync_Call {
	_c.Call.Return(run)
	return _c
}

// NewLocalBuilder creates a new instance of LocalBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocalBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocalBuilder {
	mock := &LocalBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
