// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// TelemetrySink is an autogenerated mock type for the TelemetrySink type
type TelemetrySink struct {
	mock.Mock
}

type TelemetrySink_Expecter struct {
	mock *mock.Mock
}

func (_m *TelemetrySink) EXPECT() *TelemetrySink_Expecter {
	return &TelemetrySink_Expecter{mock: &_m.Mock}
}

// IncrementCounter provides a mock function with given fields: key, args
func (_m *TelemetrySink) IncrementCounter(key string, args ...string) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// TelemetrySink_IncrementCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementCounter'
type TelemetrySink_IncrementCounter_Call struct {
	*mock.Call
}

// IncrementCounter is a helper method to define mock.On call
//   - key string
//   - args ...string
func (_e *TelemetrySink_Expecter) IncrementCounter(key interface{}, args ...interface{}) *TelemetrySink_IncrementCounter_Call {
	return &TelemetrySink_IncrementCounter_Call{Call: _e.mock.On("IncrementCounter",
		append([]interface{}{key}, args...)...)}
}

func (_c *TelemetrySink_IncrementCounter_Call) Run(run func(key string, args ...string)) *TelemetrySink_IncrementCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *TelemetrySink_IncrementCounter_Call) Return() *TelemetrySink_IncrementCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *TelemetrySink_IncrementCounter_Call) RunAndReturn(run func(string, ...string)) *TelemetrySink_IncrementCounter_Call {
	_c.Call.Return(run)
	return _c
}

// MeasureSince provides a mock function with given fields: key, start, args
func (_m *TelemetrySink) MeasureSince(key string, start time.Time, args ...string) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key, start)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// TelemetrySink_MeasureSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MeasureSince'
type TelemetrySink_MeasureSince_Call struct {
	*mock.Call
}

// MeasureSince is a helper method to define mock.On call
//   - key string
//   - start time.Time
//   - args ...string
func (_e *TelemetrySink_Expecter) MeasureSince(key interface{}, start interface{}, args ...interface{}) *TelemetrySink_MeasureSince_Call {
	return &TelemetrySink_MeasureSince_Call{Call: _e.mock.On("MeasureSince",
		append([]interface{}{key, start}, args...)...)}
}

func (_c *TelemetrySink_MeasureSince_Call) Run(run func(key string, start time.Time, args ...string)) *TelemetrySink_MeasureSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), args[1].(time.Time), variadicArgs...)
	})
	return _c
}

func (_c *TelemetrySink_MeasureSince_Call) Return() *TelemetrySink_MeasureSince_Call {
	_c.Call.Return()
	return _c
}

func (_c *TelemetrySink_MeasureSince_Call) RunAndReturn(run func(string, time.Time, ...string)) *TelemetrySink_MeasureSince_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelemetrySink creates a new instance of TelemetrySink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelemetrySink(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelemetrySink {
	mock := &TelemetrySink{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
