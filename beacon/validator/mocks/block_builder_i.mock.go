// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/berachain/beacon-kit/consensus/types"
	mock "github.com/stretchr/testify/mock"
)

// BlockBuilderI is an autogenerated mock type for the BlockBuilderI type
type BlockBuilderI struct {
	mock.Mock
}

type BlockBuilderI_Expecter struct {
	mock *mock.Mock
}

func (_m *BlockBuilderI) EXPECT() *BlockBuilderI_Expecter {
	return &BlockBuilderI_Expecter{mock: &_m.Mock}
}

// BuildBlockAndSidecars provides a mock function with given fields: _a0, _a1
func (_m *BlockBuilderI) BuildBlockAndSidecars(_a0 context.Context, _a1 *types.SlotData) ([]byte, []byte, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BuildBlockAndSidecars")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SlotData) ([]byte, []byte, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SlotData) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SlotData) []byte); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.SlotData) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BlockBuilderI_BuildBlockAndSidecars_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildBlockAndSidecars'
type BlockBuilderI_BuildBlockAndSidecars_Call struct {
	*mock.Call
}

// BuildBlockAndSidecars is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.SlotData
func (_e *BlockBuilderI_Expecter) BuildBlockAndSidecars(_a0 interface{}, _a1 interface{}) *BlockBuilderI_BuildBlockAndSidecars_Call {
	return &BlockBuilderI_BuildBlockAndSidecars_Call{Call: _e.mock.On("BuildBlockAndSidecars", _a0, _a1)}
}

func (_c *BlockBuilderI_BuildBlockAndSidecars_Call) Run(run func(_a0 context.Context, _a1 *types.SlotData)) *BlockBuilderI_BuildBlockAndSidecars_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SlotData))
	})
	return _c
}

func (_c *BlockBuilderI_BuildBlockAndSidecars_Call) Return(_a0 []byte, _a1 []byte, _a2 error) *BlockBuilderI_BuildBlockAndSidecars_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BlockBuilderI_BuildBlockAndSidecars_Call) RunAndReturn(run func(context.Context, *types.SlotData) ([]byte, []byte, error)) *BlockBuilderI_BuildBlockAndSidecars_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlockBuilderI creates a new instance of BlockBuilderI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockBuilderI(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockBuilderI {
	mock := &BlockBuilderI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
