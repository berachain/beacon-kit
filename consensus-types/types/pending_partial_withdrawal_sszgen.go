// Code generated by fastssz. DO NOT EDIT.
// Hash: 4e8b249dad0c47390d33cd0826e28c7d32e6729dd609b636141b345f1ee82161
// Version: 0.1.3
package types

import (
	"github.com/berachain/beacon-kit/primitives/math"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PendingPartialWithdrawal object
func (p *PendingPartialWithdrawal) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PendingPartialWithdrawal object to a target array
func (p *PendingPartialWithdrawal) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(p.ValidatorIndex))

	// Field (1) 'Amount'
	dst = ssz.MarshalUint64(dst, uint64(p.Amount))

	// Field (2) 'WithdrawableEpoch'
	dst = ssz.MarshalUint64(dst, uint64(p.WithdrawableEpoch))

	return
}

// UnmarshalSSZ ssz unmarshals the PendingPartialWithdrawal object
func (p *PendingPartialWithdrawal) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 24 {
		return ssz.ErrSize
	}

	// Field (0) 'ValidatorIndex'
	p.ValidatorIndex = math.ValidatorIndex(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Amount'
	p.Amount = math.Gwei(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'WithdrawableEpoch'
	p.WithdrawableEpoch = math.Epoch(ssz.UnmarshallUint64(buf[16:24]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PendingPartialWithdrawal object
func (p *PendingPartialWithdrawal) SizeSSZ() (size int) {
	size = 24
	return
}

// HashTreeRoot ssz hashes the PendingPartialWithdrawal object
func (p *PendingPartialWithdrawal) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PendingPartialWithdrawal object with a hasher
func (p *PendingPartialWithdrawal) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ValidatorIndex'
	hh.PutUint64(uint64(p.ValidatorIndex))

	// Field (1) 'Amount'
	hh.PutUint64(uint64(p.Amount))

	// Field (2) 'WithdrawableEpoch'
	hh.PutUint64(uint64(p.WithdrawableEpoch))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PendingPartialWithdrawal object
func (p *PendingPartialWithdrawal) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}
