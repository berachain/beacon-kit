// Code generated by fastssz. DO NOT EDIT.
// Hash: 2c35790385da06fdd20d031901b8de1a357af8784fb47b944462bed35f415304
// Version: 0.1.3
package types

import (
	"github.com/berachain/beacon-kit/primitives/math"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the WithdrawalRequest object
func (w *WithdrawalRequest) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(w)
}

// MarshalSSZTo ssz marshals the WithdrawalRequest object to a target array
func (w *WithdrawalRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'SourceAddress'
	dst = append(dst, w.SourceAddress[:]...)

	// Field (1) 'ValidatorPubKey'
	dst = append(dst, w.ValidatorPubKey[:]...)

	// Field (2) 'Amount'
	dst = ssz.MarshalUint64(dst, uint64(w.Amount))

	return
}

// UnmarshalSSZ ssz unmarshals the WithdrawalRequest object
func (w *WithdrawalRequest) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 76 {
		return ssz.ErrSize
	}

	// Field (0) 'SourceAddress'
	copy(w.SourceAddress[:], buf[0:20])

	// Field (1) 'ValidatorPubKey'
	copy(w.ValidatorPubKey[:], buf[20:68])

	// Field (2) 'Amount'
	w.Amount = math.Gwei(ssz.UnmarshallUint64(buf[68:76]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the WithdrawalRequest object
func (w *WithdrawalRequest) SizeSSZ() (size int) {
	size = 76
	return
}

// HashTreeRoot ssz hashes the WithdrawalRequest object
func (w *WithdrawalRequest) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(w)
}

// HashTreeRootWith ssz hashes the WithdrawalRequest object with a hasher
func (w *WithdrawalRequest) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'SourceAddress'
	hh.PutBytes(w.SourceAddress[:])

	// Field (1) 'ValidatorPubKey'
	hh.PutBytes(w.ValidatorPubKey[:])

	// Field (2) 'Amount'
	hh.PutUint64(uint64(w.Amount))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the WithdrawalRequest object
func (w *WithdrawalRequest) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(w)
}
