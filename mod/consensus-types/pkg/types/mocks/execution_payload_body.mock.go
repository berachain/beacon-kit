// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/ethereum/go-ethereum/common"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// ExecutionPayloadBody is an autogenerated mock type for the executionPayloadBody type
type ExecutionPayloadBody struct {
	mock.Mock
}

type ExecutionPayloadBody_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionPayloadBody) EXPECT() *ExecutionPayloadBody_Expecter {
	return &ExecutionPayloadBody_Expecter{mock: &_m.Mock}
}

// GetBaseFeePerGas provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetBaseFeePerGas() math.U256L {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseFeePerGas")
	}

	var r0 math.U256L
	if rf, ok := ret.Get(0).(func() math.U256L); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(math.U256L)
		}
	}

	return r0
}

// ExecutionPayloadBody_GetBaseFeePerGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBaseFeePerGas'
type ExecutionPayloadBody_GetBaseFeePerGas_Call struct {
	*mock.Call
}

// GetBaseFeePerGas is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetBaseFeePerGas() *ExecutionPayloadBody_GetBaseFeePerGas_Call {
	return &ExecutionPayloadBody_GetBaseFeePerGas_Call{Call: _e.mock.On("GetBaseFeePerGas")}
}

func (_c *ExecutionPayloadBody_GetBaseFeePerGas_Call) Run(run func()) *ExecutionPayloadBody_GetBaseFeePerGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetBaseFeePerGas_Call) Return(_a0 math.U256L) *ExecutionPayloadBody_GetBaseFeePerGas_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetBaseFeePerGas_Call) RunAndReturn(run func() math.U256L) *ExecutionPayloadBody_GetBaseFeePerGas_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlobGasUsed provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetBlobGasUsed() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobGasUsed")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadBody_GetBlobGasUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobGasUsed'
type ExecutionPayloadBody_GetBlobGasUsed_Call struct {
	*mock.Call
}

// GetBlobGasUsed is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetBlobGasUsed() *ExecutionPayloadBody_GetBlobGasUsed_Call {
	return &ExecutionPayloadBody_GetBlobGasUsed_Call{Call: _e.mock.On("GetBlobGasUsed")}
}

func (_c *ExecutionPayloadBody_GetBlobGasUsed_Call) Run(run func()) *ExecutionPayloadBody_GetBlobGasUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetBlobGasUsed_Call) Return(_a0 math.U64) *ExecutionPayloadBody_GetBlobGasUsed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetBlobGasUsed_Call) RunAndReturn(run func() math.U64) *ExecutionPayloadBody_GetBlobGasUsed_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHash provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetBlockHash() common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHash")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// ExecutionPayloadBody_GetBlockHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHash'
type ExecutionPayloadBody_GetBlockHash_Call struct {
	*mock.Call
}

// GetBlockHash is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetBlockHash() *ExecutionPayloadBody_GetBlockHash_Call {
	return &ExecutionPayloadBody_GetBlockHash_Call{Call: _e.mock.On("GetBlockHash")}
}

func (_c *ExecutionPayloadBody_GetBlockHash_Call) Run(run func()) *ExecutionPayloadBody_GetBlockHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetBlockHash_Call) Return(_a0 common.Hash) *ExecutionPayloadBody_GetBlockHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetBlockHash_Call) RunAndReturn(run func() common.Hash) *ExecutionPayloadBody_GetBlockHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetExcessBlobGas provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetExcessBlobGas() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExcessBlobGas")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadBody_GetExcessBlobGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExcessBlobGas'
type ExecutionPayloadBody_GetExcessBlobGas_Call struct {
	*mock.Call
}

// GetExcessBlobGas is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetExcessBlobGas() *ExecutionPayloadBody_GetExcessBlobGas_Call {
	return &ExecutionPayloadBody_GetExcessBlobGas_Call{Call: _e.mock.On("GetExcessBlobGas")}
}

func (_c *ExecutionPayloadBody_GetExcessBlobGas_Call) Run(run func()) *ExecutionPayloadBody_GetExcessBlobGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetExcessBlobGas_Call) Return(_a0 math.U64) *ExecutionPayloadBody_GetExcessBlobGas_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetExcessBlobGas_Call) RunAndReturn(run func() math.U64) *ExecutionPayloadBody_GetExcessBlobGas_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtraData provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetExtraData() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExtraData")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ExecutionPayloadBody_GetExtraData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtraData'
type ExecutionPayloadBody_GetExtraData_Call struct {
	*mock.Call
}

// GetExtraData is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetExtraData() *ExecutionPayloadBody_GetExtraData_Call {
	return &ExecutionPayloadBody_GetExtraData_Call{Call: _e.mock.On("GetExtraData")}
}

func (_c *ExecutionPayloadBody_GetExtraData_Call) Run(run func()) *ExecutionPayloadBody_GetExtraData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetExtraData_Call) Return(_a0 []byte) *ExecutionPayloadBody_GetExtraData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetExtraData_Call) RunAndReturn(run func() []byte) *ExecutionPayloadBody_GetExtraData_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeeRecipient provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetFeeRecipient() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFeeRecipient")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// ExecutionPayloadBody_GetFeeRecipient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeeRecipient'
type ExecutionPayloadBody_GetFeeRecipient_Call struct {
	*mock.Call
}

// GetFeeRecipient is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetFeeRecipient() *ExecutionPayloadBody_GetFeeRecipient_Call {
	return &ExecutionPayloadBody_GetFeeRecipient_Call{Call: _e.mock.On("GetFeeRecipient")}
}

func (_c *ExecutionPayloadBody_GetFeeRecipient_Call) Run(run func()) *ExecutionPayloadBody_GetFeeRecipient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetFeeRecipient_Call) Return(_a0 common.Address) *ExecutionPayloadBody_GetFeeRecipient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetFeeRecipient_Call) RunAndReturn(run func() common.Address) *ExecutionPayloadBody_GetFeeRecipient_Call {
	_c.Call.Return(run)
	return _c
}

// GetGasLimit provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetGasLimit() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasLimit")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadBody_GetGasLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGasLimit'
type ExecutionPayloadBody_GetGasLimit_Call struct {
	*mock.Call
}

// GetGasLimit is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetGasLimit() *ExecutionPayloadBody_GetGasLimit_Call {
	return &ExecutionPayloadBody_GetGasLimit_Call{Call: _e.mock.On("GetGasLimit")}
}

func (_c *ExecutionPayloadBody_GetGasLimit_Call) Run(run func()) *ExecutionPayloadBody_GetGasLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetGasLimit_Call) Return(_a0 math.U64) *ExecutionPayloadBody_GetGasLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetGasLimit_Call) RunAndReturn(run func() math.U64) *ExecutionPayloadBody_GetGasLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetGasUsed provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetGasUsed() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasUsed")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadBody_GetGasUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGasUsed'
type ExecutionPayloadBody_GetGasUsed_Call struct {
	*mock.Call
}

// GetGasUsed is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetGasUsed() *ExecutionPayloadBody_GetGasUsed_Call {
	return &ExecutionPayloadBody_GetGasUsed_Call{Call: _e.mock.On("GetGasUsed")}
}

func (_c *ExecutionPayloadBody_GetGasUsed_Call) Run(run func()) *ExecutionPayloadBody_GetGasUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetGasUsed_Call) Return(_a0 math.U64) *ExecutionPayloadBody_GetGasUsed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetGasUsed_Call) RunAndReturn(run func() math.U64) *ExecutionPayloadBody_GetGasUsed_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogsBloom provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetLogsBloom() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogsBloom")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ExecutionPayloadBody_GetLogsBloom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogsBloom'
type ExecutionPayloadBody_GetLogsBloom_Call struct {
	*mock.Call
}

// GetLogsBloom is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetLogsBloom() *ExecutionPayloadBody_GetLogsBloom_Call {
	return &ExecutionPayloadBody_GetLogsBloom_Call{Call: _e.mock.On("GetLogsBloom")}
}

func (_c *ExecutionPayloadBody_GetLogsBloom_Call) Run(run func()) *ExecutionPayloadBody_GetLogsBloom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetLogsBloom_Call) Return(_a0 []byte) *ExecutionPayloadBody_GetLogsBloom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetLogsBloom_Call) RunAndReturn(run func() []byte) *ExecutionPayloadBody_GetLogsBloom_Call {
	_c.Call.Return(run)
	return _c
}

// GetNumber provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetNumber() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNumber")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadBody_GetNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNumber'
type ExecutionPayloadBody_GetNumber_Call struct {
	*mock.Call
}

// GetNumber is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetNumber() *ExecutionPayloadBody_GetNumber_Call {
	return &ExecutionPayloadBody_GetNumber_Call{Call: _e.mock.On("GetNumber")}
}

func (_c *ExecutionPayloadBody_GetNumber_Call) Run(run func()) *ExecutionPayloadBody_GetNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetNumber_Call) Return(_a0 math.U64) *ExecutionPayloadBody_GetNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetNumber_Call) RunAndReturn(run func() math.U64) *ExecutionPayloadBody_GetNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetParentHash provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetParentHash() common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentHash")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// ExecutionPayloadBody_GetParentHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentHash'
type ExecutionPayloadBody_GetParentHash_Call struct {
	*mock.Call
}

// GetParentHash is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetParentHash() *ExecutionPayloadBody_GetParentHash_Call {
	return &ExecutionPayloadBody_GetParentHash_Call{Call: _e.mock.On("GetParentHash")}
}

func (_c *ExecutionPayloadBody_GetParentHash_Call) Run(run func()) *ExecutionPayloadBody_GetParentHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetParentHash_Call) Return(_a0 common.Hash) *ExecutionPayloadBody_GetParentHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetParentHash_Call) RunAndReturn(run func() common.Hash) *ExecutionPayloadBody_GetParentHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrevRandao provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetPrevRandao() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrevRandao")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// ExecutionPayloadBody_GetPrevRandao_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrevRandao'
type ExecutionPayloadBody_GetPrevRandao_Call struct {
	*mock.Call
}

// GetPrevRandao is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetPrevRandao() *ExecutionPayloadBody_GetPrevRandao_Call {
	return &ExecutionPayloadBody_GetPrevRandao_Call{Call: _e.mock.On("GetPrevRandao")}
}

func (_c *ExecutionPayloadBody_GetPrevRandao_Call) Run(run func()) *ExecutionPayloadBody_GetPrevRandao_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetPrevRandao_Call) Return(_a0 bytes.B32) *ExecutionPayloadBody_GetPrevRandao_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetPrevRandao_Call) RunAndReturn(run func() bytes.B32) *ExecutionPayloadBody_GetPrevRandao_Call {
	_c.Call.Return(run)
	return _c
}

// GetReceiptsRoot provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetReceiptsRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReceiptsRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// ExecutionPayloadBody_GetReceiptsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReceiptsRoot'
type ExecutionPayloadBody_GetReceiptsRoot_Call struct {
	*mock.Call
}

// GetReceiptsRoot is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetReceiptsRoot() *ExecutionPayloadBody_GetReceiptsRoot_Call {
	return &ExecutionPayloadBody_GetReceiptsRoot_Call{Call: _e.mock.On("GetReceiptsRoot")}
}

func (_c *ExecutionPayloadBody_GetReceiptsRoot_Call) Run(run func()) *ExecutionPayloadBody_GetReceiptsRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetReceiptsRoot_Call) Return(_a0 bytes.B32) *ExecutionPayloadBody_GetReceiptsRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetReceiptsRoot_Call) RunAndReturn(run func() bytes.B32) *ExecutionPayloadBody_GetReceiptsRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateRoot provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetStateRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// ExecutionPayloadBody_GetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateRoot'
type ExecutionPayloadBody_GetStateRoot_Call struct {
	*mock.Call
}

// GetStateRoot is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetStateRoot() *ExecutionPayloadBody_GetStateRoot_Call {
	return &ExecutionPayloadBody_GetStateRoot_Call{Call: _e.mock.On("GetStateRoot")}
}

func (_c *ExecutionPayloadBody_GetStateRoot_Call) Run(run func()) *ExecutionPayloadBody_GetStateRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetStateRoot_Call) Return(_a0 bytes.B32) *ExecutionPayloadBody_GetStateRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetStateRoot_Call) RunAndReturn(run func() bytes.B32) *ExecutionPayloadBody_GetStateRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetTimestamp provides a mock function with given fields:
func (_m *ExecutionPayloadBody) GetTimestamp() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTimestamp")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadBody_GetTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimestamp'
type ExecutionPayloadBody_GetTimestamp_Call struct {
	*mock.Call
}

// GetTimestamp is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) GetTimestamp() *ExecutionPayloadBody_GetTimestamp_Call {
	return &ExecutionPayloadBody_GetTimestamp_Call{Call: _e.mock.On("GetTimestamp")}
}

func (_c *ExecutionPayloadBody_GetTimestamp_Call) Run(run func()) *ExecutionPayloadBody_GetTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_GetTimestamp_Call) Return(_a0 math.U64) *ExecutionPayloadBody_GetTimestamp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_GetTimestamp_Call) RunAndReturn(run func() math.U64) *ExecutionPayloadBody_GetTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *ExecutionPayloadBody) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayloadBody_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type ExecutionPayloadBody_HashTreeRoot_Call struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) HashTreeRoot() *ExecutionPayloadBody_HashTreeRoot_Call {
	return &ExecutionPayloadBody_HashTreeRoot_Call{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *ExecutionPayloadBody_HashTreeRoot_Call) Run(run func()) *ExecutionPayloadBody_HashTreeRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_HashTreeRoot_Call) Return(_a0 [32]byte, _a1 error) *ExecutionPayloadBody_HashTreeRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayloadBody_HashTreeRoot_Call) RunAndReturn(run func() ([32]byte, error)) *ExecutionPayloadBody_HashTreeRoot_Call {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *ExecutionPayloadBody) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutionPayloadBody_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type ExecutionPayloadBody_IsNil_Call struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) IsNil() *ExecutionPayloadBody_IsNil_Call {
	return &ExecutionPayloadBody_IsNil_Call{Call: _e.mock.On("IsNil")}
}

func (_c *ExecutionPayloadBody_IsNil_Call) Run(run func()) *ExecutionPayloadBody_IsNil_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_IsNil_Call) Return(_a0 bool) *ExecutionPayloadBody_IsNil_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_IsNil_Call) RunAndReturn(run func() bool) *ExecutionPayloadBody_IsNil_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalJSON provides a mock function with given fields:
func (_m *ExecutionPayloadBody) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayloadBody_MarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalJSON'
type ExecutionPayloadBody_MarshalJSON_Call struct {
	*mock.Call
}

// MarshalJSON is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) MarshalJSON() *ExecutionPayloadBody_MarshalJSON_Call {
	return &ExecutionPayloadBody_MarshalJSON_Call{Call: _e.mock.On("MarshalJSON")}
}

func (_c *ExecutionPayloadBody_MarshalJSON_Call) Run(run func()) *ExecutionPayloadBody_MarshalJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_MarshalJSON_Call) Return(_a0 []byte, _a1 error) *ExecutionPayloadBody_MarshalJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayloadBody_MarshalJSON_Call) RunAndReturn(run func() ([]byte, error)) *ExecutionPayloadBody_MarshalJSON_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *ExecutionPayloadBody) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayloadBody_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type ExecutionPayloadBody_MarshalSSZ_Call struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) MarshalSSZ() *ExecutionPayloadBody_MarshalSSZ_Call {
	return &ExecutionPayloadBody_MarshalSSZ_Call{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *ExecutionPayloadBody_MarshalSSZ_Call) Run(run func()) *ExecutionPayloadBody_MarshalSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_MarshalSSZ_Call) Return(_a0 []byte, _a1 error) *ExecutionPayloadBody_MarshalSSZ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayloadBody_MarshalSSZ_Call) RunAndReturn(run func() ([]byte, error)) *ExecutionPayloadBody_MarshalSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalJSON provides a mock function with given fields: _a0
func (_m *ExecutionPayloadBody) UnmarshalJSON(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutionPayloadBody_UnmarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalJSON'
type ExecutionPayloadBody_UnmarshalJSON_Call struct {
	*mock.Call
}

// UnmarshalJSON is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ExecutionPayloadBody_Expecter) UnmarshalJSON(_a0 interface{}) *ExecutionPayloadBody_UnmarshalJSON_Call {
	return &ExecutionPayloadBody_UnmarshalJSON_Call{Call: _e.mock.On("UnmarshalJSON", _a0)}
}

func (_c *ExecutionPayloadBody_UnmarshalJSON_Call) Run(run func(_a0 []byte)) *ExecutionPayloadBody_UnmarshalJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ExecutionPayloadBody_UnmarshalJSON_Call) Return(_a0 error) *ExecutionPayloadBody_UnmarshalJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_UnmarshalJSON_Call) RunAndReturn(run func([]byte) error) *ExecutionPayloadBody_UnmarshalJSON_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: _a0
func (_m *ExecutionPayloadBody) UnmarshalSSZ(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutionPayloadBody_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type ExecutionPayloadBody_UnmarshalSSZ_Call struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ExecutionPayloadBody_Expecter) UnmarshalSSZ(_a0 interface{}) *ExecutionPayloadBody_UnmarshalSSZ_Call {
	return &ExecutionPayloadBody_UnmarshalSSZ_Call{Call: _e.mock.On("UnmarshalSSZ", _a0)}
}

func (_c *ExecutionPayloadBody_UnmarshalSSZ_Call) Run(run func(_a0 []byte)) *ExecutionPayloadBody_UnmarshalSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ExecutionPayloadBody_UnmarshalSSZ_Call) Return(_a0 error) *ExecutionPayloadBody_UnmarshalSSZ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_UnmarshalSSZ_Call) RunAndReturn(run func([]byte) error) *ExecutionPayloadBody_UnmarshalSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *ExecutionPayloadBody) Version() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutionPayloadBody_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type ExecutionPayloadBody_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *ExecutionPayloadBody_Expecter) Version() *ExecutionPayloadBody_Version_Call {
	return &ExecutionPayloadBody_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *ExecutionPayloadBody_Version_Call) Run(run func()) *ExecutionPayloadBody_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadBody_Version_Call) Return(_a0 uint32) *ExecutionPayloadBody_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadBody_Version_Call) RunAndReturn(run func() uint32) *ExecutionPayloadBody_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutionPayloadBody creates a new instance of ExecutionPayloadBody. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionPayloadBody(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionPayloadBody {
	mock := &ExecutionPayloadBody{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
