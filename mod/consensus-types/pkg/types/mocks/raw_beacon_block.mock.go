// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
)

// RawBeaconBlock is an autogenerated mock type for the RawBeaconBlock type
type RawBeaconBlock[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	mock.Mock
}

type RawBeaconBlock_Expecter[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	mock *mock.Mock
}

func (_m *RawBeaconBlock[BeaconBlockBodyT]) EXPECT() *RawBeaconBlock_Expecter[BeaconBlockBodyT] {
	return &RawBeaconBlock_Expecter[BeaconBlockBodyT]{mock: &_m.Mock}
}

// GetBody provides a mock function with given fields:
func (_m *RawBeaconBlock[BeaconBlockBodyT]) GetBody() BeaconBlockBodyT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 BeaconBlockBodyT
	if rf, ok := ret.Get(0).(func() BeaconBlockBodyT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(BeaconBlockBodyT)
	}

	return r0
}

// RawBeaconBlock_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type RawBeaconBlock_GetBody_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) GetBody() *RawBeaconBlock_GetBody_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_GetBody_Call[BeaconBlockBodyT]{Call: _e.mock.On("GetBody")}
}

func (_c *RawBeaconBlock_GetBody_Call[BeaconBlockBodyT]) Run(run func()) *RawBeaconBlock_GetBody_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetBody_Call[BeaconBlockBodyT]) Return(_a0 BeaconBlockBodyT) *RawBeaconBlock_GetBody_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetBody_Call[BeaconBlockBodyT]) RunAndReturn(run func() BeaconBlockBodyT) *RawBeaconBlock_GetBody_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function with given fields:
func (_m *RawBeaconBlock[BeaconBlockBodyT]) GetHeader() *types.BeaconBlockHeader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 *types.BeaconBlockHeader
	if rf, ok := ret.Get(0).(func() *types.BeaconBlockHeader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BeaconBlockHeader)
		}
	}

	return r0
}

// RawBeaconBlock_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type RawBeaconBlock_GetHeader_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) GetHeader() *RawBeaconBlock_GetHeader_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_GetHeader_Call[BeaconBlockBodyT]{Call: _e.mock.On("GetHeader")}
}

func (_c *RawBeaconBlock_GetHeader_Call[BeaconBlockBodyT]) Run(run func()) *RawBeaconBlock_GetHeader_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetHeader_Call[BeaconBlockBodyT]) Return(_a0 *types.BeaconBlockHeader) *RawBeaconBlock_GetHeader_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetHeader_Call[BeaconBlockBodyT]) RunAndReturn(run func() *types.BeaconBlockHeader) *RawBeaconBlock_GetHeader_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// GetParentBlockRoot provides a mock function with given fields:
func (_m *RawBeaconBlock[BeaconBlockBodyT]) GetParentBlockRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentBlockRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// RawBeaconBlock_GetParentBlockRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentBlockRoot'
type RawBeaconBlock_GetParentBlockRoot_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// GetParentBlockRoot is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) GetParentBlockRoot() *RawBeaconBlock_GetParentBlockRoot_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_GetParentBlockRoot_Call[BeaconBlockBodyT]{Call: _e.mock.On("GetParentBlockRoot")}
}

func (_c *RawBeaconBlock_GetParentBlockRoot_Call[BeaconBlockBodyT]) Run(run func()) *RawBeaconBlock_GetParentBlockRoot_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetParentBlockRoot_Call[BeaconBlockBodyT]) Return(_a0 bytes.B32) *RawBeaconBlock_GetParentBlockRoot_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetParentBlockRoot_Call[BeaconBlockBodyT]) RunAndReturn(run func() bytes.B32) *RawBeaconBlock_GetParentBlockRoot_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// GetProposerIndex provides a mock function with given fields:
func (_m *RawBeaconBlock[BeaconBlockBodyT]) GetProposerIndex() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProposerIndex")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// RawBeaconBlock_GetProposerIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposerIndex'
type RawBeaconBlock_GetProposerIndex_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// GetProposerIndex is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) GetProposerIndex() *RawBeaconBlock_GetProposerIndex_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_GetProposerIndex_Call[BeaconBlockBodyT]{Call: _e.mock.On("GetProposerIndex")}
}

func (_c *RawBeaconBlock_GetProposerIndex_Call[BeaconBlockBodyT]) Run(run func()) *RawBeaconBlock_GetProposerIndex_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetProposerIndex_Call[BeaconBlockBodyT]) Return(_a0 math.U64) *RawBeaconBlock_GetProposerIndex_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetProposerIndex_Call[BeaconBlockBodyT]) RunAndReturn(run func() math.U64) *RawBeaconBlock_GetProposerIndex_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// GetSlot provides a mock function with given fields:
func (_m *RawBeaconBlock[BeaconBlockBodyT]) GetSlot() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlot")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// RawBeaconBlock_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
type RawBeaconBlock_GetSlot_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// GetSlot is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) GetSlot() *RawBeaconBlock_GetSlot_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_GetSlot_Call[BeaconBlockBodyT]{Call: _e.mock.On("GetSlot")}
}

func (_c *RawBeaconBlock_GetSlot_Call[BeaconBlockBodyT]) Run(run func()) *RawBeaconBlock_GetSlot_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetSlot_Call[BeaconBlockBodyT]) Return(_a0 math.U64) *RawBeaconBlock_GetSlot_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetSlot_Call[BeaconBlockBodyT]) RunAndReturn(run func() math.U64) *RawBeaconBlock_GetSlot_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// GetStateRoot provides a mock function with given fields:
func (_m *RawBeaconBlock[BeaconBlockBodyT]) GetStateRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// RawBeaconBlock_GetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateRoot'
type RawBeaconBlock_GetStateRoot_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// GetStateRoot is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) GetStateRoot() *RawBeaconBlock_GetStateRoot_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_GetStateRoot_Call[BeaconBlockBodyT]{Call: _e.mock.On("GetStateRoot")}
}

func (_c *RawBeaconBlock_GetStateRoot_Call[BeaconBlockBodyT]) Run(run func()) *RawBeaconBlock_GetStateRoot_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetStateRoot_Call[BeaconBlockBodyT]) Return(_a0 bytes.B32) *RawBeaconBlock_GetStateRoot_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetStateRoot_Call[BeaconBlockBodyT]) RunAndReturn(run func() bytes.B32) *RawBeaconBlock_GetStateRoot_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *RawBeaconBlock[BeaconBlockBodyT]) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawBeaconBlock_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type RawBeaconBlock_HashTreeRoot_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) HashTreeRoot() *RawBeaconBlock_HashTreeRoot_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_HashTreeRoot_Call[BeaconBlockBodyT]{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *RawBeaconBlock_HashTreeRoot_Call[BeaconBlockBodyT]) Run(run func()) *RawBeaconBlock_HashTreeRoot_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_HashTreeRoot_Call[BeaconBlockBodyT]) Return(_a0 [32]byte, _a1 error) *RawBeaconBlock_HashTreeRoot_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawBeaconBlock_HashTreeRoot_Call[BeaconBlockBodyT]) RunAndReturn(run func() ([32]byte, error)) *RawBeaconBlock_HashTreeRoot_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *RawBeaconBlock[BeaconBlockBodyT]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RawBeaconBlock_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type RawBeaconBlock_IsNil_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) IsNil() *RawBeaconBlock_IsNil_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_IsNil_Call[BeaconBlockBodyT]{Call: _e.mock.On("IsNil")}
}

func (_c *RawBeaconBlock_IsNil_Call[BeaconBlockBodyT]) Run(run func()) *RawBeaconBlock_IsNil_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_IsNil_Call[BeaconBlockBodyT]) Return(_a0 bool) *RawBeaconBlock_IsNil_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_IsNil_Call[BeaconBlockBodyT]) RunAndReturn(run func() bool) *RawBeaconBlock_IsNil_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *RawBeaconBlock[BeaconBlockBodyT]) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawBeaconBlock_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type RawBeaconBlock_MarshalSSZ_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) MarshalSSZ() *RawBeaconBlock_MarshalSSZ_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_MarshalSSZ_Call[BeaconBlockBodyT]{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *RawBeaconBlock_MarshalSSZ_Call[BeaconBlockBodyT]) Run(run func()) *RawBeaconBlock_MarshalSSZ_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_MarshalSSZ_Call[BeaconBlockBodyT]) Return(_a0 []byte, _a1 error) *RawBeaconBlock_MarshalSSZ_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawBeaconBlock_MarshalSSZ_Call[BeaconBlockBodyT]) RunAndReturn(run func() ([]byte, error)) *RawBeaconBlock_MarshalSSZ_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// SetStateRoot provides a mock function with given fields: _a0
func (_m *RawBeaconBlock[BeaconBlockBodyT]) SetStateRoot(_a0 bytes.B32) {
	_m.Called(_a0)
}

// RawBeaconBlock_SetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStateRoot'
type RawBeaconBlock_SetStateRoot_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// SetStateRoot is a helper method to define mock.On call
//   - _a0 bytes.B32
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) SetStateRoot(_a0 interface{}) *RawBeaconBlock_SetStateRoot_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_SetStateRoot_Call[BeaconBlockBodyT]{Call: _e.mock.On("SetStateRoot", _a0)}
}

func (_c *RawBeaconBlock_SetStateRoot_Call[BeaconBlockBodyT]) Run(run func(_a0 bytes.B32)) *RawBeaconBlock_SetStateRoot_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B32))
	})
	return _c
}

func (_c *RawBeaconBlock_SetStateRoot_Call[BeaconBlockBodyT]) Return() *RawBeaconBlock_SetStateRoot_Call[BeaconBlockBodyT] {
	_c.Call.Return()
	return _c
}

func (_c *RawBeaconBlock_SetStateRoot_Call[BeaconBlockBodyT]) RunAndReturn(run func(bytes.B32)) *RawBeaconBlock_SetStateRoot_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: _a0
func (_m *RawBeaconBlock[BeaconBlockBodyT]) UnmarshalSSZ(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RawBeaconBlock_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type RawBeaconBlock_UnmarshalSSZ_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - _a0 []byte
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) UnmarshalSSZ(_a0 interface{}) *RawBeaconBlock_UnmarshalSSZ_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_UnmarshalSSZ_Call[BeaconBlockBodyT]{Call: _e.mock.On("UnmarshalSSZ", _a0)}
}

func (_c *RawBeaconBlock_UnmarshalSSZ_Call[BeaconBlockBodyT]) Run(run func(_a0 []byte)) *RawBeaconBlock_UnmarshalSSZ_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *RawBeaconBlock_UnmarshalSSZ_Call[BeaconBlockBodyT]) Return(_a0 error) *RawBeaconBlock_UnmarshalSSZ_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_UnmarshalSSZ_Call[BeaconBlockBodyT]) RunAndReturn(run func([]byte) error) *RawBeaconBlock_UnmarshalSSZ_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *RawBeaconBlock[BeaconBlockBodyT]) Version() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// RawBeaconBlock_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type RawBeaconBlock_Version_Call[BeaconBlockBodyT types.RawBeaconBlockBody] struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter[BeaconBlockBodyT]) Version() *RawBeaconBlock_Version_Call[BeaconBlockBodyT] {
	return &RawBeaconBlock_Version_Call[BeaconBlockBodyT]{Call: _e.mock.On("Version")}
}

func (_c *RawBeaconBlock_Version_Call[BeaconBlockBodyT]) Run(run func()) *RawBeaconBlock_Version_Call[BeaconBlockBodyT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_Version_Call[BeaconBlockBodyT]) Return(_a0 uint32) *RawBeaconBlock_Version_Call[BeaconBlockBodyT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_Version_Call[BeaconBlockBodyT]) RunAndReturn(run func() uint32) *RawBeaconBlock_Version_Call[BeaconBlockBodyT] {
	_c.Call.Return(run)
	return _c
}

// NewRawBeaconBlock creates a new instance of RawBeaconBlock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRawBeaconBlock[BeaconBlockBodyT types.RawBeaconBlockBody](t interface {
	mock.TestingT
	Cleanup(func())
}) *RawBeaconBlock[BeaconBlockBodyT] {
	mock := &RawBeaconBlock[BeaconBlockBodyT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
