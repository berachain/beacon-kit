// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/ethereum/go-ethereum/common"

	eip4844 "github.com/berachain/beacon-kit/mod/primitives/pkg/eip4844"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
)

// RawBeaconBlockBody is an autogenerated mock type for the RawBeaconBlockBody type
type RawBeaconBlockBody struct {
	mock.Mock
}

type RawBeaconBlockBody_Expecter struct {
	mock *mock.Mock
}

func (_m *RawBeaconBlockBody) EXPECT() *RawBeaconBlockBody_Expecter {
	return &RawBeaconBlockBody_Expecter{mock: &_m.Mock}
}

// GetBlobKzgCommitments provides a mock function with given fields:
func (_m *RawBeaconBlockBody) GetBlobKzgCommitments() eip4844.KZGCommitments[common.Hash] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobKzgCommitments")
	}

	var r0 eip4844.KZGCommitments[common.Hash]
	if rf, ok := ret.Get(0).(func() eip4844.KZGCommitments[common.Hash]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eip4844.KZGCommitments[common.Hash])
		}
	}

	return r0
}

// RawBeaconBlockBody_GetBlobKzgCommitments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobKzgCommitments'
type RawBeaconBlockBody_GetBlobKzgCommitments_Call struct {
	*mock.Call
}

// GetBlobKzgCommitments is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) GetBlobKzgCommitments() *RawBeaconBlockBody_GetBlobKzgCommitments_Call {
	return &RawBeaconBlockBody_GetBlobKzgCommitments_Call{Call: _e.mock.On("GetBlobKzgCommitments")}
}

func (_c *RawBeaconBlockBody_GetBlobKzgCommitments_Call) Run(run func()) *RawBeaconBlockBody_GetBlobKzgCommitments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_GetBlobKzgCommitments_Call) Return(_a0 eip4844.KZGCommitments[common.Hash]) *RawBeaconBlockBody_GetBlobKzgCommitments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_GetBlobKzgCommitments_Call) RunAndReturn(run func() eip4844.KZGCommitments[common.Hash]) *RawBeaconBlockBody_GetBlobKzgCommitments_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeposits provides a mock function with given fields:
func (_m *RawBeaconBlockBody) GetDeposits() []*types.Deposit {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeposits")
	}

	var r0 []*types.Deposit
	if rf, ok := ret.Get(0).(func() []*types.Deposit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Deposit)
		}
	}

	return r0
}

// RawBeaconBlockBody_GetDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeposits'
type RawBeaconBlockBody_GetDeposits_Call struct {
	*mock.Call
}

// GetDeposits is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) GetDeposits() *RawBeaconBlockBody_GetDeposits_Call {
	return &RawBeaconBlockBody_GetDeposits_Call{Call: _e.mock.On("GetDeposits")}
}

func (_c *RawBeaconBlockBody_GetDeposits_Call) Run(run func()) *RawBeaconBlockBody_GetDeposits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_GetDeposits_Call) Return(_a0 []*types.Deposit) *RawBeaconBlockBody_GetDeposits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_GetDeposits_Call) RunAndReturn(run func() []*types.Deposit) *RawBeaconBlockBody_GetDeposits_Call {
	_c.Call.Return(run)
	return _c
}

// GetEth1Data provides a mock function with given fields:
func (_m *RawBeaconBlockBody) GetEth1Data() *types.Eth1Data {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1Data")
	}

	var r0 *types.Eth1Data
	if rf, ok := ret.Get(0).(func() *types.Eth1Data); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Eth1Data)
		}
	}

	return r0
}

// RawBeaconBlockBody_GetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1Data'
type RawBeaconBlockBody_GetEth1Data_Call struct {
	*mock.Call
}

// GetEth1Data is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) GetEth1Data() *RawBeaconBlockBody_GetEth1Data_Call {
	return &RawBeaconBlockBody_GetEth1Data_Call{Call: _e.mock.On("GetEth1Data")}
}

func (_c *RawBeaconBlockBody_GetEth1Data_Call) Run(run func()) *RawBeaconBlockBody_GetEth1Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_GetEth1Data_Call) Return(_a0 *types.Eth1Data) *RawBeaconBlockBody_GetEth1Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_GetEth1Data_Call) RunAndReturn(run func() *types.Eth1Data) *RawBeaconBlockBody_GetEth1Data_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionPayload provides a mock function with given fields:
func (_m *RawBeaconBlockBody) GetExecutionPayload() *types.ExecutionPayload {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionPayload")
	}

	var r0 *types.ExecutionPayload
	if rf, ok := ret.Get(0).(func() *types.ExecutionPayload); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ExecutionPayload)
		}
	}

	return r0
}

// RawBeaconBlockBody_GetExecutionPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionPayload'
type RawBeaconBlockBody_GetExecutionPayload_Call struct {
	*mock.Call
}

// GetExecutionPayload is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) GetExecutionPayload() *RawBeaconBlockBody_GetExecutionPayload_Call {
	return &RawBeaconBlockBody_GetExecutionPayload_Call{Call: _e.mock.On("GetExecutionPayload")}
}

func (_c *RawBeaconBlockBody_GetExecutionPayload_Call) Run(run func()) *RawBeaconBlockBody_GetExecutionPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_GetExecutionPayload_Call) Return(_a0 *types.ExecutionPayload) *RawBeaconBlockBody_GetExecutionPayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_GetExecutionPayload_Call) RunAndReturn(run func() *types.ExecutionPayload) *RawBeaconBlockBody_GetExecutionPayload_Call {
	_c.Call.Return(run)
	return _c
}

// GetGraffiti provides a mock function with given fields:
func (_m *RawBeaconBlockBody) GetGraffiti() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGraffiti")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// RawBeaconBlockBody_GetGraffiti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGraffiti'
type RawBeaconBlockBody_GetGraffiti_Call struct {
	*mock.Call
}

// GetGraffiti is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) GetGraffiti() *RawBeaconBlockBody_GetGraffiti_Call {
	return &RawBeaconBlockBody_GetGraffiti_Call{Call: _e.mock.On("GetGraffiti")}
}

func (_c *RawBeaconBlockBody_GetGraffiti_Call) Run(run func()) *RawBeaconBlockBody_GetGraffiti_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_GetGraffiti_Call) Return(_a0 bytes.B32) *RawBeaconBlockBody_GetGraffiti_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_GetGraffiti_Call) RunAndReturn(run func() bytes.B32) *RawBeaconBlockBody_GetGraffiti_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandaoReveal provides a mock function with given fields:
func (_m *RawBeaconBlockBody) GetRandaoReveal() bytes.B96 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRandaoReveal")
	}

	var r0 bytes.B96
	if rf, ok := ret.Get(0).(func() bytes.B96); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B96)
		}
	}

	return r0
}

// RawBeaconBlockBody_GetRandaoReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandaoReveal'
type RawBeaconBlockBody_GetRandaoReveal_Call struct {
	*mock.Call
}

// GetRandaoReveal is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) GetRandaoReveal() *RawBeaconBlockBody_GetRandaoReveal_Call {
	return &RawBeaconBlockBody_GetRandaoReveal_Call{Call: _e.mock.On("GetRandaoReveal")}
}

func (_c *RawBeaconBlockBody_GetRandaoReveal_Call) Run(run func()) *RawBeaconBlockBody_GetRandaoReveal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_GetRandaoReveal_Call) Return(_a0 bytes.B96) *RawBeaconBlockBody_GetRandaoReveal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_GetRandaoReveal_Call) RunAndReturn(run func() bytes.B96) *RawBeaconBlockBody_GetRandaoReveal_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopLevelRoots provides a mock function with given fields:
func (_m *RawBeaconBlockBody) GetTopLevelRoots() ([][32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopLevelRoots")
	}

	var r0 [][32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([][32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [][32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawBeaconBlockBody_GetTopLevelRoots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopLevelRoots'
type RawBeaconBlockBody_GetTopLevelRoots_Call struct {
	*mock.Call
}

// GetTopLevelRoots is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) GetTopLevelRoots() *RawBeaconBlockBody_GetTopLevelRoots_Call {
	return &RawBeaconBlockBody_GetTopLevelRoots_Call{Call: _e.mock.On("GetTopLevelRoots")}
}

func (_c *RawBeaconBlockBody_GetTopLevelRoots_Call) Run(run func()) *RawBeaconBlockBody_GetTopLevelRoots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_GetTopLevelRoots_Call) Return(_a0 [][32]byte, _a1 error) *RawBeaconBlockBody_GetTopLevelRoots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawBeaconBlockBody_GetTopLevelRoots_Call) RunAndReturn(run func() ([][32]byte, error)) *RawBeaconBlockBody_GetTopLevelRoots_Call {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *RawBeaconBlockBody) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawBeaconBlockBody_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type RawBeaconBlockBody_HashTreeRoot_Call struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) HashTreeRoot() *RawBeaconBlockBody_HashTreeRoot_Call {
	return &RawBeaconBlockBody_HashTreeRoot_Call{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *RawBeaconBlockBody_HashTreeRoot_Call) Run(run func()) *RawBeaconBlockBody_HashTreeRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_HashTreeRoot_Call) Return(_a0 [32]byte, _a1 error) *RawBeaconBlockBody_HashTreeRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawBeaconBlockBody_HashTreeRoot_Call) RunAndReturn(run func() ([32]byte, error)) *RawBeaconBlockBody_HashTreeRoot_Call {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *RawBeaconBlockBody) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RawBeaconBlockBody_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type RawBeaconBlockBody_IsNil_Call struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) IsNil() *RawBeaconBlockBody_IsNil_Call {
	return &RawBeaconBlockBody_IsNil_Call{Call: _e.mock.On("IsNil")}
}

func (_c *RawBeaconBlockBody_IsNil_Call) Run(run func()) *RawBeaconBlockBody_IsNil_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_IsNil_Call) Return(_a0 bool) *RawBeaconBlockBody_IsNil_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_IsNil_Call) RunAndReturn(run func() bool) *RawBeaconBlockBody_IsNil_Call {
	_c.Call.Return(run)
	return _c
}

// Length provides a mock function with given fields:
func (_m *RawBeaconBlockBody) Length() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Length")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// RawBeaconBlockBody_Length_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Length'
type RawBeaconBlockBody_Length_Call struct {
	*mock.Call
}

// Length is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) Length() *RawBeaconBlockBody_Length_Call {
	return &RawBeaconBlockBody_Length_Call{Call: _e.mock.On("Length")}
}

func (_c *RawBeaconBlockBody_Length_Call) Run(run func()) *RawBeaconBlockBody_Length_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_Length_Call) Return(_a0 uint64) *RawBeaconBlockBody_Length_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_Length_Call) RunAndReturn(run func() uint64) *RawBeaconBlockBody_Length_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *RawBeaconBlockBody) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawBeaconBlockBody_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type RawBeaconBlockBody_MarshalSSZ_Call struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) MarshalSSZ() *RawBeaconBlockBody_MarshalSSZ_Call {
	return &RawBeaconBlockBody_MarshalSSZ_Call{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *RawBeaconBlockBody_MarshalSSZ_Call) Run(run func()) *RawBeaconBlockBody_MarshalSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_MarshalSSZ_Call) Return(_a0 []byte, _a1 error) *RawBeaconBlockBody_MarshalSSZ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawBeaconBlockBody_MarshalSSZ_Call) RunAndReturn(run func() ([]byte, error)) *RawBeaconBlockBody_MarshalSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZTo provides a mock function with given fields: _a0
func (_m *RawBeaconBlockBody) MarshalSSZTo(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZTo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawBeaconBlockBody_MarshalSSZTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZTo'
type RawBeaconBlockBody_MarshalSSZTo_Call struct {
	*mock.Call
}

// MarshalSSZTo is a helper method to define mock.On call
//   - _a0 []byte
func (_e *RawBeaconBlockBody_Expecter) MarshalSSZTo(_a0 interface{}) *RawBeaconBlockBody_MarshalSSZTo_Call {
	return &RawBeaconBlockBody_MarshalSSZTo_Call{Call: _e.mock.On("MarshalSSZTo", _a0)}
}

func (_c *RawBeaconBlockBody_MarshalSSZTo_Call) Run(run func(_a0 []byte)) *RawBeaconBlockBody_MarshalSSZTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *RawBeaconBlockBody_MarshalSSZTo_Call) Return(_a0 []byte, _a1 error) *RawBeaconBlockBody_MarshalSSZTo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawBeaconBlockBody_MarshalSSZTo_Call) RunAndReturn(run func([]byte) ([]byte, error)) *RawBeaconBlockBody_MarshalSSZTo_Call {
	_c.Call.Return(run)
	return _c
}

// SetAttestations provides a mock function with given fields: _a0
func (_m *RawBeaconBlockBody) SetAttestations(_a0 []*types.AttestationData) {
	_m.Called(_a0)
}

// RawBeaconBlockBody_SetAttestations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAttestations'
type RawBeaconBlockBody_SetAttestations_Call struct {
	*mock.Call
}

// SetAttestations is a helper method to define mock.On call
//   - _a0 []*types.AttestationData
func (_e *RawBeaconBlockBody_Expecter) SetAttestations(_a0 interface{}) *RawBeaconBlockBody_SetAttestations_Call {
	return &RawBeaconBlockBody_SetAttestations_Call{Call: _e.mock.On("SetAttestations", _a0)}
}

func (_c *RawBeaconBlockBody_SetAttestations_Call) Run(run func(_a0 []*types.AttestationData)) *RawBeaconBlockBody_SetAttestations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*types.AttestationData))
	})
	return _c
}

func (_c *RawBeaconBlockBody_SetAttestations_Call) Return() *RawBeaconBlockBody_SetAttestations_Call {
	_c.Call.Return()
	return _c
}

func (_c *RawBeaconBlockBody_SetAttestations_Call) RunAndReturn(run func([]*types.AttestationData)) *RawBeaconBlockBody_SetAttestations_Call {
	_c.Call.Return(run)
	return _c
}

// SetBlobKzgCommitments provides a mock function with given fields: _a0
func (_m *RawBeaconBlockBody) SetBlobKzgCommitments(_a0 eip4844.KZGCommitments[common.Hash]) {
	_m.Called(_a0)
}

// RawBeaconBlockBody_SetBlobKzgCommitments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBlobKzgCommitments'
type RawBeaconBlockBody_SetBlobKzgCommitments_Call struct {
	*mock.Call
}

// SetBlobKzgCommitments is a helper method to define mock.On call
//   - _a0 eip4844.KZGCommitments[common.Hash]
func (_e *RawBeaconBlockBody_Expecter) SetBlobKzgCommitments(_a0 interface{}) *RawBeaconBlockBody_SetBlobKzgCommitments_Call {
	return &RawBeaconBlockBody_SetBlobKzgCommitments_Call{Call: _e.mock.On("SetBlobKzgCommitments", _a0)}
}

func (_c *RawBeaconBlockBody_SetBlobKzgCommitments_Call) Run(run func(_a0 eip4844.KZGCommitments[common.Hash])) *RawBeaconBlockBody_SetBlobKzgCommitments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(eip4844.KZGCommitments[common.Hash]))
	})
	return _c
}

func (_c *RawBeaconBlockBody_SetBlobKzgCommitments_Call) Return() *RawBeaconBlockBody_SetBlobKzgCommitments_Call {
	_c.Call.Return()
	return _c
}

func (_c *RawBeaconBlockBody_SetBlobKzgCommitments_Call) RunAndReturn(run func(eip4844.KZGCommitments[common.Hash])) *RawBeaconBlockBody_SetBlobKzgCommitments_Call {
	_c.Call.Return(run)
	return _c
}

// SetDeposits provides a mock function with given fields: _a0
func (_m *RawBeaconBlockBody) SetDeposits(_a0 []*types.Deposit) {
	_m.Called(_a0)
}

// RawBeaconBlockBody_SetDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeposits'
type RawBeaconBlockBody_SetDeposits_Call struct {
	*mock.Call
}

// SetDeposits is a helper method to define mock.On call
//   - _a0 []*types.Deposit
func (_e *RawBeaconBlockBody_Expecter) SetDeposits(_a0 interface{}) *RawBeaconBlockBody_SetDeposits_Call {
	return &RawBeaconBlockBody_SetDeposits_Call{Call: _e.mock.On("SetDeposits", _a0)}
}

func (_c *RawBeaconBlockBody_SetDeposits_Call) Run(run func(_a0 []*types.Deposit)) *RawBeaconBlockBody_SetDeposits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*types.Deposit))
	})
	return _c
}

func (_c *RawBeaconBlockBody_SetDeposits_Call) Return() *RawBeaconBlockBody_SetDeposits_Call {
	_c.Call.Return()
	return _c
}

func (_c *RawBeaconBlockBody_SetDeposits_Call) RunAndReturn(run func([]*types.Deposit)) *RawBeaconBlockBody_SetDeposits_Call {
	_c.Call.Return(run)
	return _c
}

// SetEth1Data provides a mock function with given fields: _a0
func (_m *RawBeaconBlockBody) SetEth1Data(_a0 *types.Eth1Data) {
	_m.Called(_a0)
}

// RawBeaconBlockBody_SetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEth1Data'
type RawBeaconBlockBody_SetEth1Data_Call struct {
	*mock.Call
}

// SetEth1Data is a helper method to define mock.On call
//   - _a0 *types.Eth1Data
func (_e *RawBeaconBlockBody_Expecter) SetEth1Data(_a0 interface{}) *RawBeaconBlockBody_SetEth1Data_Call {
	return &RawBeaconBlockBody_SetEth1Data_Call{Call: _e.mock.On("SetEth1Data", _a0)}
}

func (_c *RawBeaconBlockBody_SetEth1Data_Call) Run(run func(_a0 *types.Eth1Data)) *RawBeaconBlockBody_SetEth1Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Eth1Data))
	})
	return _c
}

func (_c *RawBeaconBlockBody_SetEth1Data_Call) Return() *RawBeaconBlockBody_SetEth1Data_Call {
	_c.Call.Return()
	return _c
}

func (_c *RawBeaconBlockBody_SetEth1Data_Call) RunAndReturn(run func(*types.Eth1Data)) *RawBeaconBlockBody_SetEth1Data_Call {
	_c.Call.Return(run)
	return _c
}

// SetExecutionData provides a mock function with given fields: _a0
func (_m *RawBeaconBlockBody) SetExecutionData(_a0 *types.ExecutionPayload) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetExecutionData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.ExecutionPayload) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RawBeaconBlockBody_SetExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExecutionData'
type RawBeaconBlockBody_SetExecutionData_Call struct {
	*mock.Call
}

// SetExecutionData is a helper method to define mock.On call
//   - _a0 *types.ExecutionPayload
func (_e *RawBeaconBlockBody_Expecter) SetExecutionData(_a0 interface{}) *RawBeaconBlockBody_SetExecutionData_Call {
	return &RawBeaconBlockBody_SetExecutionData_Call{Call: _e.mock.On("SetExecutionData", _a0)}
}

func (_c *RawBeaconBlockBody_SetExecutionData_Call) Run(run func(_a0 *types.ExecutionPayload)) *RawBeaconBlockBody_SetExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.ExecutionPayload))
	})
	return _c
}

func (_c *RawBeaconBlockBody_SetExecutionData_Call) Return(_a0 error) *RawBeaconBlockBody_SetExecutionData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_SetExecutionData_Call) RunAndReturn(run func(*types.ExecutionPayload) error) *RawBeaconBlockBody_SetExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// SetGraffiti provides a mock function with given fields: _a0
func (_m *RawBeaconBlockBody) SetGraffiti(_a0 bytes.B32) {
	_m.Called(_a0)
}

// RawBeaconBlockBody_SetGraffiti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGraffiti'
type RawBeaconBlockBody_SetGraffiti_Call struct {
	*mock.Call
}

// SetGraffiti is a helper method to define mock.On call
//   - _a0 bytes.B32
func (_e *RawBeaconBlockBody_Expecter) SetGraffiti(_a0 interface{}) *RawBeaconBlockBody_SetGraffiti_Call {
	return &RawBeaconBlockBody_SetGraffiti_Call{Call: _e.mock.On("SetGraffiti", _a0)}
}

func (_c *RawBeaconBlockBody_SetGraffiti_Call) Run(run func(_a0 bytes.B32)) *RawBeaconBlockBody_SetGraffiti_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B32))
	})
	return _c
}

func (_c *RawBeaconBlockBody_SetGraffiti_Call) Return() *RawBeaconBlockBody_SetGraffiti_Call {
	_c.Call.Return()
	return _c
}

func (_c *RawBeaconBlockBody_SetGraffiti_Call) RunAndReturn(run func(bytes.B32)) *RawBeaconBlockBody_SetGraffiti_Call {
	_c.Call.Return(run)
	return _c
}

// SetRandaoReveal provides a mock function with given fields: _a0
func (_m *RawBeaconBlockBody) SetRandaoReveal(_a0 bytes.B96) {
	_m.Called(_a0)
}

// RawBeaconBlockBody_SetRandaoReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRandaoReveal'
type RawBeaconBlockBody_SetRandaoReveal_Call struct {
	*mock.Call
}

// SetRandaoReveal is a helper method to define mock.On call
//   - _a0 bytes.B96
func (_e *RawBeaconBlockBody_Expecter) SetRandaoReveal(_a0 interface{}) *RawBeaconBlockBody_SetRandaoReveal_Call {
	return &RawBeaconBlockBody_SetRandaoReveal_Call{Call: _e.mock.On("SetRandaoReveal", _a0)}
}

func (_c *RawBeaconBlockBody_SetRandaoReveal_Call) Run(run func(_a0 bytes.B96)) *RawBeaconBlockBody_SetRandaoReveal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B96))
	})
	return _c
}

func (_c *RawBeaconBlockBody_SetRandaoReveal_Call) Return() *RawBeaconBlockBody_SetRandaoReveal_Call {
	_c.Call.Return()
	return _c
}

func (_c *RawBeaconBlockBody_SetRandaoReveal_Call) RunAndReturn(run func(bytes.B96)) *RawBeaconBlockBody_SetRandaoReveal_Call {
	_c.Call.Return(run)
	return _c
}

// SetSlashingInfo provides a mock function with given fields: _a0
func (_m *RawBeaconBlockBody) SetSlashingInfo(_a0 []*types.SlashingInfo) {
	_m.Called(_a0)
}

// RawBeaconBlockBody_SetSlashingInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSlashingInfo'
type RawBeaconBlockBody_SetSlashingInfo_Call struct {
	*mock.Call
}

// SetSlashingInfo is a helper method to define mock.On call
//   - _a0 []*types.SlashingInfo
func (_e *RawBeaconBlockBody_Expecter) SetSlashingInfo(_a0 interface{}) *RawBeaconBlockBody_SetSlashingInfo_Call {
	return &RawBeaconBlockBody_SetSlashingInfo_Call{Call: _e.mock.On("SetSlashingInfo", _a0)}
}

func (_c *RawBeaconBlockBody_SetSlashingInfo_Call) Run(run func(_a0 []*types.SlashingInfo)) *RawBeaconBlockBody_SetSlashingInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*types.SlashingInfo))
	})
	return _c
}

func (_c *RawBeaconBlockBody_SetSlashingInfo_Call) Return() *RawBeaconBlockBody_SetSlashingInfo_Call {
	_c.Call.Return()
	return _c
}

func (_c *RawBeaconBlockBody_SetSlashingInfo_Call) RunAndReturn(run func([]*types.SlashingInfo)) *RawBeaconBlockBody_SetSlashingInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SizeSSZ provides a mock function with given fields:
func (_m *RawBeaconBlockBody) SizeSSZ() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeSSZ")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RawBeaconBlockBody_SizeSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SizeSSZ'
type RawBeaconBlockBody_SizeSSZ_Call struct {
	*mock.Call
}

// SizeSSZ is a helper method to define mock.On call
func (_e *RawBeaconBlockBody_Expecter) SizeSSZ() *RawBeaconBlockBody_SizeSSZ_Call {
	return &RawBeaconBlockBody_SizeSSZ_Call{Call: _e.mock.On("SizeSSZ")}
}

func (_c *RawBeaconBlockBody_SizeSSZ_Call) Run(run func()) *RawBeaconBlockBody_SizeSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlockBody_SizeSSZ_Call) Return(_a0 int) *RawBeaconBlockBody_SizeSSZ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_SizeSSZ_Call) RunAndReturn(run func() int) *RawBeaconBlockBody_SizeSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: _a0
func (_m *RawBeaconBlockBody) UnmarshalSSZ(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RawBeaconBlockBody_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type RawBeaconBlockBody_UnmarshalSSZ_Call struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - _a0 []byte
func (_e *RawBeaconBlockBody_Expecter) UnmarshalSSZ(_a0 interface{}) *RawBeaconBlockBody_UnmarshalSSZ_Call {
	return &RawBeaconBlockBody_UnmarshalSSZ_Call{Call: _e.mock.On("UnmarshalSSZ", _a0)}
}

func (_c *RawBeaconBlockBody_UnmarshalSSZ_Call) Run(run func(_a0 []byte)) *RawBeaconBlockBody_UnmarshalSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *RawBeaconBlockBody_UnmarshalSSZ_Call) Return(_a0 error) *RawBeaconBlockBody_UnmarshalSSZ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlockBody_UnmarshalSSZ_Call) RunAndReturn(run func([]byte) error) *RawBeaconBlockBody_UnmarshalSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// NewRawBeaconBlockBody creates a new instance of RawBeaconBlockBody. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRawBeaconBlockBody(t interface {
	mock.TestingT
	Cleanup(func())
}) *RawBeaconBlockBody {
	mock := &RawBeaconBlockBody{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
