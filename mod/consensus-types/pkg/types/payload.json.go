// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	"github.com/ethereum/go-ethereum/common"
)

// MarshalJSON marshals as JSON.
func (e ExecutionPayload) MarshalJSON() ([]byte, error) {
	type ExecutionPayload struct {
		ParentHash    common.Hash                    `json:"parentHash"    ssz-size:"32"  gencodec:"required"`
		FeeRecipient  common.Address                 `json:"feeRecipient"  ssz-size:"20"  gencodec:"required"`
		StateRoot     bytes.B32                      `json:"stateRoot"     ssz-size:"32"  gencodec:"required"`
		ReceiptsRoot  bytes.B32                      `json:"receiptsRoot"  ssz-size:"32"  gencodec:"required"`
		LogsBloom     bytes.B256                    `json:"logsBloom"     ssz-size:"256" gencodec:"required"`
		Random        bytes.B32                      `json:"prevRandao"    ssz-size:"32"  gencodec:"required"`
		Number        math.U64                       `json:"blockNumber"                  gencodec:"required"`
		GasLimit      math.U64                       `json:"gasLimit"                     gencodec:"required"`
		GasUsed       math.U64                       `json:"gasUsed"                      gencodec:"required"`
		Timestamp     math.U64                       `json:"timestamp"                    gencodec:"required"`
		ExtraData     bytes.Bytes                    `json:"extraData"                    gencodec:"required" ssz-max:"32"`
		BaseFeePerGas math.U256L                     `json:"baseFeePerGas" ssz-size:"32"  gencodec:"required"`
		BlockHash     common.Hash                    `json:"blockHash"     ssz-size:"32"  gencodec:"required"`
		Transactions  []bytes.Bytes                  `json:"transactions"  ssz-size:"?,?" gencodec:"required" ssz-max:"1048576,1073741824"`
		Withdrawals   []*engineprimitives.Withdrawal `json:"withdrawals"                                      ssz-max:"16"`
		BlobGasUsed   math.U64                       `json:"blobGasUsed"`
		ExcessBlobGas math.U64                       `json:"excessBlobGas"`
	}
	var enc ExecutionPayload
	enc.ParentHash = e.ParentHash
	enc.FeeRecipient = e.FeeRecipient
	enc.StateRoot = e.StateRoot
	enc.ReceiptsRoot = e.ReceiptsRoot
	enc.LogsBloom = e.LogsBloom
	enc.Random = e.Random
	enc.Number = e.Number
	enc.GasLimit = e.GasLimit
	enc.GasUsed = e.GasUsed
	enc.Timestamp = e.Timestamp
	enc.ExtraData = e.ExtraData
	enc.BaseFeePerGas = e.BaseFeePerGas
	enc.BlockHash = e.BlockHash
	if e.Transactions != nil {
		enc.Transactions = make([]bytes.Bytes, len(e.Transactions))
		for k, v := range e.Transactions {
			enc.Transactions[k] = v
		}
	}
	enc.Withdrawals = e.Withdrawals
	enc.BlobGasUsed = e.BlobGasUsed
	enc.ExcessBlobGas = e.ExcessBlobGas
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutionPayload) UnmarshalJSON(input []byte) error {
	type ExecutionPayload struct {
		ParentHash    *common.Hash                   `json:"parentHash"    ssz-size:"32"  gencodec:"required"`
		FeeRecipient  *common.Address                `json:"feeRecipient"  ssz-size:"20"  gencodec:"required"`
		StateRoot     *bytes.B32                     `json:"stateRoot"     ssz-size:"32"  gencodec:"required"`
		ReceiptsRoot  *bytes.B32                     `json:"receiptsRoot"  ssz-size:"32"  gencodec:"required"`
		LogsBloom     *bytes.B256                    `json:"logsBloom"     ssz-size:"256" gencodec:"required"`
		Random        *bytes.B32                     `json:"prevRandao"    ssz-size:"32"  gencodec:"required"`
		Number        *math.U64                      `json:"blockNumber"                  gencodec:"required"`
		GasLimit      *math.U64                      `json:"gasLimit"                     gencodec:"required"`
		GasUsed       *math.U64                      `json:"gasUsed"                      gencodec:"required"`
		Timestamp     *math.U64                      `json:"timestamp"                    gencodec:"required"`
		ExtraData     *bytes.Bytes                   `json:"extraData"                    gencodec:"required" ssz-max:"32"`
		BaseFeePerGas *math.U256L                    `json:"baseFeePerGas" ssz-size:"32"  gencodec:"required"`
		BlockHash     *common.Hash                   `json:"blockHash"     ssz-size:"32"  gencodec:"required"`
		Transactions  []bytes.Bytes                  `json:"transactions"  ssz-size:"?,?" gencodec:"required" ssz-max:"1048576,1073741824"`
		Withdrawals   []*engineprimitives.Withdrawal `json:"withdrawals"                                      ssz-max:"16"`
		BlobGasUsed   *math.U64                      `json:"blobGasUsed"`
		ExcessBlobGas *math.U64                      `json:"excessBlobGas"`
	}
	var dec ExecutionPayload
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for ExecutionPayload")
	}
	e.ParentHash = *dec.ParentHash
	if dec.FeeRecipient == nil {
		return errors.New("missing required field 'feeRecipient' for ExecutionPayload")
	}
	e.FeeRecipient = *dec.FeeRecipient
	if dec.StateRoot == nil {
		return errors.New("missing required field 'stateRoot' for ExecutionPayload")
	}
	e.StateRoot = *dec.StateRoot
	if dec.ReceiptsRoot == nil {
		return errors.New("missing required field 'receiptsRoot' for ExecutionPayload")
	}
	e.ReceiptsRoot = *dec.ReceiptsRoot
	if dec.LogsBloom == nil {
		return errors.New("missing required field 'logsBloom' for ExecutionPayload")
	}
	e.LogsBloom = *dec.LogsBloom
	if dec.Random == nil {
		return errors.New("missing required field 'prevRandao' for ExecutionPayload")
	}
	e.Random = *dec.Random
	if dec.Number == nil {
		return errors.New("missing required field 'blockNumber' for ExecutionPayload")
	}
	e.Number = *dec.Number
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for ExecutionPayload")
	}
	e.GasLimit = *dec.GasLimit
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for ExecutionPayload")
	}
	e.GasUsed = *dec.GasUsed
	if dec.Timestamp == nil {
		return errors.New("missing required field 'timestamp' for ExecutionPayload")
	}
	e.Timestamp = *dec.Timestamp
	if dec.ExtraData == nil {
		return errors.New("missing required field 'extraData' for ExecutionPayload")
	}
	e.ExtraData = *dec.ExtraData
	if dec.BaseFeePerGas == nil {
		return errors.New("missing required field 'baseFeePerGas' for ExecutionPayload")
	}
	e.BaseFeePerGas = *dec.BaseFeePerGas
	if dec.BlockHash == nil {
		return errors.New("missing required field 'blockHash' for ExecutionPayload")
	}
	e.BlockHash = *dec.BlockHash
	if dec.Transactions == nil {
		return errors.New("missing required field 'transactions' for ExecutionPayload")
	}
	e.Transactions = make([][]byte, len(dec.Transactions))
	for k, v := range dec.Transactions {
		e.Transactions[k] = v
	}
	if dec.Withdrawals != nil {
		e.Withdrawals = dec.Withdrawals
	}
	if dec.BlobGasUsed != nil {
		e.BlobGasUsed = *dec.BlobGasUsed
	}
	if dec.ExcessBlobGas != nil {
		e.ExcessBlobGas = *dec.ExcessBlobGas
	}
	return nil
}
