// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	"github.com/ethereum/go-ethereum/common"
)


// MarshalJSON marshals as JSON.
func (e ExecutionPayloadHeader) MarshalJSON() ([]byte, error) {
	type ExecutionPayloadHeader struct {
		ParentHash       common.Hash    `json:"parentHash" gencodec:"required"`
		FeeRecipient     common.Address `json:"feeRecipient" gencodec:"required"`
		StateRoot        bytes.B32      `json:"stateRoot" gencodec:"required"`
		ReceiptsRoot     bytes.B32      `json:"receiptsRoot" gencodec:"required"`
		LogsBloom        bytes.B256     `json:"logsBloom" gencodec:"required"`
		Random           bytes.B32      `json:"prevRandao" gencodec:"required"`
		Number           math.U64       `json:"blockNumber" gencodec:"required"`
		GasLimit         math.U64       `json:"gasLimit" gencodec:"required"`
		GasUsed          math.U64       `json:"gasUsed" gencodec:"required"`
		Timestamp        math.U64       `json:"timestamp" gencodec:"required"`
		ExtraData        bytes.Bytes    `json:"extraData" gencodec:"required"`
		BaseFeePerGas    math.U256L     `json:"baseFeePerGas" gencodec:"required"`
		BlockHash        common.Hash    `json:"blockHash" gencodec:"required"`
		TransactionsRoot bytes.B32      `json:"transactionsRoot" gencodec:"required"`
		WithdrawalsRoot  bytes.B32      `json:"withdrawalsRoot"`
		BlobGasUsed      math.U64       `json:"blobGasUsed"`
		ExcessBlobGas    math.U64       `json:"excessBlobGas"`
	}
	var enc ExecutionPayloadHeader
	enc.ParentHash = e.ParentHash
	enc.FeeRecipient = e.FeeRecipient
	enc.StateRoot = e.StateRoot
	enc.ReceiptsRoot = e.ReceiptsRoot
	enc.LogsBloom = e.LogsBloom
	enc.Random = e.Random
	enc.Number = e.Number
	enc.GasLimit = e.GasLimit
	enc.GasUsed = e.GasUsed
	enc.Timestamp = e.Timestamp
	enc.ExtraData = e.ExtraData
	enc.BaseFeePerGas = e.BaseFeePerGas
	enc.BlockHash = e.BlockHash
	enc.TransactionsRoot = e.TransactionsRoot
	enc.WithdrawalsRoot = e.WithdrawalsRoot
	enc.BlobGasUsed = e.BlobGasUsed
	enc.ExcessBlobGas = e.ExcessBlobGas
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutionPayloadHeader) UnmarshalJSON(input []byte) error {
	type ExecutionPayloadHeader struct {
		ParentHash       *common.Hash    `json:"parentHash" gencodec:"required"`
		FeeRecipient     *common.Address `json:"feeRecipient" gencodec:"required"`
		StateRoot        *bytes.B32      `json:"stateRoot" gencodec:"required"`
		ReceiptsRoot     *bytes.B32      `json:"receiptsRoot" gencodec:"required"`
		LogsBloom        *bytes.B256     `json:"logsBloom" gencodec:"required"`
		Random           *bytes.B32      `json:"prevRandao" gencodec:"required"`
		Number           *math.U64       `json:"blockNumber" gencodec:"required"`
		GasLimit         *math.U64       `json:"gasLimit" gencodec:"required"`
		GasUsed          *math.U64       `json:"gasUsed" gencodec:"required"`
		Timestamp        *math.U64       `json:"timestamp" gencodec:"required"`
		ExtraData        *bytes.Bytes    `json:"extraData" gencodec:"required"`
		BaseFeePerGas    *math.U256L     `json:"baseFeePerGas" gencodec:"required"`
		BlockHash        *common.Hash    `json:"blockHash" gencodec:"required"`
		TransactionsRoot *bytes.B32      `json:"transactionsRoot" gencodec:"required"`
		WithdrawalsRoot  *bytes.B32      `json:"withdrawalsRoot"`
		BlobGasUsed      *math.U64       `json:"blobGasUsed"`
		ExcessBlobGas    *math.U64       `json:"excessBlobGas"`
	}
	var dec ExecutionPayloadHeader
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for ExecutionPayloadHeader")
	}
	e.ParentHash = *dec.ParentHash
	if dec.FeeRecipient == nil {
		return errors.New("missing required field 'feeRecipient' for ExecutionPayloadHeader")
	}
	e.FeeRecipient = *dec.FeeRecipient
	if dec.StateRoot == nil {
		return errors.New("missing required field 'stateRoot' for ExecutionPayloadHeader")
	}
	e.StateRoot = *dec.StateRoot
	if dec.ReceiptsRoot == nil {
		return errors.New("missing required field 'receiptsRoot' for ExecutionPayloadHeader")
	}
	e.ReceiptsRoot = *dec.ReceiptsRoot
	if dec.LogsBloom == nil {
		return errors.New("missing required field 'logsBloom' for ExecutionPayloadHeader")
	}
	e.LogsBloom = *dec.LogsBloom
	if dec.Random == nil {
		return errors.New("missing required field 'prevRandao' for ExecutionPayloadHeader")
	}
	e.Random = *dec.Random
	if dec.Number == nil {
		return errors.New("missing required field 'blockNumber' for ExecutionPayloadHeader")
	}
	e.Number = *dec.Number
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for ExecutionPayloadHeader")
	}
	e.GasLimit = *dec.GasLimit
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for ExecutionPayloadHeader")
	}
	e.GasUsed = *dec.GasUsed
	if dec.Timestamp == nil {
		return errors.New("missing required field 'timestamp' for ExecutionPayloadHeader")
	}
	e.Timestamp = *dec.Timestamp
	if dec.ExtraData == nil {
		return errors.New("missing required field 'extraData' for ExecutionPayloadHeader")
	}

	// TODO: This is required for the API to be symmetric? But it's not really clear if
	// this matters.
	if len(*dec.ExtraData) != 0 {
		e.ExtraData = *dec.ExtraData
	}
	
	if dec.BaseFeePerGas == nil {
		return errors.New("missing required field 'baseFeePerGas' for ExecutionPayloadHeader")
	}
	e.BaseFeePerGas = *dec.BaseFeePerGas
	if dec.BlockHash == nil {
		return errors.New("missing required field 'blockHash' for ExecutionPayloadHeader")
	}
	e.BlockHash = *dec.BlockHash
	if dec.TransactionsRoot == nil {
		return errors.New("missing required field 'transactionsRoot' for ExecutionPayloadHeader")
	}
	e.TransactionsRoot = *dec.TransactionsRoot
	if dec.WithdrawalsRoot != nil {
		e.WithdrawalsRoot = *dec.WithdrawalsRoot
	}
	if dec.BlobGasUsed != nil {
		e.BlobGasUsed = *dec.BlobGasUsed
	}
	if dec.ExcessBlobGas != nil {
		e.ExcessBlobGas = *dec.ExcessBlobGas
	}
	return nil
}
