// Code generated by fastssz. DO NOT EDIT.
// Hash: 125443f7f3462a7611f4db0359c194a180c05c90893efcbb5c0711657607993f
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SlashingInfo object
func (s *SlashingInfo) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SlashingInfo object to a target array
func (s *SlashingInfo) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, s.Slot)

	// Field (1) 'Index'
	dst = ssz.MarshalUint64(dst, s.Index)

	return
}

// UnmarshalSSZ ssz unmarshals the SlashingInfo object
func (s *SlashingInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 16 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	s.Slot = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Index'
	s.Index = ssz.UnmarshallUint64(buf[8:16])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SlashingInfo object
func (s *SlashingInfo) SizeSSZ() (size int) {
	size = 16
	return
}

// HashTreeRoot ssz hashes the SlashingInfo object
func (s *SlashingInfo) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SlashingInfo object with a hasher
func (s *SlashingInfo) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(s.Slot)

	// Field (1) 'Index'
	hh.PutUint64(s.Index)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SlashingInfo object
func (s *SlashingInfo) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
