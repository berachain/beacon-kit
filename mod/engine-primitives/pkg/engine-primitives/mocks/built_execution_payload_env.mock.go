// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"
	mock "github.com/stretchr/testify/mock"

	uint256 "github.com/holiman/uint256"
)

// BuiltExecutionPayloadEnv is an autogenerated mock type for the BuiltExecutionPayloadEnv type
type BuiltExecutionPayloadEnv[ExecutionPayloadT any] struct {
	mock.Mock
}

type BuiltExecutionPayloadEnv_Expecter[ExecutionPayloadT any] struct {
	mock *mock.Mock
}

func (_m *BuiltExecutionPayloadEnv[ExecutionPayloadT]) EXPECT() *BuiltExecutionPayloadEnv_Expecter[ExecutionPayloadT] {
	return &BuiltExecutionPayloadEnv_Expecter[ExecutionPayloadT]{mock: &_m.Mock}
}

// GetBlobsBundle provides a mock function with given fields:
func (_m *BuiltExecutionPayloadEnv[ExecutionPayloadT]) GetBlobsBundle() engineprimitives.BlobsBundle {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobsBundle")
	}

	var r0 engineprimitives.BlobsBundle
	if rf, ok := ret.Get(0).(func() engineprimitives.BlobsBundle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engineprimitives.BlobsBundle)
		}
	}

	return r0
}

// BuiltExecutionPayloadEnv_GetBlobsBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobsBundle'
type BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT any] struct {
	*mock.Call
}

// GetBlobsBundle is a helper method to define mock.On call
func (_e *BuiltExecutionPayloadEnv_Expecter[ExecutionPayloadT]) GetBlobsBundle() *BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT] {
	return &BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT]{Call: _e.mock.On("GetBlobsBundle")}
}

func (_c *BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT]) Run(run func()) *BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT]) Return(_a0 engineprimitives.BlobsBundle) *BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT]) RunAndReturn(run func() engineprimitives.BlobsBundle) *BuiltExecutionPayloadEnv_GetBlobsBundle_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetExecutionPayload provides a mock function with given fields:
func (_m *BuiltExecutionPayloadEnv[ExecutionPayloadT]) GetExecutionPayload() ExecutionPayloadT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionPayload")
	}

	var r0 ExecutionPayloadT
	if rf, ok := ret.Get(0).(func() ExecutionPayloadT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ExecutionPayloadT)
	}

	return r0
}

// BuiltExecutionPayloadEnv_GetExecutionPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionPayload'
type BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT any] struct {
	*mock.Call
}

// GetExecutionPayload is a helper method to define mock.On call
func (_e *BuiltExecutionPayloadEnv_Expecter[ExecutionPayloadT]) GetExecutionPayload() *BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT] {
	return &BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT]{Call: _e.mock.On("GetExecutionPayload")}
}

func (_c *BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT]) Run(run func()) *BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT]) Return(_a0 ExecutionPayloadT) *BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT]) RunAndReturn(run func() ExecutionPayloadT) *BuiltExecutionPayloadEnv_GetExecutionPayload_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetValue provides a mock function with given fields:
func (_m *BuiltExecutionPayloadEnv[ExecutionPayloadT]) GetValue() *uint256.Int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 *uint256.Int
	if rf, ok := ret.Get(0).(func() *uint256.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint256.Int)
		}
	}

	return r0
}

// BuiltExecutionPayloadEnv_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT any] struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
func (_e *BuiltExecutionPayloadEnv_Expecter[ExecutionPayloadT]) GetValue() *BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT] {
	return &BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT]{Call: _e.mock.On("GetValue")}
}

func (_c *BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT]) Run(run func()) *BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT]) Return(_a0 *uint256.Int) *BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT]) RunAndReturn(run func() *uint256.Int) *BuiltExecutionPayloadEnv_GetValue_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// ShouldOverrideBuilder provides a mock function with given fields:
func (_m *BuiltExecutionPayloadEnv[ExecutionPayloadT]) ShouldOverrideBuilder() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShouldOverrideBuilder")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldOverrideBuilder'
type BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT any] struct {
	*mock.Call
}

// ShouldOverrideBuilder is a helper method to define mock.On call
func (_e *BuiltExecutionPayloadEnv_Expecter[ExecutionPayloadT]) ShouldOverrideBuilder() *BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT] {
	return &BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT]{Call: _e.mock.On("ShouldOverrideBuilder")}
}

func (_c *BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT]) Run(run func()) *BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT]) Return(_a0 bool) *BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT]) RunAndReturn(run func() bool) *BuiltExecutionPayloadEnv_ShouldOverrideBuilder_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// NewBuiltExecutionPayloadEnv creates a new instance of BuiltExecutionPayloadEnv. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuiltExecutionPayloadEnv[ExecutionPayloadT any](t interface {
	mock.TestingT
	Cleanup(func())
}) *BuiltExecutionPayloadEnv[ExecutionPayloadT] {
	mock := &BuiltExecutionPayloadEnv[ExecutionPayloadT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
