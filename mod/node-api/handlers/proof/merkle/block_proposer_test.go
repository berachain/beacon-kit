// SPDX-License-Identifier: BUSL-1.1
//
// Copyright (C) 2024, Berachain Foundation. All rights reserved.
// Use of this software is governed by the Business Source License included
// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
//
// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
// VERSIONS OF THE LICENSED WORK.
//
// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
//
// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
// TITLE.

package merkle_test

import (
	"testing"

	cmdtypes "github.com/berachain/beacon-kit/beacond/cmd/types"
	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle"
	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
	"github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"
	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	"github.com/stretchr/testify/require"
)

type mockBeaconState struct {
	val      *types.Validator
	valIndex math.ValidatorIndex
	bsm      *cmdtypes.BeaconStateMarshallable
}

func (*mockBeaconState) GetLatestExecutionPayloadHeader() (
	*types.ExecutionPayloadHeader, error,
) {
	return &types.ExecutionPayloadHeader{}, nil
}

func (m *mockBeaconState) GetMarshallable() (
	*cmdtypes.BeaconStateMarshallable, error,
) {
	return m.bsm, nil
}

func (m *mockBeaconState) ValidatorByIndex(
	index math.ValidatorIndex,
) (*types.Validator, error) {
	if index == m.valIndex {
		return m.val, nil
	}

	return &types.Validator{}, nil
}

// TestProveProposerInBlock tests the ProveProposerInBlock function and
// that the generated proof correctly verifies.
func TestProveProposerInBlock(t *testing.T) {
	var (
		bsm   = &cmdtypes.BeaconStateMarshallable{}
		proof []common.Root
		err   error
	)

	testCases := []struct {
		name            string
		numValidators   int
		slot            math.Slot
		proposerIndex   math.ValidatorIndex
		parentBlockRoot common.Root
		bodyRoot        common.Root
		pubKey          crypto.BLSPubkey
		expectedProof   []common.Root
		expectedError   error
	}{
		{
			name:            "1 Validator Set",
			numValidators:   1,
			slot:            4,
			proposerIndex:   0,
			parentBlockRoot: common.Root{1, 2, 3},
			bodyRoot:        common.Root{3, 2, 1},
			pubKey:          [48]byte{9, 8, 7, 6, 5, 4, 3, 2, 1},
			//nolint:lll // long proof.
			expectedProof: []common.Root{{}, {0xf5, 0xa5, 0xfd, 0x42, 0xd1, 0x6a, 0x20, 0x30, 0x27, 0x98, 0xef, 0x6e, 0xd3, 0x9, 0x97, 0x9b, 0x43, 0x0, 0x3d, 0x23, 0x20, 0xd9, 0xf0, 0xe8, 0xea, 0x98, 0x31, 0xa9, 0x27, 0x59, 0xfb, 0x4b}, {0xdb, 0x56, 0x11, 0x4e, 0x0, 0xfd, 0xd4, 0xc1, 0xf8, 0x5c, 0x89, 0x2b, 0xf3, 0x5a, 0xc9, 0xa8, 0x92, 0x89, 0xaa, 0xec, 0xb1, 0xeb, 0xd0, 0xa9, 0x6c, 0xde, 0x60, 0x6a, 0x74, 0x8b, 0x5d, 0x71}, {}, {0xf5, 0xa5, 0xfd, 0x42, 0xd1, 0x6a, 0x20, 0x30, 0x27, 0x98, 0xef, 0x6e, 0xd3, 0x9, 0x97, 0x9b, 0x43, 0x0, 0x3d, 0x23, 0x20, 0xd9, 0xf0, 0xe8, 0xea, 0x98, 0x31, 0xa9, 0x27, 0x59, 0xfb, 0x4b}, {0xdb, 0x56, 0x11, 0x4e, 0x0, 0xfd, 0xd4, 0xc1, 0xf8, 0x5c, 0x89, 0x2b, 0xf3, 0x5a, 0xc9, 0xa8, 0x92, 0x89, 0xaa, 0xec, 0xb1, 0xeb, 0xd0, 0xa9, 0x6c, 0xde, 0x60, 0x6a, 0x74, 0x8b, 0x5d, 0x71}, {0xc7, 0x80, 0x9, 0xfd, 0xf0, 0x7f, 0xc5, 0x6a, 0x11, 0xf1, 0x22, 0x37, 0x6, 0x58, 0xa3, 0x53, 0xaa, 0xa5, 0x42, 0xed, 0x63, 0xe4, 0x4c, 0x4b, 0xc1, 0x5f, 0xf4, 0xcd, 0x10, 0x5a, 0xb3, 0x3c}, {0x53, 0x6d, 0x98, 0x83, 0x7f, 0x2d, 0xd1, 0x65, 0xa5, 0x5d, 0x5e, 0xea, 0xe9, 0x14, 0x85, 0x95, 0x44, 0x72, 0xd5, 0x6f, 0x24, 0x6d, 0xf2, 0x56, 0xbf, 0x3c, 0xae, 0x19, 0x35, 0x2a, 0x12, 0x3c}, {0x9e, 0xfd, 0xe0, 0x52, 0xaa, 0x15, 0x42, 0x9f, 0xae, 0x5, 0xba, 0xd4, 0xd0, 0xb1, 0xd7, 0xc6, 0x4d, 0xa6, 0x4d, 0x3, 0xd7, 0xa1, 0x85, 0x4a, 0x58, 0x8c, 0x2c, 0xb8, 0x43, 0xc, 0xd, 0x30}, {0xd8, 0x8d, 0xdf, 0xee, 0xd4, 0x0, 0xa8, 0x75, 0x55, 0x96, 0xb2, 0x19, 0x42, 0xc1, 0x49, 0x7e, 0x11, 0x4c, 0x30, 0x2e, 0x61, 0x18, 0x29, 0xf, 0x91, 0xe6, 0x77, 0x29, 0x76, 0x4, 0x1f, 0xa1}, {0x87, 0xeb, 0xd, 0xdb, 0xa5, 0x7e, 0x35, 0xf6, 0xd2, 0x86, 0x67, 0x38, 0x2, 0xa4, 0xaf, 0x59, 0x75, 0xe2, 0x25, 0x6, 0xc7, 0xcf, 0x4c, 0x64, 0xbb, 0x6b, 0xe5, 0xee, 0x11, 0x52, 0x7f, 0x2c}, {0x26, 0x84, 0x64, 0x76, 0xfd, 0x5f, 0xc5, 0x4a, 0x5d, 0x43, 0x38, 0x51, 0x67, 0xc9, 0x51, 0x44, 0xf2, 0x64, 0x3f, 0x53, 0x3c, 0xc8, 0x5b, 0xb9, 0xd1, 0x6b, 0x78, 0x2f, 0x8d, 0x7d, 0xb1, 0x93}, {0x50, 0x6d, 0x86, 0x58, 0x2d, 0x25, 0x24, 0x5, 0xb8, 0x40, 0x1, 0x87, 0x92, 0xca, 0xd2, 0xbf, 0x12, 0x59, 0xf1, 0xef, 0x5a, 0xa5, 0xf8, 0x87, 0xe1, 0x3c, 0xb2, 0xf0, 0x9, 0x4f, 0x51, 0xe1}, {0xff, 0xff, 0xa, 0xd7, 0xe6, 0x59, 0x77, 0x2f, 0x95, 0x34, 0xc1, 0x95, 0xc8, 0x15, 0xef, 0xc4, 0x1, 0x4e, 0xf1, 0xe1, 0xda, 0xed, 0x44, 0x4, 0xc0, 0x63, 0x85, 0xd1, 0x11, 0x92, 0xe9, 0x2b}, {0x6c, 0xf0, 0x41, 0x27, 0xdb, 0x5, 0x44, 0x1c, 0xd8, 0x33, 0x10, 0x7a, 0x52, 0xbe, 0x85, 0x28, 0x68, 0x89, 0xe, 0x43, 0x17, 0xe6, 0xa0, 0x2a, 0xb4, 0x76, 0x83, 0xaa, 0x75, 0x96, 0x42, 0x20}, {0xb7, 0xd0, 0x5f, 0x87, 0x5f, 0x14, 0x0, 0x27, 0xef, 0x51, 0x18, 0xa2, 0x24, 0x7b, 0xbb, 0x84, 0xce, 0x8f, 0x2f, 0xf, 0x11, 0x23, 0x62, 0x30, 0x85, 0xda, 0xf7, 0x96, 0xc, 0x32, 0x9f, 0x5f}, {0xdf, 0x6a, 0xf5, 0xf5, 0xbb, 0xdb, 0x6b, 0xe9, 0xef, 0x8a, 0xa6, 0x18, 0xe4, 0xbf, 0x80, 0x73, 0x96, 0x8, 0x67, 0x17, 0x1e, 0x29, 0x67, 0x6f, 0x8b, 0x28, 0x4d, 0xea, 0x6a, 0x8, 0xa8, 0x5e}, {0xb5, 0x8d, 0x90, 0xf, 0x5e, 0x18, 0x2e, 0x3c, 0x50, 0xef, 0x74, 0x96, 0x9e, 0xa1, 0x6c, 0x77, 0x26, 0xc5, 0x49, 0x75, 0x7c, 0xc2, 0x35, 0x23, 0xc3, 0x69, 0x58, 0x7d, 0xa7, 0x29, 0x37, 0x84}, {0xd4, 0x9a, 0x75, 0x2, 0xff, 0xcf, 0xb0, 0x34, 0xb, 0x1d, 0x78, 0x85, 0x68, 0x85, 0x0, 0xca, 0x30, 0x81, 0x61, 0xa7, 0xf9, 0x6b, 0x62, 0xdf, 0x9d, 0x8, 0x3b, 0x71, 0xfc, 0xc8, 0xf2, 0xbb}, {0x8f, 0xe6, 0xb1, 0x68, 0x92, 0x56, 0xc0, 0xd3, 0x85, 0xf4, 0x2f, 0x5b, 0xbe, 0x20, 0x27, 0xa2, 0x2c, 0x19, 0x96, 0xe1, 0x10, 0xba, 0x97, 0xc1, 0x71, 0xd3, 0xe5, 0x94, 0x8d, 0xe9, 0x2b, 0xeb}, {0x8d, 0xd, 0x63, 0xc3, 0x9e, 0xba, 0xde, 0x85, 0x9, 0xe0, 0xae, 0x3c, 0x9c, 0x38, 0x76, 0xfb, 0x5f, 0xa1, 0x12, 0xbe, 0x18, 0xf9, 0x5, 0xec, 0xac, 0xfe, 0xcb, 0x92, 0x5, 0x76, 0x3, 0xab}, {0x95, 0xee, 0xc8, 0xb2, 0xe5, 0x41, 0xca, 0xd4, 0xe9, 0x1d, 0xe3, 0x83, 0x85, 0xf2, 0xe0, 0x46, 0x61, 0x9f, 0x54, 0x49, 0x6c, 0x23, 0x82, 0xcb, 0x6c, 0xac, 0xd5, 0xb9, 0x8c, 0x26, 0xf5, 0xa4}, {0xf8, 0x93, 0xe9, 0x8, 0x91, 0x77, 0x75, 0xb6, 0x2b, 0xff, 0x23, 0x29, 0x4d, 0xbb, 0xe3, 0xa1, 0xcd, 0x8e, 0x6c, 0xc1, 0xc3, 0x5b, 0x48, 0x1, 0x88, 0x7b, 0x64, 0x6a, 0x6f, 0x81, 0xf1, 0x7f}, {0xcd, 0xdb, 0xa7, 0xb5, 0x92, 0xe3, 0x13, 0x33, 0x93, 0xc1, 0x61, 0x94, 0xfa, 0xc7, 0x43, 0x1a, 0xbf, 0x2f, 0x54, 0x85, 0xed, 0x71, 0x1d, 0xb2, 0x82, 0x18, 0x3c, 0x81, 0x9e, 0x8, 0xeb, 0xaa}, {0x8a, 0x8d, 0x7f, 0xe3, 0xaf, 0x8c, 0xaa, 0x8, 0x5a, 0x76, 0x39, 0xa8, 0x32, 0x0, 0x14, 0x57, 0xdf, 0xb9, 0x12, 0x8a, 0x80, 0x61, 0x14, 0x2a, 0xd0, 0x33, 0x56, 0x29, 0xff, 0x23, 0xff, 0x9c}, {0xfe, 0xb3, 0xc3, 0x37, 0xd7, 0xa5, 0x1a, 0x6f, 0xbf, 0x0, 0xb9, 0xe3, 0x4c, 0x52, 0xe1, 0xc9, 0x19, 0x5c, 0x96, 0x9b, 0xd4, 0xe7, 0xa0, 0xbf, 0xd5, 0x1d, 0x5c, 0x5b, 0xed, 0x9c, 0x11, 0x67}, {0xe7, 0x1f, 0xa, 0xa8, 0x3c, 0xc3, 0x2e, 0xdf, 0xbe, 0xfa, 0x9f, 0x4d, 0x3e, 0x1, 0x74, 0xca, 0x85, 0x18, 0x2e, 0xec, 0x9f, 0x3a, 0x9, 0xf6, 0xa6, 0xc0, 0xdf, 0x63, 0x77, 0xa5, 0x10, 0xd7}, {0x31, 0x20, 0x6f, 0xa8, 0xa, 0x50, 0xbb, 0x6a, 0xbe, 0x29, 0x8, 0x50, 0x58, 0xf1, 0x62, 0x12, 0x21, 0x2a, 0x60, 0xee, 0xc8, 0xf0, 0x49, 0xfe, 0xcb, 0x92, 0xd8, 0xc8, 0xe0, 0xa8, 0x4b, 0xc0}, {0x21, 0x35, 0x2b, 0xfe, 0xcb, 0xed, 0xdd, 0xe9, 0x93, 0x83, 0x9f, 0x61, 0x4c, 0x3d, 0xac, 0xa, 0x3e, 0xe3, 0x75, 0x43, 0xf9, 0xb4, 0x12, 0xb1, 0x61, 0x99, 0xdc, 0x15, 0x8e, 0x23, 0xb5, 0x44}, {0x61, 0x9e, 0x31, 0x27, 0x24, 0xbb, 0x6d, 0x7c, 0x31, 0x53, 0xed, 0x9d, 0xe7, 0x91, 0xd7, 0x64, 0xa3, 0x66, 0xb3, 0x89, 0xaf, 0x13, 0xc5, 0x8b, 0xf8, 0xa8, 0xd9, 0x4, 0x81, 0xa4, 0x67, 0x65}, {0x7c, 0xdd, 0x29, 0x86, 0x26, 0x82, 0x50, 0x62, 0x8d, 0xc, 0x10, 0xe3, 0x85, 0xc5, 0x8c, 0x61, 0x91, 0xe6, 0xfb, 0xe0, 0x51, 0x91, 0xbc, 0xc0, 0x4f, 0x13, 0x3f, 0x2c, 0xea, 0x72, 0xc1, 0xc4}, {0x84, 0x89, 0x30, 0xbd, 0x7b, 0xa8, 0xca, 0xc5, 0x46, 0x61, 0x7, 0x21, 0x13, 0xfb, 0x27, 0x88, 0x69, 0xe0, 0x7b, 0xb8, 0x58, 0x7f, 0x91, 0x39, 0x29, 0x33, 0x37, 0x4d, 0x1, 0x7b, 0xcb, 0xe1}, {0x88, 0x69, 0xff, 0x2c, 0x22, 0xb2, 0x8c, 0xc1, 0x5, 0x10, 0xd9, 0x85, 0x32, 0x92, 0x80, 0x33, 0x28, 0xbe, 0x4f, 0xb0, 0xe8, 0x4, 0x95, 0xe8, 0xbb, 0x8d, 0x27, 0x1f, 0x5b, 0x88, 0x96, 0x36}, {0xb5, 0xfe, 0x28, 0xe7, 0x9f, 0x1b, 0x85, 0xf, 0x86, 0x58, 0x24, 0x6c, 0xe9, 0xb6, 0xa1, 0xe7, 0xb4, 0x9f, 0xc0, 0x6d, 0xb7, 0x14, 0x3e, 0x8f, 0xe0, 0xb4, 0xf2, 0xb0, 0xc5, 0x52, 0x3a, 0x5c}, {0x98, 0x5e, 0x92, 0x9f, 0x70, 0xaf, 0x28, 0xd0, 0xbd, 0xd1, 0xa9, 0xa, 0x80, 0x8f, 0x97, 0x7f, 0x59, 0x7c, 0x7c, 0x77, 0x8c, 0x48, 0x9e, 0x98, 0xd3, 0xbd, 0x89, 0x10, 0xd3, 0x1a, 0xc0, 0xf7}, {0xc6, 0xf6, 0x7e, 0x2, 0xe6, 0xe4, 0xe1, 0xbd, 0xef, 0xb9, 0x94, 0xc6, 0x9, 0x89, 0x53, 0xf3, 0x46, 0x36, 0xba, 0x2b, 0x6c, 0xa2, 0xa, 0x47, 0x21, 0xd2, 0xb2, 0x6a, 0x88, 0x67, 0x22, 0xff}, {0x1c, 0x9a, 0x7e, 0x5f, 0xf1, 0xcf, 0x48, 0xb4, 0xad, 0x15, 0x82, 0xd3, 0xf4, 0xe4, 0xa1, 0x0, 0x4f, 0x3b, 0x20, 0xd8, 0xc5, 0xa2, 0xb7, 0x13, 0x87, 0xa4, 0x25, 0x4a, 0xd9, 0x33, 0xeb, 0xc5}, {0x2f, 0x7, 0x5a, 0xe2, 0x29, 0x64, 0x6b, 0x6f, 0x6a, 0xed, 0x19, 0xa5, 0xe3, 0x72, 0xcf, 0x29, 0x50, 0x81, 0x40, 0x1e, 0xb8, 0x93, 0xff, 0x59, 0x9b, 0x3f, 0x9a, 0xcc, 0xc, 0xd, 0x3e, 0x7d}, {0x32, 0x89, 0x21, 0xde, 0xb5, 0x96, 0x12, 0x7, 0x68, 0x1, 0xe8, 0xcd, 0x61, 0x59, 0x21, 0x7, 0xb5, 0xc6, 0x7c, 0x79, 0xb8, 0x46, 0x59, 0x5c, 0xc6, 0x32, 0xc, 0x39, 0x5b, 0x46, 0x36, 0x2c}, {0xbf, 0xb9, 0x9, 0xfd, 0xb2, 0x36, 0xad, 0x24, 0x11, 0xb4, 0xe4, 0x88, 0x38, 0x10, 0xa0, 0x74, 0xb8, 0x40, 0x46, 0x46, 0x89, 0x98, 0x6c, 0x3f, 0x8a, 0x80, 0x91, 0x82, 0x7e, 0x17, 0xc3, 0x27}, {0x55, 0xd8, 0xfb, 0x36, 0x87, 0xba, 0x3b, 0xa4, 0x9f, 0x34, 0x2c, 0x77, 0xf5, 0xa1, 0xf8, 0x9b, 0xec, 0x83, 0xd8, 0x11, 0x44, 0x6e, 0x1a, 0x46, 0x71, 0x39, 0x21, 0x3d, 0x64, 0xb, 0x6a, 0x74}, {0xf7, 0x21, 0xd, 0x4f, 0x8e, 0x7e, 0x10, 0x39, 0x79, 0xe, 0x7b, 0xf4, 0xef, 0xa2, 0x7, 0x55, 0x5a, 0x10, 0xa6, 0xdb, 0x1d, 0xd4, 0xb9, 0x5d, 0xa3, 0x13, 0xaa, 0xa8, 0x8b, 0x88, 0xfe, 0x76}, {0xad, 0x21, 0xb5, 0x16, 0xcb, 0xc6, 0x45, 0xff, 0xe3, 0x4a, 0xb5, 0xde, 0x1c, 0x8a, 0xef, 0x8c, 0xd4, 0xe7, 0xf8, 0xd2, 0xb5, 0x1e, 0x8e, 0x14, 0x56, 0xad, 0xc7, 0x56, 0x3c, 0xda, 0x20, 0x6f}, {0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x54, 0xb4, 0xb8, 0xb8, 0x97, 0x92, 0x9a, 0x1e, 0xde, 0x97, 0xd2, 0x9e, 0x95, 0x51, 0xd6, 0x10, 0x22, 0x9f, 0x22, 0xc1, 0xa5, 0x9d, 0x18, 0x6d, 0x95, 0xae, 0xd2, 0x3, 0x33, 0x3b, 0x4e, 0x5e}, {0x40, 0x19, 0x70, 0x8b, 0x8a, 0x44, 0x2b, 0xe, 0x6f, 0xc8, 0x8b, 0x65, 0x31, 0xe2, 0x42, 0x8, 0x11, 0xd4, 0x83, 0x3d, 0xb8, 0xe8, 0x62, 0xd7, 0x5a, 0x65, 0x50, 0x16, 0x95, 0xaf, 0xed, 0x1c}, {0x1b, 0x8a, 0xfb, 0xf6, 0xf0, 0x3, 0x4f, 0x93, 0x9f, 0xc, 0xfc, 0x6e, 0x3b, 0x3, 0x36, 0x26, 0x31, 0xbd, 0xce, 0x35, 0xa4, 0x3b, 0x65, 0xcb, 0xb8, 0xf7, 0x32, 0xfa, 0x8, 0x37, 0x3b, 0x69}, {0xda, 0x5a, 0x83, 0xfd, 0xae, 0x29, 0x74, 0x41, 0x6e, 0x89, 0x1f, 0x26, 0x8f, 0x5d, 0x29, 0xd4, 0x5f, 0x7, 0x1b, 0xb4, 0x14, 0x30, 0x4b, 0xdf, 0xf4, 0x6a, 0xaa, 0xa0, 0x7a, 0x74, 0x3, 0xcb}, {0x1, 0x2, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0xd6, 0xe4, 0x97, 0xb8, 0x16, 0xc2, 0x7a, 0x31, 0xac, 0xd5, 0xd9, 0xf3, 0xed, 0x67, 0x6, 0x39, 0xfe, 0xf7, 0x84, 0x2f, 0xee, 0x51, 0xf0, 0x44, 0xdf, 0xbf, 0xb6, 0x31, 0x9c, 0x76, 0xa, 0x5f}, {0x7b, 0x85, 0xfe, 0x2a, 0x9a, 0xfa, 0xb5, 0x1d, 0xcc, 0xa1, 0x2b, 0x22, 0x4e, 0x10, 0xbf, 0x25, 0xe6, 0xcb, 0x1c, 0xb9, 0x9a, 0xc5, 0xd2, 0x4b, 0xe8, 0xa5, 0x5f, 0xac, 0x86, 0x2b, 0x6c, 0x90}},
		},
		{
			name:            "Many Validator Set",
			numValidators:   100,
			slot:            5,
			proposerIndex:   95,
			parentBlockRoot: common.Root{1, 2, 3, 4, 5, 6},
			bodyRoot:        common.Root{3, 2, 1, 9, 8, 7},
			pubKey:          [48]byte{9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2},
			//nolint:lll // long proof.
			expectedProof: []common.Root{{}, {0xf5, 0xa5, 0xfd, 0x42, 0xd1, 0x6a, 0x20, 0x30, 0x27, 0x98, 0xef, 0x6e, 0xd3, 0x9, 0x97, 0x9b, 0x43, 0x0, 0x3d, 0x23, 0x20, 0xd9, 0xf0, 0xe8, 0xea, 0x98, 0x31, 0xa9, 0x27, 0x59, 0xfb, 0x4b}, {0xdb, 0x56, 0x11, 0x4e, 0x0, 0xfd, 0xd4, 0xc1, 0xf8, 0x5c, 0x89, 0x2b, 0xf3, 0x5a, 0xc9, 0xa8, 0x92, 0x89, 0xaa, 0xec, 0xb1, 0xeb, 0xd0, 0xa9, 0x6c, 0xde, 0x60, 0x6a, 0x74, 0x8b, 0x5d, 0x71}, {0xfa, 0x32, 0x4a, 0x46, 0x2b, 0xcb, 0xf, 0x10, 0xc2, 0x4c, 0x9e, 0x17, 0xc3, 0x26, 0xa4, 0xe0, 0xeb, 0xad, 0x20, 0x4f, 0xec, 0xed, 0x52, 0x3e, 0xcc, 0xaf, 0x34, 0x6c, 0x68, 0x6f, 0x6, 0xee}, {0x4b, 0x71, 0x98, 0x5b, 0x48, 0xd4, 0xd2, 0x71, 0x59, 0xfb, 0x95, 0x34, 0x94, 0xfe, 0xef, 0x9e, 0x7e, 0xeb, 0xa7, 0x5f, 0x5a, 0xcd, 0x2d, 0x3, 0xb1, 0xc3, 0x6, 0xa1, 0x86, 0xd0, 0x53, 0x7c}, {0x11, 0x74, 0x2, 0x81, 0x86, 0x5e, 0x8d, 0x78, 0x4f, 0x81, 0xfc, 0x4d, 0xe6, 0x5e, 0x85, 0xe3, 0x8a, 0x6a, 0xad, 0xd4, 0x98, 0x35, 0x86, 0xff, 0xef, 0xf9, 0x9d, 0x32, 0x64, 0x39, 0xa8, 0x34}, {0xb5, 0xd7, 0xf6, 0xbe, 0x4d, 0x62, 0xc1, 0x7c, 0x85, 0xaa, 0xd6, 0x66, 0x91, 0xb3, 0xc8, 0xa8, 0xab, 0x3e, 0xfe, 0x43, 0x5, 0xc5, 0xc4, 0xd0, 0x9a, 0x58, 0xc4, 0xfc, 0xe6, 0x99, 0xb1, 0x91}, {0xcb, 0xa7, 0x6b, 0xf, 0xd6, 0xed, 0xcf, 0xd2, 0xc7, 0x4f, 0x60, 0x20, 0xfa, 0x3a, 0x24, 0x9f, 0x27, 0xf0, 0x7d, 0xc, 0x96, 0x23, 0x7d, 0x58, 0x26, 0xf5, 0xc5, 0xdd, 0xdf, 0x87, 0xd2, 0xfc}, {0x2, 0x46, 0xb, 0x6e, 0xa6, 0x5b, 0x13, 0x1, 0x7a, 0x2b, 0x5d, 0xcd, 0x11, 0xe5, 0xb6, 0x15, 0xb1, 0x2d, 0xa4, 0x8e, 0x98, 0xa, 0xc5, 0x5b, 0x1b, 0xc1, 0xfb, 0xbd, 0x7b, 0xde, 0x8d, 0x63}, {0x5d, 0x91, 0xc7, 0x49, 0x46, 0x1f, 0x8, 0xb, 0x40, 0x70, 0xa, 0x41, 0xb1, 0x46, 0x89, 0x44, 0xbb, 0x58, 0xfa, 0x69, 0xff, 0xe0, 0xc2, 0x4a, 0xf2, 0x2, 0xce, 0xfb, 0x90, 0x3b, 0x9f, 0x6f}, {0x87, 0xeb, 0xd, 0xdb, 0xa5, 0x7e, 0x35, 0xf6, 0xd2, 0x86, 0x67, 0x38, 0x2, 0xa4, 0xaf, 0x59, 0x75, 0xe2, 0x25, 0x6, 0xc7, 0xcf, 0x4c, 0x64, 0xbb, 0x6b, 0xe5, 0xee, 0x11, 0x52, 0x7f, 0x2c}, {0x26, 0x84, 0x64, 0x76, 0xfd, 0x5f, 0xc5, 0x4a, 0x5d, 0x43, 0x38, 0x51, 0x67, 0xc9, 0x51, 0x44, 0xf2, 0x64, 0x3f, 0x53, 0x3c, 0xc8, 0x5b, 0xb9, 0xd1, 0x6b, 0x78, 0x2f, 0x8d, 0x7d, 0xb1, 0x93}, {0x50, 0x6d, 0x86, 0x58, 0x2d, 0x25, 0x24, 0x5, 0xb8, 0x40, 0x1, 0x87, 0x92, 0xca, 0xd2, 0xbf, 0x12, 0x59, 0xf1, 0xef, 0x5a, 0xa5, 0xf8, 0x87, 0xe1, 0x3c, 0xb2, 0xf0, 0x9, 0x4f, 0x51, 0xe1}, {0xff, 0xff, 0xa, 0xd7, 0xe6, 0x59, 0x77, 0x2f, 0x95, 0x34, 0xc1, 0x95, 0xc8, 0x15, 0xef, 0xc4, 0x1, 0x4e, 0xf1, 0xe1, 0xda, 0xed, 0x44, 0x4, 0xc0, 0x63, 0x85, 0xd1, 0x11, 0x92, 0xe9, 0x2b}, {0x6c, 0xf0, 0x41, 0x27, 0xdb, 0x5, 0x44, 0x1c, 0xd8, 0x33, 0x10, 0x7a, 0x52, 0xbe, 0x85, 0x28, 0x68, 0x89, 0xe, 0x43, 0x17, 0xe6, 0xa0, 0x2a, 0xb4, 0x76, 0x83, 0xaa, 0x75, 0x96, 0x42, 0x20}, {0xb7, 0xd0, 0x5f, 0x87, 0x5f, 0x14, 0x0, 0x27, 0xef, 0x51, 0x18, 0xa2, 0x24, 0x7b, 0xbb, 0x84, 0xce, 0x8f, 0x2f, 0xf, 0x11, 0x23, 0x62, 0x30, 0x85, 0xda, 0xf7, 0x96, 0xc, 0x32, 0x9f, 0x5f}, {0xdf, 0x6a, 0xf5, 0xf5, 0xbb, 0xdb, 0x6b, 0xe9, 0xef, 0x8a, 0xa6, 0x18, 0xe4, 0xbf, 0x80, 0x73, 0x96, 0x8, 0x67, 0x17, 0x1e, 0x29, 0x67, 0x6f, 0x8b, 0x28, 0x4d, 0xea, 0x6a, 0x8, 0xa8, 0x5e}, {0xb5, 0x8d, 0x90, 0xf, 0x5e, 0x18, 0x2e, 0x3c, 0x50, 0xef, 0x74, 0x96, 0x9e, 0xa1, 0x6c, 0x77, 0x26, 0xc5, 0x49, 0x75, 0x7c, 0xc2, 0x35, 0x23, 0xc3, 0x69, 0x58, 0x7d, 0xa7, 0x29, 0x37, 0x84}, {0xd4, 0x9a, 0x75, 0x2, 0xff, 0xcf, 0xb0, 0x34, 0xb, 0x1d, 0x78, 0x85, 0x68, 0x85, 0x0, 0xca, 0x30, 0x81, 0x61, 0xa7, 0xf9, 0x6b, 0x62, 0xdf, 0x9d, 0x8, 0x3b, 0x71, 0xfc, 0xc8, 0xf2, 0xbb}, {0x8f, 0xe6, 0xb1, 0x68, 0x92, 0x56, 0xc0, 0xd3, 0x85, 0xf4, 0x2f, 0x5b, 0xbe, 0x20, 0x27, 0xa2, 0x2c, 0x19, 0x96, 0xe1, 0x10, 0xba, 0x97, 0xc1, 0x71, 0xd3, 0xe5, 0x94, 0x8d, 0xe9, 0x2b, 0xeb}, {0x8d, 0xd, 0x63, 0xc3, 0x9e, 0xba, 0xde, 0x85, 0x9, 0xe0, 0xae, 0x3c, 0x9c, 0x38, 0x76, 0xfb, 0x5f, 0xa1, 0x12, 0xbe, 0x18, 0xf9, 0x5, 0xec, 0xac, 0xfe, 0xcb, 0x92, 0x5, 0x76, 0x3, 0xab}, {0x95, 0xee, 0xc8, 0xb2, 0xe5, 0x41, 0xca, 0xd4, 0xe9, 0x1d, 0xe3, 0x83, 0x85, 0xf2, 0xe0, 0x46, 0x61, 0x9f, 0x54, 0x49, 0x6c, 0x23, 0x82, 0xcb, 0x6c, 0xac, 0xd5, 0xb9, 0x8c, 0x26, 0xf5, 0xa4}, {0xf8, 0x93, 0xe9, 0x8, 0x91, 0x77, 0x75, 0xb6, 0x2b, 0xff, 0x23, 0x29, 0x4d, 0xbb, 0xe3, 0xa1, 0xcd, 0x8e, 0x6c, 0xc1, 0xc3, 0x5b, 0x48, 0x1, 0x88, 0x7b, 0x64, 0x6a, 0x6f, 0x81, 0xf1, 0x7f}, {0xcd, 0xdb, 0xa7, 0xb5, 0x92, 0xe3, 0x13, 0x33, 0x93, 0xc1, 0x61, 0x94, 0xfa, 0xc7, 0x43, 0x1a, 0xbf, 0x2f, 0x54, 0x85, 0xed, 0x71, 0x1d, 0xb2, 0x82, 0x18, 0x3c, 0x81, 0x9e, 0x8, 0xeb, 0xaa}, {0x8a, 0x8d, 0x7f, 0xe3, 0xaf, 0x8c, 0xaa, 0x8, 0x5a, 0x76, 0x39, 0xa8, 0x32, 0x0, 0x14, 0x57, 0xdf, 0xb9, 0x12, 0x8a, 0x80, 0x61, 0x14, 0x2a, 0xd0, 0x33, 0x56, 0x29, 0xff, 0x23, 0xff, 0x9c}, {0xfe, 0xb3, 0xc3, 0x37, 0xd7, 0xa5, 0x1a, 0x6f, 0xbf, 0x0, 0xb9, 0xe3, 0x4c, 0x52, 0xe1, 0xc9, 0x19, 0x5c, 0x96, 0x9b, 0xd4, 0xe7, 0xa0, 0xbf, 0xd5, 0x1d, 0x5c, 0x5b, 0xed, 0x9c, 0x11, 0x67}, {0xe7, 0x1f, 0xa, 0xa8, 0x3c, 0xc3, 0x2e, 0xdf, 0xbe, 0xfa, 0x9f, 0x4d, 0x3e, 0x1, 0x74, 0xca, 0x85, 0x18, 0x2e, 0xec, 0x9f, 0x3a, 0x9, 0xf6, 0xa6, 0xc0, 0xdf, 0x63, 0x77, 0xa5, 0x10, 0xd7}, {0x31, 0x20, 0x6f, 0xa8, 0xa, 0x50, 0xbb, 0x6a, 0xbe, 0x29, 0x8, 0x50, 0x58, 0xf1, 0x62, 0x12, 0x21, 0x2a, 0x60, 0xee, 0xc8, 0xf0, 0x49, 0xfe, 0xcb, 0x92, 0xd8, 0xc8, 0xe0, 0xa8, 0x4b, 0xc0}, {0x21, 0x35, 0x2b, 0xfe, 0xcb, 0xed, 0xdd, 0xe9, 0x93, 0x83, 0x9f, 0x61, 0x4c, 0x3d, 0xac, 0xa, 0x3e, 0xe3, 0x75, 0x43, 0xf9, 0xb4, 0x12, 0xb1, 0x61, 0x99, 0xdc, 0x15, 0x8e, 0x23, 0xb5, 0x44}, {0x61, 0x9e, 0x31, 0x27, 0x24, 0xbb, 0x6d, 0x7c, 0x31, 0x53, 0xed, 0x9d, 0xe7, 0x91, 0xd7, 0x64, 0xa3, 0x66, 0xb3, 0x89, 0xaf, 0x13, 0xc5, 0x8b, 0xf8, 0xa8, 0xd9, 0x4, 0x81, 0xa4, 0x67, 0x65}, {0x7c, 0xdd, 0x29, 0x86, 0x26, 0x82, 0x50, 0x62, 0x8d, 0xc, 0x10, 0xe3, 0x85, 0xc5, 0x8c, 0x61, 0x91, 0xe6, 0xfb, 0xe0, 0x51, 0x91, 0xbc, 0xc0, 0x4f, 0x13, 0x3f, 0x2c, 0xea, 0x72, 0xc1, 0xc4}, {0x84, 0x89, 0x30, 0xbd, 0x7b, 0xa8, 0xca, 0xc5, 0x46, 0x61, 0x7, 0x21, 0x13, 0xfb, 0x27, 0x88, 0x69, 0xe0, 0x7b, 0xb8, 0x58, 0x7f, 0x91, 0x39, 0x29, 0x33, 0x37, 0x4d, 0x1, 0x7b, 0xcb, 0xe1}, {0x88, 0x69, 0xff, 0x2c, 0x22, 0xb2, 0x8c, 0xc1, 0x5, 0x10, 0xd9, 0x85, 0x32, 0x92, 0x80, 0x33, 0x28, 0xbe, 0x4f, 0xb0, 0xe8, 0x4, 0x95, 0xe8, 0xbb, 0x8d, 0x27, 0x1f, 0x5b, 0x88, 0x96, 0x36}, {0xb5, 0xfe, 0x28, 0xe7, 0x9f, 0x1b, 0x85, 0xf, 0x86, 0x58, 0x24, 0x6c, 0xe9, 0xb6, 0xa1, 0xe7, 0xb4, 0x9f, 0xc0, 0x6d, 0xb7, 0x14, 0x3e, 0x8f, 0xe0, 0xb4, 0xf2, 0xb0, 0xc5, 0x52, 0x3a, 0x5c}, {0x98, 0x5e, 0x92, 0x9f, 0x70, 0xaf, 0x28, 0xd0, 0xbd, 0xd1, 0xa9, 0xa, 0x80, 0x8f, 0x97, 0x7f, 0x59, 0x7c, 0x7c, 0x77, 0x8c, 0x48, 0x9e, 0x98, 0xd3, 0xbd, 0x89, 0x10, 0xd3, 0x1a, 0xc0, 0xf7}, {0xc6, 0xf6, 0x7e, 0x2, 0xe6, 0xe4, 0xe1, 0xbd, 0xef, 0xb9, 0x94, 0xc6, 0x9, 0x89, 0x53, 0xf3, 0x46, 0x36, 0xba, 0x2b, 0x6c, 0xa2, 0xa, 0x47, 0x21, 0xd2, 0xb2, 0x6a, 0x88, 0x67, 0x22, 0xff}, {0x1c, 0x9a, 0x7e, 0x5f, 0xf1, 0xcf, 0x48, 0xb4, 0xad, 0x15, 0x82, 0xd3, 0xf4, 0xe4, 0xa1, 0x0, 0x4f, 0x3b, 0x20, 0xd8, 0xc5, 0xa2, 0xb7, 0x13, 0x87, 0xa4, 0x25, 0x4a, 0xd9, 0x33, 0xeb, 0xc5}, {0x2f, 0x7, 0x5a, 0xe2, 0x29, 0x64, 0x6b, 0x6f, 0x6a, 0xed, 0x19, 0xa5, 0xe3, 0x72, 0xcf, 0x29, 0x50, 0x81, 0x40, 0x1e, 0xb8, 0x93, 0xff, 0x59, 0x9b, 0x3f, 0x9a, 0xcc, 0xc, 0xd, 0x3e, 0x7d}, {0x32, 0x89, 0x21, 0xde, 0xb5, 0x96, 0x12, 0x7, 0x68, 0x1, 0xe8, 0xcd, 0x61, 0x59, 0x21, 0x7, 0xb5, 0xc6, 0x7c, 0x79, 0xb8, 0x46, 0x59, 0x5c, 0xc6, 0x32, 0xc, 0x39, 0x5b, 0x46, 0x36, 0x2c}, {0xbf, 0xb9, 0x9, 0xfd, 0xb2, 0x36, 0xad, 0x24, 0x11, 0xb4, 0xe4, 0x88, 0x38, 0x10, 0xa0, 0x74, 0xb8, 0x40, 0x46, 0x46, 0x89, 0x98, 0x6c, 0x3f, 0x8a, 0x80, 0x91, 0x82, 0x7e, 0x17, 0xc3, 0x27}, {0x55, 0xd8, 0xfb, 0x36, 0x87, 0xba, 0x3b, 0xa4, 0x9f, 0x34, 0x2c, 0x77, 0xf5, 0xa1, 0xf8, 0x9b, 0xec, 0x83, 0xd8, 0x11, 0x44, 0x6e, 0x1a, 0x46, 0x71, 0x39, 0x21, 0x3d, 0x64, 0xb, 0x6a, 0x74}, {0xf7, 0x21, 0xd, 0x4f, 0x8e, 0x7e, 0x10, 0x39, 0x79, 0xe, 0x7b, 0xf4, 0xef, 0xa2, 0x7, 0x55, 0x5a, 0x10, 0xa6, 0xdb, 0x1d, 0xd4, 0xb9, 0x5d, 0xa3, 0x13, 0xaa, 0xa8, 0x8b, 0x88, 0xfe, 0x76}, {0xad, 0x21, 0xb5, 0x16, 0xcb, 0xc6, 0x45, 0xff, 0xe3, 0x4a, 0xb5, 0xde, 0x1c, 0x8a, 0xef, 0x8c, 0xd4, 0xe7, 0xf8, 0xd2, 0xb5, 0x1e, 0x8e, 0x14, 0x56, 0xad, 0xc7, 0x56, 0x3c, 0xda, 0x20, 0x6f}, {0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x54, 0xb4, 0xb8, 0xb8, 0x97, 0x92, 0x9a, 0x1e, 0xde, 0x97, 0xd2, 0x9e, 0x95, 0x51, 0xd6, 0x10, 0x22, 0x9f, 0x22, 0xc1, 0xa5, 0x9d, 0x18, 0x6d, 0x95, 0xae, 0xd2, 0x3, 0x33, 0x3b, 0x4e, 0x5e}, {0x40, 0x19, 0x70, 0x8b, 0x8a, 0x44, 0x2b, 0xe, 0x6f, 0xc8, 0x8b, 0x65, 0x31, 0xe2, 0x42, 0x8, 0x11, 0xd4, 0x83, 0x3d, 0xb8, 0xe8, 0x62, 0xd7, 0x5a, 0x65, 0x50, 0x16, 0x95, 0xaf, 0xed, 0x1c}, {0x1b, 0x8a, 0xfb, 0xf6, 0xf0, 0x3, 0x4f, 0x93, 0x9f, 0xc, 0xfc, 0x6e, 0x3b, 0x3, 0x36, 0x26, 0x31, 0xbd, 0xce, 0x35, 0xa4, 0x3b, 0x65, 0xcb, 0xb8, 0xf7, 0x32, 0xfa, 0x8, 0x37, 0x3b, 0x69}, {0x70, 0xcc, 0xda, 0xe9, 0xa0, 0x6c, 0xda, 0x39, 0xd9, 0x3e, 0xba, 0x92, 0xe2, 0x69, 0x2b, 0xec, 0x14, 0x7a, 0x29, 0xef, 0x7e, 0x31, 0xad, 0x9f, 0x4b, 0xeb, 0xb3, 0x47, 0x79, 0x2d, 0x92, 0x4}, {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0xe3, 0x8c, 0x57, 0x36, 0x41, 0xa3, 0x69, 0xb4, 0x9f, 0x1e, 0x77, 0x4, 0x35, 0x62, 0xc3, 0xb6, 0xb3, 0x93, 0x2c, 0x2c, 0xce, 0x7f, 0xcd, 0x4d, 0x71, 0xd4, 0x94, 0xb4, 0xb8, 0xd0, 0x80, 0x12}, {0xa3, 0xdf, 0xa, 0xcb, 0xb, 0x3d, 0x50, 0xf9, 0xb7, 0xf5, 0x69, 0xff, 0xb4, 0x40, 0xf3, 0xa5, 0x89, 0x1a, 0x27, 0x23, 0xa3, 0x5b, 0xd8, 0x25, 0xd6, 0xcf, 0x27, 0x12, 0x98, 0xe6, 0x16, 0xb6}},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			vals := make(types.Validators, tc.numValidators)
			for i := range vals {
				vals[i] = &types.Validator{}
			}
			vals[tc.proposerIndex] = &types.Validator{Pubkey: tc.pubKey}

			bsm, err = bsm.New(
				0,
				common.Root{},
				tc.slot,
				(&types.Fork{}).Empty(),
				(&types.BeaconBlockHeader{}).Empty(),
				[]common.Root{},
				[]common.Root{},
				(&types.Eth1Data{}).Empty(),
				0,
				(&types.ExecutionPayloadHeader{}).Empty(),
				vals,
				[]uint64{},
				[]common.Bytes32{},
				0,
				0,
				[]uint64{},
				0,
			)
			require.NoError(t, err)

			bbh := (&types.BeaconBlockHeader{}).New(
				tc.slot,
				tc.proposerIndex,
				tc.parentBlockRoot,
				bsm.HashTreeRoot(),
				tc.bodyRoot,
			)
			bs := &mockBeaconState{
				val:      vals[tc.proposerIndex],
				valIndex: tc.proposerIndex,
				bsm:      bsm,
			}
			proof, _, err = merkle.ProveProposerInBlock(bbh, bs)
			require.NoError(t, err)
			require.Equal(t, tc.expectedProof, proof)
		})
	}
}
