// SPDX-License-Identifier: BUSL-1.1
//
// Copyright (C) 2024, Berachain Foundation. All rights reserved.
// Use of this software is governed by the Business Source License included
// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
//
// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
// VERSIONS OF THE LICENSED WORK.
//
// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
//
// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
// TITLE.

package merkle_test

import (
	"testing"

	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle"
	"github.com/berachain/beacon-kit/mod/node-api/handlers/proof/merkle/mock"
	"github.com/berachain/beacon-kit/mod/primitives/pkg/common"
	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	"github.com/stretchr/testify/require"
)

// TestProveExecutionNumber tests the ProveExecutionNumberInBlock
// function and that the generated proof correctly verifies.
func TestProveExecutionNumber(t *testing.T) {
	var proof []common.Root

	testCases := []struct {
		name            string
		slot            math.Slot
		proposerIndex   math.ValidatorIndex
		parentBlockRoot common.Root
		bodyRoot        common.Root
		executionNumber math.U64
		expectedProof   []common.Root
	}{
		{
			name:            "Empty Execution Number",
			slot:            4,
			proposerIndex:   0,
			parentBlockRoot: common.Root{1, 2, 3},
			bodyRoot:        common.Root{3, 2, 1},
			executionNumber: 0,
			//nolint:lll // long proof.
			expectedProof: []common.Root{{}, {0xe8, 0xe5, 0x27, 0xe8, 0x4f, 0x66, 0x61, 0x63, 0xa9, 0xe, 0xf9, 0x0, 0xe0, 0x13, 0xf5, 0x6b, 0xa, 0x4d, 0x2, 0x1, 0x48, 0xb2, 0x22, 0x40, 0x57, 0xb7, 0x19, 0xf3, 0x51, 0xb0, 0x3, 0xa6}, {0xdb, 0x56, 0x11, 0x4e, 0x0, 0xfd, 0xd4, 0xc1, 0xf8, 0x5c, 0x89, 0x2b, 0xf3, 0x5a, 0xc9, 0xa8, 0x92, 0x89, 0xaa, 0xec, 0xb1, 0xeb, 0xd0, 0xa9, 0x6c, 0xde, 0x60, 0x6a, 0x74, 0x8b, 0x5d, 0x71}, {0xaa, 0x5a, 0xcb, 0x4, 0x47, 0x2b, 0x5d, 0x18, 0x9b, 0x75, 0x4c, 0xc2, 0xb8, 0x2b, 0x44, 0x20, 0xe5, 0xf7, 0x7a, 0xed, 0x70, 0x59, 0xb0, 0x69, 0xbc, 0xf5, 0xef, 0xe, 0x3a, 0xd6, 0xd6, 0x4d}, {0x53, 0x6d, 0x98, 0x83, 0x7f, 0x2d, 0xd1, 0x65, 0xa5, 0x5d, 0x5e, 0xea, 0xe9, 0x14, 0x85, 0x95, 0x44, 0x72, 0xd5, 0x6f, 0x24, 0x6d, 0xf2, 0x56, 0xbf, 0x3c, 0xae, 0x19, 0x35, 0x2a, 0x12, 0x3c}, {0xea, 0x56, 0x9b, 0xcb, 0x4f, 0xbb, 0x2e, 0xd2, 0x6d, 0x30, 0xe9, 0x97, 0xd7, 0x33, 0x7e, 0x7e, 0x12, 0xa4, 0x3a, 0xc1, 0x15, 0x79, 0x3e, 0x9c, 0xbe, 0x25, 0xda, 0x40, 0x1f, 0xcb, 0xb7, 0x25}, {0x40, 0x19, 0x70, 0x8b, 0x8a, 0x44, 0x2b, 0xe, 0x6f, 0xc8, 0x8b, 0x65, 0x31, 0xe2, 0x42, 0x8, 0x11, 0xd4, 0x83, 0x3d, 0xb8, 0xe8, 0x62, 0xd7, 0x5a, 0x65, 0x50, 0x16, 0x95, 0xaf, 0xed, 0x1c}, {0x1b, 0x8a, 0xfb, 0xf6, 0xf0, 0x3, 0x4f, 0x93, 0x9f, 0xc, 0xfc, 0x6e, 0x3b, 0x3, 0x36, 0x26, 0x31, 0xbd, 0xce, 0x35, 0xa4, 0x3b, 0x65, 0xcb, 0xb8, 0xf7, 0x32, 0xfa, 0x8, 0x37, 0x3b, 0x69}, {0xda, 0x5a, 0x83, 0xfd, 0xae, 0x29, 0x74, 0x41, 0x6e, 0x89, 0x1f, 0x26, 0x8f, 0x5d, 0x29, 0xd4, 0x5f, 0x7, 0x1b, 0xb4, 0x14, 0x30, 0x4b, 0xdf, 0xf4, 0x6a, 0xaa, 0xa0, 0x7a, 0x74, 0x3, 0xcb}, {0x1, 0x2, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0xd6, 0xe4, 0x97, 0xb8, 0x16, 0xc2, 0x7a, 0x31, 0xac, 0xd5, 0xd9, 0xf3, 0xed, 0x67, 0x6, 0x39, 0xfe, 0xf7, 0x84, 0x2f, 0xee, 0x51, 0xf0, 0x44, 0xdf, 0xbf, 0xb6, 0x31, 0x9c, 0x76, 0xa, 0x5f}, {0x7b, 0x85, 0xfe, 0x2a, 0x9a, 0xfa, 0xb5, 0x1d, 0xcc, 0xa1, 0x2b, 0x22, 0x4e, 0x10, 0xbf, 0x25, 0xe6, 0xcb, 0x1c, 0xb9, 0x9a, 0xc5, 0xd2, 0x4b, 0xe8, 0xa5, 0x5f, 0xac, 0x86, 0x2b, 0x6c, 0x90}},
		},
		{
			name:            "Non-empty Execution Number",
			slot:            5,
			proposerIndex:   95,
			parentBlockRoot: common.Root{1, 2, 3, 4, 5, 6},
			bodyRoot:        common.Root{3, 2, 1, 9, 8, 7},
			executionNumber: 69420,
			//nolint:lll // long proof.
			expectedProof: []common.Root{{}, {0xe8, 0xe5, 0x27, 0xe8, 0x4f, 0x66, 0x61, 0x63, 0xa9, 0xe, 0xf9, 0x0, 0xe0, 0x13, 0xf5, 0x6b, 0xa, 0x4d, 0x2, 0x1, 0x48, 0xb2, 0x22, 0x40, 0x57, 0xb7, 0x19, 0xf3, 0x51, 0xb0, 0x3, 0xa6}, {0xdb, 0x56, 0x11, 0x4e, 0x0, 0xfd, 0xd4, 0xc1, 0xf8, 0x5c, 0x89, 0x2b, 0xf3, 0x5a, 0xc9, 0xa8, 0x92, 0x89, 0xaa, 0xec, 0xb1, 0xeb, 0xd0, 0xa9, 0x6c, 0xde, 0x60, 0x6a, 0x74, 0x8b, 0x5d, 0x71}, {0xaa, 0x5a, 0xcb, 0x4, 0x47, 0x2b, 0x5d, 0x18, 0x9b, 0x75, 0x4c, 0xc2, 0xb8, 0x2b, 0x44, 0x20, 0xe5, 0xf7, 0x7a, 0xed, 0x70, 0x59, 0xb0, 0x69, 0xbc, 0xf5, 0xef, 0xe, 0x3a, 0xd6, 0xd6, 0x4d}, {0x53, 0x6d, 0x98, 0x83, 0x7f, 0x2d, 0xd1, 0x65, 0xa5, 0x5d, 0x5e, 0xea, 0xe9, 0x14, 0x85, 0x95, 0x44, 0x72, 0xd5, 0x6f, 0x24, 0x6d, 0xf2, 0x56, 0xbf, 0x3c, 0xae, 0x19, 0x35, 0x2a, 0x12, 0x3c}, {0xea, 0x56, 0x9b, 0xcb, 0x4f, 0xbb, 0x2e, 0xd2, 0x6d, 0x30, 0xe9, 0x97, 0xd7, 0x33, 0x7e, 0x7e, 0x12, 0xa4, 0x3a, 0xc1, 0x15, 0x79, 0x3e, 0x9c, 0xbe, 0x25, 0xda, 0x40, 0x1f, 0xcb, 0xb7, 0x25}, {0x40, 0x19, 0x70, 0x8b, 0x8a, 0x44, 0x2b, 0xe, 0x6f, 0xc8, 0x8b, 0x65, 0x31, 0xe2, 0x42, 0x8, 0x11, 0xd4, 0x83, 0x3d, 0xb8, 0xe8, 0x62, 0xd7, 0x5a, 0x65, 0x50, 0x16, 0x95, 0xaf, 0xed, 0x1c}, {0x1b, 0x8a, 0xfb, 0xf6, 0xf0, 0x3, 0x4f, 0x93, 0x9f, 0xc, 0xfc, 0x6e, 0x3b, 0x3, 0x36, 0x26, 0x31, 0xbd, 0xce, 0x35, 0xa4, 0x3b, 0x65, 0xcb, 0xb8, 0xf7, 0x32, 0xfa, 0x8, 0x37, 0x3b, 0x69}, {0x70, 0xcc, 0xda, 0xe9, 0xa0, 0x6c, 0xda, 0x39, 0xd9, 0x3e, 0xba, 0x92, 0xe2, 0x69, 0x2b, 0xec, 0x14, 0x7a, 0x29, 0xef, 0x7e, 0x31, 0xad, 0x9f, 0x4b, 0xeb, 0xb3, 0x47, 0x79, 0x2d, 0x92, 0x4}, {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0xe3, 0x8c, 0x57, 0x36, 0x41, 0xa3, 0x69, 0xb4, 0x9f, 0x1e, 0x77, 0x4, 0x35, 0x62, 0xc3, 0xb6, 0xb3, 0x93, 0x2c, 0x2c, 0xce, 0x7f, 0xcd, 0x4d, 0x71, 0xd4, 0x94, 0xb4, 0xb8, 0xd0, 0x80, 0x12}, {0xa3, 0xdf, 0xa, 0xcb, 0xb, 0x3d, 0x50, 0xf9, 0xb7, 0xf5, 0x69, 0xff, 0xb4, 0x40, 0xf3, 0xa5, 0x89, 0x1a, 0x27, 0x23, 0xa3, 0x5b, 0xd8, 0x25, 0xd6, 0xcf, 0x27, 0x12, 0x98, 0xe6, 0x16, 0xb6}},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			bs, err := mock.NewBeaconState(
				tc.slot, nil, tc.executionNumber, common.ExecutionAddress{},
			)
			require.NoError(t, err)

			bbh := (&types.BeaconBlockHeader{}).New(
				tc.slot,
				tc.proposerIndex,
				tc.parentBlockRoot,
				bs.HashTreeRoot(),
				tc.bodyRoot,
			)

			proof, _, err = merkle.ProveExecutionNumberInBlock(bbh, bs)
			require.NoError(t, err)
			require.Equal(t, tc.expectedProof, proof)
		})
	}
}
