// Code generated by fastssz. DO NOT EDIT.
// Hash: af0c09cbb632e1dcd173e649cfc391bb9273218e7481374d8eb1b03756c7340c
// Version: 0.1.3
package types

import (
	"github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BeaconBlockForValidator object
func (b *BeaconBlockForValidator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconBlockForValidator object to a target array
func (b *BeaconBlockForValidator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(84)

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(b.Slot))

	// Field (1) 'ProposerIndex'
	dst = ssz.MarshalUint64(dst, uint64(b.ProposerIndex))

	// Field (2) 'ParentBlockRoot'
	dst = append(dst, b.ParentBlockRoot[:]...)

	// Offset (3) 'StateRoot'
	dst = ssz.WriteOffset(dst, offset)

	// Field (4) 'BodyRoot'
	dst = append(dst, b.BodyRoot[:]...)

	// Field (3) 'StateRoot'
	if dst, err = b.StateRoot.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconBlockForValidator object
func (b *BeaconBlockForValidator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 84 {
		return ssz.ErrSize
	}

	tail := buf
	var o3 uint64

	// Field (0) 'Slot'
	b.Slot = math.Slot(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'ProposerIndex'
	b.ProposerIndex = math.ValidatorIndex(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'ParentBlockRoot'
	copy(b.ParentBlockRoot[:], buf[16:48])

	// Offset (3) 'StateRoot'
	if o3 = ssz.ReadOffset(buf[48:52]); o3 > size {
		return ssz.ErrOffset
	}

	if o3 < 84 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (4) 'BodyRoot'
	copy(b.BodyRoot[:], buf[52:84])

	// Field (3) 'StateRoot'
	{
		buf = tail[o3:]
		if b.StateRoot == nil {
			b.StateRoot = new(BeaconStateForValidator)
		}
		if err = b.StateRoot.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconBlockForValidator object
func (b *BeaconBlockForValidator) SizeSSZ() (size int) {
	size = 84

	// Field (3) 'StateRoot'
	if b.StateRoot == nil {
		b.StateRoot = new(BeaconStateForValidator)
	}
	size += b.StateRoot.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the BeaconBlockForValidator object
func (b *BeaconBlockForValidator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconBlockForValidator object with a hasher
func (b *BeaconBlockForValidator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(uint64(b.Slot))

	// Field (1) 'ProposerIndex'
	hh.PutUint64(uint64(b.ProposerIndex))

	// Field (2) 'ParentBlockRoot'
	hh.PutBytes(b.ParentBlockRoot[:])

	// Field (3) 'StateRoot'
	if err = b.StateRoot.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'BodyRoot'
	hh.PutBytes(b.BodyRoot[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BeaconBlockForValidator object
func (b *BeaconBlockForValidator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}

// MarshalSSZ ssz marshals the BeaconStateForValidator object
func (b *BeaconStateForValidator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconStateForValidator object to a target array
func (b *BeaconStateForValidator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(364)

	// Field (0) 'GenesisValidatorsRoot'
	dst = append(dst, b.GenesisValidatorsRoot[:]...)

	// Field (1) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(b.Slot))

	// Field (2) 'Fork'
	dst = append(dst, b.Fork[:]...)

	// Field (3) 'LatestBlockHeader'
	dst = append(dst, b.LatestBlockHeader[:]...)

	// Field (4) 'BlockRoots'
	dst = append(dst, b.BlockRoots[:]...)

	// Field (5) 'StateRoots'
	dst = append(dst, b.StateRoots[:]...)

	// Field (6) 'Eth1Data'
	dst = append(dst, b.Eth1Data[:]...)

	// Field (7) 'Eth1DepositIndex'
	dst = ssz.MarshalUint64(dst, b.Eth1DepositIndex)

	// Field (8) 'LatestExecutionPayloadHeader'
	dst = append(dst, b.LatestExecutionPayloadHeader[:]...)

	// Offset (9) 'Validators'
	dst = ssz.WriteOffset(dst, offset)

	// Field (10) 'Balances'
	dst = append(dst, b.Balances[:]...)

	// Field (11) 'RandaoMixes'
	dst = append(dst, b.RandaoMixes[:]...)

	// Field (12) 'NextWithdrawalIndex'
	dst = ssz.MarshalUint64(dst, b.NextWithdrawalIndex)

	// Field (13) 'NextWithdrawalValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(b.NextWithdrawalValidatorIndex))

	// Field (14) 'Slashings'
	dst = append(dst, b.Slashings[:]...)

	// Field (15) 'TotalSlashing'
	dst = ssz.MarshalUint64(dst, uint64(b.TotalSlashing))

	// Field (9) 'Validators'
	if size := len(b.Validators); size > 1099511627776 {
		err = ssz.ErrListTooBigFn("BeaconStateForValidator.Validators", size, 1099511627776)
		return
	}
	for ii := 0; ii < len(b.Validators); ii++ {
		if dst, err = b.Validators[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconStateForValidator object
func (b *BeaconStateForValidator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 364 {
		return ssz.ErrSize
	}

	tail := buf
	var o9 uint64

	// Field (0) 'GenesisValidatorsRoot'
	copy(b.GenesisValidatorsRoot[:], buf[0:32])

	// Field (1) 'Slot'
	b.Slot = math.Slot(ssz.UnmarshallUint64(buf[32:40]))

	// Field (2) 'Fork'
	copy(b.Fork[:], buf[40:72])

	// Field (3) 'LatestBlockHeader'
	copy(b.LatestBlockHeader[:], buf[72:104])

	// Field (4) 'BlockRoots'
	copy(b.BlockRoots[:], buf[104:136])

	// Field (5) 'StateRoots'
	copy(b.StateRoots[:], buf[136:168])

	// Field (6) 'Eth1Data'
	copy(b.Eth1Data[:], buf[168:200])

	// Field (7) 'Eth1DepositIndex'
	b.Eth1DepositIndex = ssz.UnmarshallUint64(buf[200:208])

	// Field (8) 'LatestExecutionPayloadHeader'
	copy(b.LatestExecutionPayloadHeader[:], buf[208:240])

	// Offset (9) 'Validators'
	if o9 = ssz.ReadOffset(buf[240:244]); o9 > size {
		return ssz.ErrOffset
	}

	if o9 < 364 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (10) 'Balances'
	copy(b.Balances[:], buf[244:276])

	// Field (11) 'RandaoMixes'
	copy(b.RandaoMixes[:], buf[276:308])

	// Field (12) 'NextWithdrawalIndex'
	b.NextWithdrawalIndex = ssz.UnmarshallUint64(buf[308:316])

	// Field (13) 'NextWithdrawalValidatorIndex'
	b.NextWithdrawalValidatorIndex = math.ValidatorIndex(ssz.UnmarshallUint64(buf[316:324]))

	// Field (14) 'Slashings'
	copy(b.Slashings[:], buf[324:356])

	// Field (15) 'TotalSlashing'
	b.TotalSlashing = math.Gwei(ssz.UnmarshallUint64(buf[356:364]))

	// Field (9) 'Validators'
	{
		buf = tail[o9:]
		num, err := ssz.DivideInt2(len(buf), 121, 1099511627776)
		if err != nil {
			return err
		}
		b.Validators = make([]*types.Validator, num)
		for ii := 0; ii < num; ii++ {
			if b.Validators[ii] == nil {
				b.Validators[ii] = new(types.Validator)
			}
			if err = b.Validators[ii].UnmarshalSSZ(buf[ii*121 : (ii+1)*121]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconStateForValidator object
func (b *BeaconStateForValidator) SizeSSZ() (size int) {
	size = 364

	// Field (9) 'Validators'
	size += len(b.Validators) * 121

	return
}

// HashTreeRoot ssz hashes the BeaconStateForValidator object
func (b *BeaconStateForValidator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconStateForValidator object with a hasher
func (b *BeaconStateForValidator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'GenesisValidatorsRoot'
	hh.PutBytes(b.GenesisValidatorsRoot[:])

	// Field (1) 'Slot'
	hh.PutUint64(uint64(b.Slot))

	// Field (2) 'Fork'
	hh.PutBytes(b.Fork[:])

	// Field (3) 'LatestBlockHeader'
	hh.PutBytes(b.LatestBlockHeader[:])

	// Field (4) 'BlockRoots'
	hh.PutBytes(b.BlockRoots[:])

	// Field (5) 'StateRoots'
	hh.PutBytes(b.StateRoots[:])

	// Field (6) 'Eth1Data'
	hh.PutBytes(b.Eth1Data[:])

	// Field (7) 'Eth1DepositIndex'
	hh.PutUint64(b.Eth1DepositIndex)

	// Field (8) 'LatestExecutionPayloadHeader'
	hh.PutBytes(b.LatestExecutionPayloadHeader[:])

	// Field (9) 'Validators'
	{
		subIndx := hh.Index()
		num := uint64(len(b.Validators))
		if num > 1099511627776 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.Validators {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1099511627776)
	}

	// Field (10) 'Balances'
	hh.PutBytes(b.Balances[:])

	// Field (11) 'RandaoMixes'
	hh.PutBytes(b.RandaoMixes[:])

	// Field (12) 'NextWithdrawalIndex'
	hh.PutUint64(b.NextWithdrawalIndex)

	// Field (13) 'NextWithdrawalValidatorIndex'
	hh.PutUint64(uint64(b.NextWithdrawalValidatorIndex))

	// Field (14) 'Slashings'
	hh.PutBytes(b.Slashings[:])

	// Field (15) 'TotalSlashing'
	hh.PutUint64(uint64(b.TotalSlashing))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BeaconStateForValidator object
func (b *BeaconStateForValidator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
