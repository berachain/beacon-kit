// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// HashFn is an autogenerated mock type for the HashFn type
type HashFn struct {
	mock.Mock
}

type HashFn_Expecter struct {
	mock *mock.Mock
}

func (_m *HashFn) EXPECT() *HashFn_Expecter {
	return &HashFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: input
func (_m *HashFn) Execute(input []byte) [32]byte {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 [32]byte
	if rf, ok := ret.Get(0).(func([]byte) [32]byte); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	return r0
}

// HashFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type HashFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - input []byte
func (_e *HashFn_Expecter) Execute(input interface{}) *HashFn_Execute_Call {
	return &HashFn_Execute_Call{Call: _e.mock.On("Execute", input)}
}

func (_c *HashFn_Execute_Call) Run(run func(input []byte)) *HashFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *HashFn_Execute_Call) Return(_a0 [32]byte) *HashFn_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashFn_Execute_Call) RunAndReturn(run func([]byte) [32]byte) *HashFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewHashFn creates a new instance of HashFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashFn {
	mock := &HashFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
