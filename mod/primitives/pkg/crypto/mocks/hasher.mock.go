// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hasher is an autogenerated mock type for the Hasher type
type Hasher[T interface{ ~[32]byte }] struct {
	mock.Mock
}

type Hasher_Expecter[T interface{ ~[32]byte }] struct {
	mock *mock.Mock
}

func (_m *Hasher[T]) EXPECT() *Hasher_Expecter[T] {
	return &Hasher_Expecter[T]{mock: &_m.Mock}
}

// Combi provides a mock function with given fields: a, b
func (_m *Hasher[T]) Combi(a T, b T) T {
	ret := _m.Called(a, b)

	if len(ret) == 0 {
		panic("no return value specified for Combi")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(T, T) T); ok {
		r0 = rf(a, b)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// Hasher_Combi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Combi'
type Hasher_Combi_Call[T interface{ ~[32]byte }] struct {
	*mock.Call
}

// Combi is a helper method to define mock.On call
//   - a T
//   - b T
func (_e *Hasher_Expecter[T]) Combi(a interface{}, b interface{}) *Hasher_Combi_Call[T] {
	return &Hasher_Combi_Call[T]{Call: _e.mock.On("Combi", a, b)}
}

func (_c *Hasher_Combi_Call[T]) Run(run func(a T, b T)) *Hasher_Combi_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T), args[1].(T))
	})
	return _c
}

func (_c *Hasher_Combi_Call[T]) Return(_a0 T) *Hasher_Combi_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Hasher_Combi_Call[T]) RunAndReturn(run func(T, T) T) *Hasher_Combi_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with given fields: a
func (_m *Hasher[T]) Hash(a []byte) T {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func([]byte) T); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// Hasher_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type Hasher_Hash_Call[T interface{ ~[32]byte }] struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - a []byte
func (_e *Hasher_Expecter[T]) Hash(a interface{}) *Hasher_Hash_Call[T] {
	return &Hasher_Hash_Call[T]{Call: _e.mock.On("Hash", a)}
}

func (_c *Hasher_Hash_Call[T]) Run(run func(a []byte)) *Hasher_Hash_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Hasher_Hash_Call[T]) Return(_a0 T) *Hasher_Hash_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Hasher_Hash_Call[T]) RunAndReturn(run func([]byte) T) *Hasher_Hash_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MixIn provides a mock function with given fields: a, i
func (_m *Hasher[T]) MixIn(a T, i uint64) T {
	ret := _m.Called(a, i)

	if len(ret) == 0 {
		panic("no return value specified for MixIn")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(T, uint64) T); ok {
		r0 = rf(a, i)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// Hasher_MixIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MixIn'
type Hasher_MixIn_Call[T interface{ ~[32]byte }] struct {
	*mock.Call
}

// MixIn is a helper method to define mock.On call
//   - a T
//   - i uint64
func (_e *Hasher_Expecter[T]) MixIn(a interface{}, i interface{}) *Hasher_MixIn_Call[T] {
	return &Hasher_MixIn_Call[T]{Call: _e.mock.On("MixIn", a, i)}
}

func (_c *Hasher_MixIn_Call[T]) Run(run func(a T, i uint64)) *Hasher_MixIn_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T), args[1].(uint64))
	})
	return _c
}

func (_c *Hasher_MixIn_Call[T]) Return(_a0 T) *Hasher_MixIn_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Hasher_MixIn_Call[T]) RunAndReturn(run func(T, uint64) T) *Hasher_MixIn_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewHasher creates a new instance of Hasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHasher[T interface{ ~[32]byte }](t interface {
	mock.TestingT
	Cleanup(func())
}) *Hasher[T] {
	mock := &Hasher[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
