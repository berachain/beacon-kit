// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	datypes "github.com/berachain/beacon-kit/da/types"
	math "github.com/berachain/beacon-kit/primitives/math"
	mock "github.com/stretchr/testify/mock"
)

// AvailabilityStore is an autogenerated mock type for the AvailabilityStore type
type AvailabilityStore struct {
	mock.Mock
}

type AvailabilityStore_Expecter struct {
	mock *mock.Mock
}

func (_m *AvailabilityStore) EXPECT() *AvailabilityStore_Expecter {
	return &AvailabilityStore_Expecter{mock: &_m.Mock}
}

// IsDataAvailable provides a mock function with given fields: _a0, _a1
func (_m *AvailabilityStore) IsDataAvailable(_a0 context.Context, _a1 math.U64) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IsDataAvailable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, math.U64) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AvailabilityStore_IsDataAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDataAvailable'
type AvailabilityStore_IsDataAvailable_Call struct {
	*mock.Call
}

// IsDataAvailable is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 math.U64
func (_e *AvailabilityStore_Expecter) IsDataAvailable(_a0 interface{}, _a1 interface{}) *AvailabilityStore_IsDataAvailable_Call {
	return &AvailabilityStore_IsDataAvailable_Call{Call: _e.mock.On("IsDataAvailable", _a0, _a1)}
}

func (_c *AvailabilityStore_IsDataAvailable_Call) Run(run func(_a0 context.Context, _a1 math.U64)) *AvailabilityStore_IsDataAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(math.U64))
	})
	return _c
}

func (_c *AvailabilityStore_IsDataAvailable_Call) Return(_a0 bool) *AvailabilityStore_IsDataAvailable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AvailabilityStore_IsDataAvailable_Call) RunAndReturn(run func(context.Context, math.U64) bool) *AvailabilityStore_IsDataAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// Persist provides a mock function with given fields: _a0, _a1
func (_m *AvailabilityStore) Persist(_a0 math.U64, _a1 datypes.BlobSidecars) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Persist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64, datypes.BlobSidecars) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AvailabilityStore_Persist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persist'
type AvailabilityStore_Persist_Call struct {
	*mock.Call
}

// Persist is a helper method to define mock.On call
//   - _a0 math.U64
//   - _a1 datypes.BlobSidecars
func (_e *AvailabilityStore_Expecter) Persist(_a0 interface{}, _a1 interface{}) *AvailabilityStore_Persist_Call {
	return &AvailabilityStore_Persist_Call{Call: _e.mock.On("Persist", _a0, _a1)}
}

func (_c *AvailabilityStore_Persist_Call) Run(run func(_a0 math.U64, _a1 datypes.BlobSidecars)) *AvailabilityStore_Persist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(datypes.BlobSidecars))
	})
	return _c
}

func (_c *AvailabilityStore_Persist_Call) Return(_a0 error) *AvailabilityStore_Persist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AvailabilityStore_Persist_Call) RunAndReturn(run func(math.U64, datypes.BlobSidecars) error) *AvailabilityStore_Persist_Call {
	_c.Call.Return(run)
	return _c
}

// NewAvailabilityStore creates a new instance of AvailabilityStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAvailabilityStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *AvailabilityStore {
	mock := &AvailabilityStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
