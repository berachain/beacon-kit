// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/primitives/bytes"
	common "github.com/berachain/beacon-kit/primitives/common"

	engineprimitives "github.com/berachain/beacon-kit/engine-primitives/engine-primitives"

	math "github.com/berachain/beacon-kit/primitives/math"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/consensus-types/types"
)

// BeaconState is an autogenerated mock type for the BeaconState type
type BeaconState struct {
	mock.Mock
}

type BeaconState_Expecter struct {
	mock *mock.Mock
}

func (_m *BeaconState) EXPECT() *BeaconState_Expecter {
	return &BeaconState_Expecter{mock: &_m.Mock}
}

// AddValidator provides a mock function with given fields: _a0
func (_m *BeaconState) AddValidator(_a0 *types.Validator) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Validator) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_AddValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddValidator'
type BeaconState_AddValidator_Call struct {
	*mock.Call
}

// AddValidator is a helper method to define mock.On call
//   - _a0 *types.Validator
func (_e *BeaconState_Expecter) AddValidator(_a0 interface{}) *BeaconState_AddValidator_Call {
	return &BeaconState_AddValidator_Call{Call: _e.mock.On("AddValidator", _a0)}
}

func (_c *BeaconState_AddValidator_Call) Run(run func(_a0 *types.Validator)) *BeaconState_AddValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Validator))
	})
	return _c
}

func (_c *BeaconState_AddValidator_Call) Return(_a0 error) *BeaconState_AddValidator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_AddValidator_Call) RunAndReturn(run func(*types.Validator) error) *BeaconState_AddValidator_Call {
	_c.Call.Return(run)
	return _c
}

// DecreaseBalance provides a mock function with given fields: _a0, _a1
func (_m *BeaconState) DecreaseBalance(_a0 math.U64, _a1 math.U64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DecreaseBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64, math.U64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_DecreaseBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecreaseBalance'
type BeaconState_DecreaseBalance_Call struct {
	*mock.Call
}

// DecreaseBalance is a helper method to define mock.On call
//   - _a0 math.U64
//   - _a1 math.U64
func (_e *BeaconState_Expecter) DecreaseBalance(_a0 interface{}, _a1 interface{}) *BeaconState_DecreaseBalance_Call {
	return &BeaconState_DecreaseBalance_Call{Call: _e.mock.On("DecreaseBalance", _a0, _a1)}
}

func (_c *BeaconState_DecreaseBalance_Call) Run(run func(_a0 math.U64, _a1 math.U64)) *BeaconState_DecreaseBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(math.U64))
	})
	return _c
}

func (_c *BeaconState_DecreaseBalance_Call) Return(_a0 error) *BeaconState_DecreaseBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_DecreaseBalance_Call) RunAndReturn(run func(math.U64, math.U64) error) *BeaconState_DecreaseBalance_Call {
	_c.Call.Return(run)
	return _c
}

// EVMInflationWithdrawal provides a mock function with given fields: _a0
func (_m *BeaconState) EVMInflationWithdrawal(_a0 math.U64) *engineprimitives.Withdrawal {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EVMInflationWithdrawal")
	}

	var r0 *engineprimitives.Withdrawal
	if rf, ok := ret.Get(0).(func(math.U64) *engineprimitives.Withdrawal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*engineprimitives.Withdrawal)
		}
	}

	return r0
}

// BeaconState_EVMInflationWithdrawal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVMInflationWithdrawal'
type BeaconState_EVMInflationWithdrawal_Call struct {
	*mock.Call
}

// EVMInflationWithdrawal is a helper method to define mock.On call
//   - _a0 math.U64
func (_e *BeaconState_Expecter) EVMInflationWithdrawal(_a0 interface{}) *BeaconState_EVMInflationWithdrawal_Call {
	return &BeaconState_EVMInflationWithdrawal_Call{Call: _e.mock.On("EVMInflationWithdrawal", _a0)}
}

func (_c *BeaconState_EVMInflationWithdrawal_Call) Run(run func(_a0 math.U64)) *BeaconState_EVMInflationWithdrawal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *BeaconState_EVMInflationWithdrawal_Call) Return(_a0 *engineprimitives.Withdrawal) *BeaconState_EVMInflationWithdrawal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_EVMInflationWithdrawal_Call) RunAndReturn(run func(math.U64) *engineprimitives.Withdrawal) *BeaconState_EVMInflationWithdrawal_Call {
	_c.Call.Return(run)
	return _c
}

// ExpectedWithdrawals provides a mock function with no fields
func (_m *BeaconState) ExpectedWithdrawals() (engineprimitives.Withdrawals, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExpectedWithdrawals")
	}

	var r0 engineprimitives.Withdrawals
	var r1 error
	if rf, ok := ret.Get(0).(func() (engineprimitives.Withdrawals, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() engineprimitives.Withdrawals); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engineprimitives.Withdrawals)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_ExpectedWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectedWithdrawals'
type BeaconState_ExpectedWithdrawals_Call struct {
	*mock.Call
}

// ExpectedWithdrawals is a helper method to define mock.On call
func (_e *BeaconState_Expecter) ExpectedWithdrawals() *BeaconState_ExpectedWithdrawals_Call {
	return &BeaconState_ExpectedWithdrawals_Call{Call: _e.mock.On("ExpectedWithdrawals")}
}

func (_c *BeaconState_ExpectedWithdrawals_Call) Run(run func()) *BeaconState_ExpectedWithdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_ExpectedWithdrawals_Call) Return(_a0 engineprimitives.Withdrawals, _a1 error) *BeaconState_ExpectedWithdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_ExpectedWithdrawals_Call) RunAndReturn(run func() (engineprimitives.Withdrawals, error)) *BeaconState_ExpectedWithdrawals_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: _a0
func (_m *BeaconState) GetBalance(_a0 math.U64) (math.U64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(math.U64) (math.U64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(math.U64) math.U64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(math.U64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type BeaconState_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - _a0 math.U64
func (_e *BeaconState_Expecter) GetBalance(_a0 interface{}) *BeaconState_GetBalance_Call {
	return &BeaconState_GetBalance_Call{Call: _e.mock.On("GetBalance", _a0)}
}

func (_c *BeaconState_GetBalance_Call) Run(run func(_a0 math.U64)) *BeaconState_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *BeaconState_GetBalance_Call) Return(_a0 math.U64, _a1 error) *BeaconState_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetBalance_Call) RunAndReturn(run func(math.U64) (math.U64, error)) *BeaconState_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockRootAtIndex provides a mock function with given fields: _a0
func (_m *BeaconState) GetBlockRootAtIndex(_a0 uint64) (common.Root, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockRootAtIndex")
	}

	var r0 common.Root
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (common.Root, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) common.Root); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetBlockRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockRootAtIndex'
type BeaconState_GetBlockRootAtIndex_Call struct {
	*mock.Call
}

// GetBlockRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter) GetBlockRootAtIndex(_a0 interface{}) *BeaconState_GetBlockRootAtIndex_Call {
	return &BeaconState_GetBlockRootAtIndex_Call{Call: _e.mock.On("GetBlockRootAtIndex", _a0)}
}

func (_c *BeaconState_GetBlockRootAtIndex_Call) Run(run func(_a0 uint64)) *BeaconState_GetBlockRootAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_GetBlockRootAtIndex_Call) Return(_a0 common.Root, _a1 error) *BeaconState_GetBlockRootAtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetBlockRootAtIndex_Call) RunAndReturn(run func(uint64) (common.Root, error)) *BeaconState_GetBlockRootAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetEth1Data provides a mock function with no fields
func (_m *BeaconState) GetEth1Data() (*types.Eth1Data, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1Data")
	}

	var r0 *types.Eth1Data
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.Eth1Data, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.Eth1Data); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Eth1Data)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1Data'
type BeaconState_GetEth1Data_Call struct {
	*mock.Call
}

// GetEth1Data is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetEth1Data() *BeaconState_GetEth1Data_Call {
	return &BeaconState_GetEth1Data_Call{Call: _e.mock.On("GetEth1Data")}
}

func (_c *BeaconState_GetEth1Data_Call) Run(run func()) *BeaconState_GetEth1Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetEth1Data_Call) Return(_a0 *types.Eth1Data, _a1 error) *BeaconState_GetEth1Data_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetEth1Data_Call) RunAndReturn(run func() (*types.Eth1Data, error)) *BeaconState_GetEth1Data_Call {
	_c.Call.Return(run)
	return _c
}

// GetEth1DepositIndex provides a mock function with no fields
func (_m *BeaconState) GetEth1DepositIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1DepositIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetEth1DepositIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1DepositIndex'
type BeaconState_GetEth1DepositIndex_Call struct {
	*mock.Call
}

// GetEth1DepositIndex is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetEth1DepositIndex() *BeaconState_GetEth1DepositIndex_Call {
	return &BeaconState_GetEth1DepositIndex_Call{Call: _e.mock.On("GetEth1DepositIndex")}
}

func (_c *BeaconState_GetEth1DepositIndex_Call) Run(run func()) *BeaconState_GetEth1DepositIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetEth1DepositIndex_Call) Return(_a0 uint64, _a1 error) *BeaconState_GetEth1DepositIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetEth1DepositIndex_Call) RunAndReturn(run func() (uint64, error)) *BeaconState_GetEth1DepositIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetFork provides a mock function with no fields
func (_m *BeaconState) GetFork() (*types.Fork, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFork")
	}

	var r0 *types.Fork
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.Fork, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.Fork); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Fork)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetFork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFork'
type BeaconState_GetFork_Call struct {
	*mock.Call
}

// GetFork is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetFork() *BeaconState_GetFork_Call {
	return &BeaconState_GetFork_Call{Call: _e.mock.On("GetFork")}
}

func (_c *BeaconState_GetFork_Call) Run(run func()) *BeaconState_GetFork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetFork_Call) Return(_a0 *types.Fork, _a1 error) *BeaconState_GetFork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetFork_Call) RunAndReturn(run func() (*types.Fork, error)) *BeaconState_GetFork_Call {
	_c.Call.Return(run)
	return _c
}

// GetGenesisValidatorsRoot provides a mock function with no fields
func (_m *BeaconState) GetGenesisValidatorsRoot() (common.Root, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGenesisValidatorsRoot")
	}

	var r0 common.Root
	var r1 error
	if rf, ok := ret.Get(0).(func() (common.Root, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() common.Root); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetGenesisValidatorsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGenesisValidatorsRoot'
type BeaconState_GetGenesisValidatorsRoot_Call struct {
	*mock.Call
}

// GetGenesisValidatorsRoot is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetGenesisValidatorsRoot() *BeaconState_GetGenesisValidatorsRoot_Call {
	return &BeaconState_GetGenesisValidatorsRoot_Call{Call: _e.mock.On("GetGenesisValidatorsRoot")}
}

func (_c *BeaconState_GetGenesisValidatorsRoot_Call) Run(run func()) *BeaconState_GetGenesisValidatorsRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetGenesisValidatorsRoot_Call) Return(_a0 common.Root, _a1 error) *BeaconState_GetGenesisValidatorsRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetGenesisValidatorsRoot_Call) RunAndReturn(run func() (common.Root, error)) *BeaconState_GetGenesisValidatorsRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeader provides a mock function with no fields
func (_m *BeaconState) GetLatestBlockHeader() (*types.BeaconBlockHeader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 *types.BeaconBlockHeader
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.BeaconBlockHeader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.BeaconBlockHeader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BeaconBlockHeader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
type BeaconState_GetLatestBlockHeader_Call struct {
	*mock.Call
}

// GetLatestBlockHeader is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetLatestBlockHeader() *BeaconState_GetLatestBlockHeader_Call {
	return &BeaconState_GetLatestBlockHeader_Call{Call: _e.mock.On("GetLatestBlockHeader")}
}

func (_c *BeaconState_GetLatestBlockHeader_Call) Run(run func()) *BeaconState_GetLatestBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetLatestBlockHeader_Call) Return(_a0 *types.BeaconBlockHeader, _a1 error) *BeaconState_GetLatestBlockHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetLatestBlockHeader_Call) RunAndReturn(run func() (*types.BeaconBlockHeader, error)) *BeaconState_GetLatestBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestExecutionPayloadHeader provides a mock function with no fields
func (_m *BeaconState) GetLatestExecutionPayloadHeader() (*types.ExecutionPayloadHeader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestExecutionPayloadHeader")
	}

	var r0 *types.ExecutionPayloadHeader
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.ExecutionPayloadHeader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.ExecutionPayloadHeader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ExecutionPayloadHeader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetLatestExecutionPayloadHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestExecutionPayloadHeader'
type BeaconState_GetLatestExecutionPayloadHeader_Call struct {
	*mock.Call
}

// GetLatestExecutionPayloadHeader is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetLatestExecutionPayloadHeader() *BeaconState_GetLatestExecutionPayloadHeader_Call {
	return &BeaconState_GetLatestExecutionPayloadHeader_Call{Call: _e.mock.On("GetLatestExecutionPayloadHeader")}
}

func (_c *BeaconState_GetLatestExecutionPayloadHeader_Call) Run(run func()) *BeaconState_GetLatestExecutionPayloadHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetLatestExecutionPayloadHeader_Call) Return(_a0 *types.ExecutionPayloadHeader, _a1 error) *BeaconState_GetLatestExecutionPayloadHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetLatestExecutionPayloadHeader_Call) RunAndReturn(run func() (*types.ExecutionPayloadHeader, error)) *BeaconState_GetLatestExecutionPayloadHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextWithdrawalIndex provides a mock function with no fields
func (_m *BeaconState) GetNextWithdrawalIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextWithdrawalIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetNextWithdrawalIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWithdrawalIndex'
type BeaconState_GetNextWithdrawalIndex_Call struct {
	*mock.Call
}

// GetNextWithdrawalIndex is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetNextWithdrawalIndex() *BeaconState_GetNextWithdrawalIndex_Call {
	return &BeaconState_GetNextWithdrawalIndex_Call{Call: _e.mock.On("GetNextWithdrawalIndex")}
}

func (_c *BeaconState_GetNextWithdrawalIndex_Call) Run(run func()) *BeaconState_GetNextWithdrawalIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetNextWithdrawalIndex_Call) Return(_a0 uint64, _a1 error) *BeaconState_GetNextWithdrawalIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetNextWithdrawalIndex_Call) RunAndReturn(run func() (uint64, error)) *BeaconState_GetNextWithdrawalIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextWithdrawalValidatorIndex provides a mock function with no fields
func (_m *BeaconState) GetNextWithdrawalValidatorIndex() (math.U64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextWithdrawalValidatorIndex")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.U64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetNextWithdrawalValidatorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWithdrawalValidatorIndex'
type BeaconState_GetNextWithdrawalValidatorIndex_Call struct {
	*mock.Call
}

// GetNextWithdrawalValidatorIndex is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetNextWithdrawalValidatorIndex() *BeaconState_GetNextWithdrawalValidatorIndex_Call {
	return &BeaconState_GetNextWithdrawalValidatorIndex_Call{Call: _e.mock.On("GetNextWithdrawalValidatorIndex")}
}

func (_c *BeaconState_GetNextWithdrawalValidatorIndex_Call) Run(run func()) *BeaconState_GetNextWithdrawalValidatorIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetNextWithdrawalValidatorIndex_Call) Return(_a0 math.U64, _a1 error) *BeaconState_GetNextWithdrawalValidatorIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetNextWithdrawalValidatorIndex_Call) RunAndReturn(run func() (math.U64, error)) *BeaconState_GetNextWithdrawalValidatorIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandaoMixAtIndex provides a mock function with given fields: _a0
func (_m *BeaconState) GetRandaoMixAtIndex(_a0 uint64) (bytes.B32, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRandaoMixAtIndex")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (bytes.B32, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) bytes.B32); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetRandaoMixAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandaoMixAtIndex'
type BeaconState_GetRandaoMixAtIndex_Call struct {
	*mock.Call
}

// GetRandaoMixAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter) GetRandaoMixAtIndex(_a0 interface{}) *BeaconState_GetRandaoMixAtIndex_Call {
	return &BeaconState_GetRandaoMixAtIndex_Call{Call: _e.mock.On("GetRandaoMixAtIndex", _a0)}
}

func (_c *BeaconState_GetRandaoMixAtIndex_Call) Run(run func(_a0 uint64)) *BeaconState_GetRandaoMixAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_GetRandaoMixAtIndex_Call) Return(_a0 bytes.B32, _a1 error) *BeaconState_GetRandaoMixAtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetRandaoMixAtIndex_Call) RunAndReturn(run func(uint64) (bytes.B32, error)) *BeaconState_GetRandaoMixAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlashingAtIndex provides a mock function with given fields: _a0
func (_m *BeaconState) GetSlashingAtIndex(_a0 uint64) (math.U64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSlashingAtIndex")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (math.U64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) math.U64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetSlashingAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlashingAtIndex'
type BeaconState_GetSlashingAtIndex_Call struct {
	*mock.Call
}

// GetSlashingAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter) GetSlashingAtIndex(_a0 interface{}) *BeaconState_GetSlashingAtIndex_Call {
	return &BeaconState_GetSlashingAtIndex_Call{Call: _e.mock.On("GetSlashingAtIndex", _a0)}
}

func (_c *BeaconState_GetSlashingAtIndex_Call) Run(run func(_a0 uint64)) *BeaconState_GetSlashingAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_GetSlashingAtIndex_Call) Return(_a0 math.U64, _a1 error) *BeaconState_GetSlashingAtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetSlashingAtIndex_Call) RunAndReturn(run func(uint64) (math.U64, error)) *BeaconState_GetSlashingAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlot provides a mock function with no fields
func (_m *BeaconState) GetSlot() (math.U64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlot")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.U64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
type BeaconState_GetSlot_Call struct {
	*mock.Call
}

// GetSlot is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetSlot() *BeaconState_GetSlot_Call {
	return &BeaconState_GetSlot_Call{Call: _e.mock.On("GetSlot")}
}

func (_c *BeaconState_GetSlot_Call) Run(run func()) *BeaconState_GetSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetSlot_Call) Return(_a0 math.U64, _a1 error) *BeaconState_GetSlot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetSlot_Call) RunAndReturn(run func() (math.U64, error)) *BeaconState_GetSlot_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalActiveBalances provides a mock function with given fields: _a0
func (_m *BeaconState) GetTotalActiveBalances(_a0 uint64) (math.U64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalActiveBalances")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (math.U64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) math.U64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetTotalActiveBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalActiveBalances'
type BeaconState_GetTotalActiveBalances_Call struct {
	*mock.Call
}

// GetTotalActiveBalances is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter) GetTotalActiveBalances(_a0 interface{}) *BeaconState_GetTotalActiveBalances_Call {
	return &BeaconState_GetTotalActiveBalances_Call{Call: _e.mock.On("GetTotalActiveBalances", _a0)}
}

func (_c *BeaconState_GetTotalActiveBalances_Call) Run(run func(_a0 uint64)) *BeaconState_GetTotalActiveBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_GetTotalActiveBalances_Call) Return(_a0 math.U64, _a1 error) *BeaconState_GetTotalActiveBalances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetTotalActiveBalances_Call) RunAndReturn(run func(uint64) (math.U64, error)) *BeaconState_GetTotalActiveBalances_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalSlashing provides a mock function with no fields
func (_m *BeaconState) GetTotalSlashing() (math.U64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalSlashing")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.U64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetTotalSlashing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalSlashing'
type BeaconState_GetTotalSlashing_Call struct {
	*mock.Call
}

// GetTotalSlashing is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetTotalSlashing() *BeaconState_GetTotalSlashing_Call {
	return &BeaconState_GetTotalSlashing_Call{Call: _e.mock.On("GetTotalSlashing")}
}

func (_c *BeaconState_GetTotalSlashing_Call) Run(run func()) *BeaconState_GetTotalSlashing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetTotalSlashing_Call) Return(_a0 math.U64, _a1 error) *BeaconState_GetTotalSlashing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetTotalSlashing_Call) RunAndReturn(run func() (math.U64, error)) *BeaconState_GetTotalSlashing_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalValidators provides a mock function with no fields
func (_m *BeaconState) GetTotalValidators() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalValidators")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetTotalValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalValidators'
type BeaconState_GetTotalValidators_Call struct {
	*mock.Call
}

// GetTotalValidators is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetTotalValidators() *BeaconState_GetTotalValidators_Call {
	return &BeaconState_GetTotalValidators_Call{Call: _e.mock.On("GetTotalValidators")}
}

func (_c *BeaconState_GetTotalValidators_Call) Run(run func()) *BeaconState_GetTotalValidators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetTotalValidators_Call) Return(_a0 uint64, _a1 error) *BeaconState_GetTotalValidators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetTotalValidators_Call) RunAndReturn(run func() (uint64, error)) *BeaconState_GetTotalValidators_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidators provides a mock function with no fields
func (_m *BeaconState) GetValidators() (types.Validators, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidators")
	}

	var r0 types.Validators
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.Validators, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.Validators); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Validators)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidators'
type BeaconState_GetValidators_Call struct {
	*mock.Call
}

// GetValidators is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetValidators() *BeaconState_GetValidators_Call {
	return &BeaconState_GetValidators_Call{Call: _e.mock.On("GetValidators")}
}

func (_c *BeaconState_GetValidators_Call) Run(run func()) *BeaconState_GetValidators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetValidators_Call) Return(_a0 types.Validators, _a1 error) *BeaconState_GetValidators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetValidators_Call) RunAndReturn(run func() (types.Validators, error)) *BeaconState_GetValidators_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidatorsByEffectiveBalance provides a mock function with no fields
func (_m *BeaconState) GetValidatorsByEffectiveBalance() ([]*types.Validator, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorsByEffectiveBalance")
	}

	var r0 []*types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.Validator, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.Validator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetValidatorsByEffectiveBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatorsByEffectiveBalance'
type BeaconState_GetValidatorsByEffectiveBalance_Call struct {
	*mock.Call
}

// GetValidatorsByEffectiveBalance is a helper method to define mock.On call
func (_e *BeaconState_Expecter) GetValidatorsByEffectiveBalance() *BeaconState_GetValidatorsByEffectiveBalance_Call {
	return &BeaconState_GetValidatorsByEffectiveBalance_Call{Call: _e.mock.On("GetValidatorsByEffectiveBalance")}
}

func (_c *BeaconState_GetValidatorsByEffectiveBalance_Call) Run(run func()) *BeaconState_GetValidatorsByEffectiveBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetValidatorsByEffectiveBalance_Call) Return(_a0 []*types.Validator, _a1 error) *BeaconState_GetValidatorsByEffectiveBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetValidatorsByEffectiveBalance_Call) RunAndReturn(run func() ([]*types.Validator, error)) *BeaconState_GetValidatorsByEffectiveBalance_Call {
	_c.Call.Return(run)
	return _c
}

// IncreaseBalance provides a mock function with given fields: _a0, _a1
func (_m *BeaconState) IncreaseBalance(_a0 math.U64, _a1 math.U64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64, math.U64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_IncreaseBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseBalance'
type BeaconState_IncreaseBalance_Call struct {
	*mock.Call
}

// IncreaseBalance is a helper method to define mock.On call
//   - _a0 math.U64
//   - _a1 math.U64
func (_e *BeaconState_Expecter) IncreaseBalance(_a0 interface{}, _a1 interface{}) *BeaconState_IncreaseBalance_Call {
	return &BeaconState_IncreaseBalance_Call{Call: _e.mock.On("IncreaseBalance", _a0, _a1)}
}

func (_c *BeaconState_IncreaseBalance_Call) Run(run func(_a0 math.U64, _a1 math.U64)) *BeaconState_IncreaseBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(math.U64))
	})
	return _c
}

func (_c *BeaconState_IncreaseBalance_Call) Return(_a0 error) *BeaconState_IncreaseBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_IncreaseBalance_Call) RunAndReturn(run func(math.U64, math.U64) error) *BeaconState_IncreaseBalance_Call {
	_c.Call.Return(run)
	return _c
}

// SetEth1Data provides a mock function with given fields: _a0
func (_m *BeaconState) SetEth1Data(_a0 *types.Eth1Data) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetEth1Data")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Eth1Data) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEth1Data'
type BeaconState_SetEth1Data_Call struct {
	*mock.Call
}

// SetEth1Data is a helper method to define mock.On call
//   - _a0 *types.Eth1Data
func (_e *BeaconState_Expecter) SetEth1Data(_a0 interface{}) *BeaconState_SetEth1Data_Call {
	return &BeaconState_SetEth1Data_Call{Call: _e.mock.On("SetEth1Data", _a0)}
}

func (_c *BeaconState_SetEth1Data_Call) Run(run func(_a0 *types.Eth1Data)) *BeaconState_SetEth1Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Eth1Data))
	})
	return _c
}

func (_c *BeaconState_SetEth1Data_Call) Return(_a0 error) *BeaconState_SetEth1Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetEth1Data_Call) RunAndReturn(run func(*types.Eth1Data) error) *BeaconState_SetEth1Data_Call {
	_c.Call.Return(run)
	return _c
}

// SetEth1DepositIndex provides a mock function with given fields: _a0
func (_m *BeaconState) SetEth1DepositIndex(_a0 uint64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetEth1DepositIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetEth1DepositIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEth1DepositIndex'
type BeaconState_SetEth1DepositIndex_Call struct {
	*mock.Call
}

// SetEth1DepositIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter) SetEth1DepositIndex(_a0 interface{}) *BeaconState_SetEth1DepositIndex_Call {
	return &BeaconState_SetEth1DepositIndex_Call{Call: _e.mock.On("SetEth1DepositIndex", _a0)}
}

func (_c *BeaconState_SetEth1DepositIndex_Call) Run(run func(_a0 uint64)) *BeaconState_SetEth1DepositIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_SetEth1DepositIndex_Call) Return(_a0 error) *BeaconState_SetEth1DepositIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetEth1DepositIndex_Call) RunAndReturn(run func(uint64) error) *BeaconState_SetEth1DepositIndex_Call {
	_c.Call.Return(run)
	return _c
}

// SetFork provides a mock function with given fields: _a0
func (_m *BeaconState) SetFork(_a0 *types.Fork) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetFork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Fork) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetFork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFork'
type BeaconState_SetFork_Call struct {
	*mock.Call
}

// SetFork is a helper method to define mock.On call
//   - _a0 *types.Fork
func (_e *BeaconState_Expecter) SetFork(_a0 interface{}) *BeaconState_SetFork_Call {
	return &BeaconState_SetFork_Call{Call: _e.mock.On("SetFork", _a0)}
}

func (_c *BeaconState_SetFork_Call) Run(run func(_a0 *types.Fork)) *BeaconState_SetFork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Fork))
	})
	return _c
}

func (_c *BeaconState_SetFork_Call) Return(_a0 error) *BeaconState_SetFork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetFork_Call) RunAndReturn(run func(*types.Fork) error) *BeaconState_SetFork_Call {
	_c.Call.Return(run)
	return _c
}

// SetGenesisValidatorsRoot provides a mock function with given fields: root
func (_m *BeaconState) SetGenesisValidatorsRoot(root common.Root) error {
	ret := _m.Called(root)

	if len(ret) == 0 {
		panic("no return value specified for SetGenesisValidatorsRoot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Root) error); ok {
		r0 = rf(root)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetGenesisValidatorsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGenesisValidatorsRoot'
type BeaconState_SetGenesisValidatorsRoot_Call struct {
	*mock.Call
}

// SetGenesisValidatorsRoot is a helper method to define mock.On call
//   - root common.Root
func (_e *BeaconState_Expecter) SetGenesisValidatorsRoot(root interface{}) *BeaconState_SetGenesisValidatorsRoot_Call {
	return &BeaconState_SetGenesisValidatorsRoot_Call{Call: _e.mock.On("SetGenesisValidatorsRoot", root)}
}

func (_c *BeaconState_SetGenesisValidatorsRoot_Call) Run(run func(root common.Root)) *BeaconState_SetGenesisValidatorsRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Root))
	})
	return _c
}

func (_c *BeaconState_SetGenesisValidatorsRoot_Call) Return(_a0 error) *BeaconState_SetGenesisValidatorsRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetGenesisValidatorsRoot_Call) RunAndReturn(run func(common.Root) error) *BeaconState_SetGenesisValidatorsRoot_Call {
	_c.Call.Return(run)
	return _c
}

// SetLatestBlockHeader provides a mock function with given fields: _a0
func (_m *BeaconState) SetLatestBlockHeader(_a0 *types.BeaconBlockHeader) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetLatestBlockHeader")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.BeaconBlockHeader) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLatestBlockHeader'
type BeaconState_SetLatestBlockHeader_Call struct {
	*mock.Call
}

// SetLatestBlockHeader is a helper method to define mock.On call
//   - _a0 *types.BeaconBlockHeader
func (_e *BeaconState_Expecter) SetLatestBlockHeader(_a0 interface{}) *BeaconState_SetLatestBlockHeader_Call {
	return &BeaconState_SetLatestBlockHeader_Call{Call: _e.mock.On("SetLatestBlockHeader", _a0)}
}

func (_c *BeaconState_SetLatestBlockHeader_Call) Run(run func(_a0 *types.BeaconBlockHeader)) *BeaconState_SetLatestBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.BeaconBlockHeader))
	})
	return _c
}

func (_c *BeaconState_SetLatestBlockHeader_Call) Return(_a0 error) *BeaconState_SetLatestBlockHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetLatestBlockHeader_Call) RunAndReturn(run func(*types.BeaconBlockHeader) error) *BeaconState_SetLatestBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetLatestExecutionPayloadHeader provides a mock function with given fields: _a0
func (_m *BeaconState) SetLatestExecutionPayloadHeader(_a0 *types.ExecutionPayloadHeader) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetLatestExecutionPayloadHeader")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.ExecutionPayloadHeader) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetLatestExecutionPayloadHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLatestExecutionPayloadHeader'
type BeaconState_SetLatestExecutionPayloadHeader_Call struct {
	*mock.Call
}

// SetLatestExecutionPayloadHeader is a helper method to define mock.On call
//   - _a0 *types.ExecutionPayloadHeader
func (_e *BeaconState_Expecter) SetLatestExecutionPayloadHeader(_a0 interface{}) *BeaconState_SetLatestExecutionPayloadHeader_Call {
	return &BeaconState_SetLatestExecutionPayloadHeader_Call{Call: _e.mock.On("SetLatestExecutionPayloadHeader", _a0)}
}

func (_c *BeaconState_SetLatestExecutionPayloadHeader_Call) Run(run func(_a0 *types.ExecutionPayloadHeader)) *BeaconState_SetLatestExecutionPayloadHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.ExecutionPayloadHeader))
	})
	return _c
}

func (_c *BeaconState_SetLatestExecutionPayloadHeader_Call) Return(_a0 error) *BeaconState_SetLatestExecutionPayloadHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetLatestExecutionPayloadHeader_Call) RunAndReturn(run func(*types.ExecutionPayloadHeader) error) *BeaconState_SetLatestExecutionPayloadHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetNextWithdrawalIndex provides a mock function with given fields: _a0
func (_m *BeaconState) SetNextWithdrawalIndex(_a0 uint64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetNextWithdrawalIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetNextWithdrawalIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNextWithdrawalIndex'
type BeaconState_SetNextWithdrawalIndex_Call struct {
	*mock.Call
}

// SetNextWithdrawalIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter) SetNextWithdrawalIndex(_a0 interface{}) *BeaconState_SetNextWithdrawalIndex_Call {
	return &BeaconState_SetNextWithdrawalIndex_Call{Call: _e.mock.On("SetNextWithdrawalIndex", _a0)}
}

func (_c *BeaconState_SetNextWithdrawalIndex_Call) Run(run func(_a0 uint64)) *BeaconState_SetNextWithdrawalIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_SetNextWithdrawalIndex_Call) Return(_a0 error) *BeaconState_SetNextWithdrawalIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetNextWithdrawalIndex_Call) RunAndReturn(run func(uint64) error) *BeaconState_SetNextWithdrawalIndex_Call {
	_c.Call.Return(run)
	return _c
}

// SetNextWithdrawalValidatorIndex provides a mock function with given fields: _a0
func (_m *BeaconState) SetNextWithdrawalValidatorIndex(_a0 math.U64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetNextWithdrawalValidatorIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetNextWithdrawalValidatorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNextWithdrawalValidatorIndex'
type BeaconState_SetNextWithdrawalValidatorIndex_Call struct {
	*mock.Call
}

// SetNextWithdrawalValidatorIndex is a helper method to define mock.On call
//   - _a0 math.U64
func (_e *BeaconState_Expecter) SetNextWithdrawalValidatorIndex(_a0 interface{}) *BeaconState_SetNextWithdrawalValidatorIndex_Call {
	return &BeaconState_SetNextWithdrawalValidatorIndex_Call{Call: _e.mock.On("SetNextWithdrawalValidatorIndex", _a0)}
}

func (_c *BeaconState_SetNextWithdrawalValidatorIndex_Call) Run(run func(_a0 math.U64)) *BeaconState_SetNextWithdrawalValidatorIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *BeaconState_SetNextWithdrawalValidatorIndex_Call) Return(_a0 error) *BeaconState_SetNextWithdrawalValidatorIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetNextWithdrawalValidatorIndex_Call) RunAndReturn(run func(math.U64) error) *BeaconState_SetNextWithdrawalValidatorIndex_Call {
	_c.Call.Return(run)
	return _c
}

// SetSlot provides a mock function with given fields: _a0
func (_m *BeaconState) SetSlot(_a0 math.U64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetSlot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSlot'
type BeaconState_SetSlot_Call struct {
	*mock.Call
}

// SetSlot is a helper method to define mock.On call
//   - _a0 math.U64
func (_e *BeaconState_Expecter) SetSlot(_a0 interface{}) *BeaconState_SetSlot_Call {
	return &BeaconState_SetSlot_Call{Call: _e.mock.On("SetSlot", _a0)}
}

func (_c *BeaconState_SetSlot_Call) Run(run func(_a0 math.U64)) *BeaconState_SetSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *BeaconState_SetSlot_Call) Return(_a0 error) *BeaconState_SetSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetSlot_Call) RunAndReturn(run func(math.U64) error) *BeaconState_SetSlot_Call {
	_c.Call.Return(run)
	return _c
}

// SetTotalSlashing provides a mock function with given fields: _a0
func (_m *BeaconState) SetTotalSlashing(_a0 math.U64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetTotalSlashing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetTotalSlashing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTotalSlashing'
type BeaconState_SetTotalSlashing_Call struct {
	*mock.Call
}

// SetTotalSlashing is a helper method to define mock.On call
//   - _a0 math.U64
func (_e *BeaconState_Expecter) SetTotalSlashing(_a0 interface{}) *BeaconState_SetTotalSlashing_Call {
	return &BeaconState_SetTotalSlashing_Call{Call: _e.mock.On("SetTotalSlashing", _a0)}
}

func (_c *BeaconState_SetTotalSlashing_Call) Run(run func(_a0 math.U64)) *BeaconState_SetTotalSlashing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *BeaconState_SetTotalSlashing_Call) Return(_a0 error) *BeaconState_SetTotalSlashing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetTotalSlashing_Call) RunAndReturn(run func(math.U64) error) *BeaconState_SetTotalSlashing_Call {
	_c.Call.Return(run)
	return _c
}

// StateRootAtIndex provides a mock function with given fields: _a0
func (_m *BeaconState) StateRootAtIndex(_a0 uint64) (common.Root, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for StateRootAtIndex")
	}

	var r0 common.Root
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (common.Root, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) common.Root); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_StateRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateRootAtIndex'
type BeaconState_StateRootAtIndex_Call struct {
	*mock.Call
}

// StateRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter) StateRootAtIndex(_a0 interface{}) *BeaconState_StateRootAtIndex_Call {
	return &BeaconState_StateRootAtIndex_Call{Call: _e.mock.On("StateRootAtIndex", _a0)}
}

func (_c *BeaconState_StateRootAtIndex_Call) Run(run func(_a0 uint64)) *BeaconState_StateRootAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_StateRootAtIndex_Call) Return(_a0 common.Root, _a1 error) *BeaconState_StateRootAtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_StateRootAtIndex_Call) RunAndReturn(run func(uint64) (common.Root, error)) *BeaconState_StateRootAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBlockRootAtIndex provides a mock function with given fields: _a0, _a1
func (_m *BeaconState) UpdateBlockRootAtIndex(_a0 uint64, _a1 common.Root) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlockRootAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, common.Root) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_UpdateBlockRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBlockRootAtIndex'
type BeaconState_UpdateBlockRootAtIndex_Call struct {
	*mock.Call
}

// UpdateBlockRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
//   - _a1 common.Root
func (_e *BeaconState_Expecter) UpdateBlockRootAtIndex(_a0 interface{}, _a1 interface{}) *BeaconState_UpdateBlockRootAtIndex_Call {
	return &BeaconState_UpdateBlockRootAtIndex_Call{Call: _e.mock.On("UpdateBlockRootAtIndex", _a0, _a1)}
}

func (_c *BeaconState_UpdateBlockRootAtIndex_Call) Run(run func(_a0 uint64, _a1 common.Root)) *BeaconState_UpdateBlockRootAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(common.Root))
	})
	return _c
}

func (_c *BeaconState_UpdateBlockRootAtIndex_Call) Return(_a0 error) *BeaconState_UpdateBlockRootAtIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_UpdateBlockRootAtIndex_Call) RunAndReturn(run func(uint64, common.Root) error) *BeaconState_UpdateBlockRootAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRandaoMixAtIndex provides a mock function with given fields: _a0, _a1
func (_m *BeaconState) UpdateRandaoMixAtIndex(_a0 uint64, _a1 bytes.B32) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRandaoMixAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bytes.B32) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_UpdateRandaoMixAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRandaoMixAtIndex'
type BeaconState_UpdateRandaoMixAtIndex_Call struct {
	*mock.Call
}

// UpdateRandaoMixAtIndex is a helper method to define mock.On call
//   - _a0 uint64
//   - _a1 bytes.B32
func (_e *BeaconState_Expecter) UpdateRandaoMixAtIndex(_a0 interface{}, _a1 interface{}) *BeaconState_UpdateRandaoMixAtIndex_Call {
	return &BeaconState_UpdateRandaoMixAtIndex_Call{Call: _e.mock.On("UpdateRandaoMixAtIndex", _a0, _a1)}
}

func (_c *BeaconState_UpdateRandaoMixAtIndex_Call) Run(run func(_a0 uint64, _a1 bytes.B32)) *BeaconState_UpdateRandaoMixAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bytes.B32))
	})
	return _c
}

func (_c *BeaconState_UpdateRandaoMixAtIndex_Call) Return(_a0 error) *BeaconState_UpdateRandaoMixAtIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_UpdateRandaoMixAtIndex_Call) RunAndReturn(run func(uint64, bytes.B32) error) *BeaconState_UpdateRandaoMixAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSlashingAtIndex provides a mock function with given fields: _a0, _a1
func (_m *BeaconState) UpdateSlashingAtIndex(_a0 uint64, _a1 math.U64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSlashingAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, math.U64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_UpdateSlashingAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSlashingAtIndex'
type BeaconState_UpdateSlashingAtIndex_Call struct {
	*mock.Call
}

// UpdateSlashingAtIndex is a helper method to define mock.On call
//   - _a0 uint64
//   - _a1 math.U64
func (_e *BeaconState_Expecter) UpdateSlashingAtIndex(_a0 interface{}, _a1 interface{}) *BeaconState_UpdateSlashingAtIndex_Call {
	return &BeaconState_UpdateSlashingAtIndex_Call{Call: _e.mock.On("UpdateSlashingAtIndex", _a0, _a1)}
}

func (_c *BeaconState_UpdateSlashingAtIndex_Call) Run(run func(_a0 uint64, _a1 math.U64)) *BeaconState_UpdateSlashingAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(math.U64))
	})
	return _c
}

func (_c *BeaconState_UpdateSlashingAtIndex_Call) Return(_a0 error) *BeaconState_UpdateSlashingAtIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_UpdateSlashingAtIndex_Call) RunAndReturn(run func(uint64, math.U64) error) *BeaconState_UpdateSlashingAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateRootAtIndex provides a mock function with given fields: _a0, _a1
func (_m *BeaconState) UpdateStateRootAtIndex(_a0 uint64, _a1 common.Root) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateRootAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, common.Root) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_UpdateStateRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateRootAtIndex'
type BeaconState_UpdateStateRootAtIndex_Call struct {
	*mock.Call
}

// UpdateStateRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
//   - _a1 common.Root
func (_e *BeaconState_Expecter) UpdateStateRootAtIndex(_a0 interface{}, _a1 interface{}) *BeaconState_UpdateStateRootAtIndex_Call {
	return &BeaconState_UpdateStateRootAtIndex_Call{Call: _e.mock.On("UpdateStateRootAtIndex", _a0, _a1)}
}

func (_c *BeaconState_UpdateStateRootAtIndex_Call) Run(run func(_a0 uint64, _a1 common.Root)) *BeaconState_UpdateStateRootAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(common.Root))
	})
	return _c
}

func (_c *BeaconState_UpdateStateRootAtIndex_Call) Return(_a0 error) *BeaconState_UpdateStateRootAtIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_UpdateStateRootAtIndex_Call) RunAndReturn(run func(uint64, common.Root) error) *BeaconState_UpdateStateRootAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateValidatorAtIndex provides a mock function with given fields: _a0, _a1
func (_m *BeaconState) UpdateValidatorAtIndex(_a0 math.U64, _a1 *types.Validator) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateValidatorAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64, *types.Validator) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_UpdateValidatorAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateValidatorAtIndex'
type BeaconState_UpdateValidatorAtIndex_Call struct {
	*mock.Call
}

// UpdateValidatorAtIndex is a helper method to define mock.On call
//   - _a0 math.U64
//   - _a1 *types.Validator
func (_e *BeaconState_Expecter) UpdateValidatorAtIndex(_a0 interface{}, _a1 interface{}) *BeaconState_UpdateValidatorAtIndex_Call {
	return &BeaconState_UpdateValidatorAtIndex_Call{Call: _e.mock.On("UpdateValidatorAtIndex", _a0, _a1)}
}

func (_c *BeaconState_UpdateValidatorAtIndex_Call) Run(run func(_a0 math.U64, _a1 *types.Validator)) *BeaconState_UpdateValidatorAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(*types.Validator))
	})
	return _c
}

func (_c *BeaconState_UpdateValidatorAtIndex_Call) Return(_a0 error) *BeaconState_UpdateValidatorAtIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_UpdateValidatorAtIndex_Call) RunAndReturn(run func(math.U64, *types.Validator) error) *BeaconState_UpdateValidatorAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorByIndex provides a mock function with given fields: _a0
func (_m *BeaconState) ValidatorByIndex(_a0 math.U64) (*types.Validator, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorByIndex")
	}

	var r0 *types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(math.U64) (*types.Validator, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(math.U64) *types.Validator); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func(math.U64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_ValidatorByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorByIndex'
type BeaconState_ValidatorByIndex_Call struct {
	*mock.Call
}

// ValidatorByIndex is a helper method to define mock.On call
//   - _a0 math.U64
func (_e *BeaconState_Expecter) ValidatorByIndex(_a0 interface{}) *BeaconState_ValidatorByIndex_Call {
	return &BeaconState_ValidatorByIndex_Call{Call: _e.mock.On("ValidatorByIndex", _a0)}
}

func (_c *BeaconState_ValidatorByIndex_Call) Run(run func(_a0 math.U64)) *BeaconState_ValidatorByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *BeaconState_ValidatorByIndex_Call) Return(_a0 *types.Validator, _a1 error) *BeaconState_ValidatorByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_ValidatorByIndex_Call) RunAndReturn(run func(math.U64) (*types.Validator, error)) *BeaconState_ValidatorByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorIndexByCometBFTAddress provides a mock function with given fields: cometBFTAddress
func (_m *BeaconState) ValidatorIndexByCometBFTAddress(cometBFTAddress []byte) (math.U64, error) {
	ret := _m.Called(cometBFTAddress)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorIndexByCometBFTAddress")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (math.U64, error)); ok {
		return rf(cometBFTAddress)
	}
	if rf, ok := ret.Get(0).(func([]byte) math.U64); ok {
		r0 = rf(cometBFTAddress)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(cometBFTAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_ValidatorIndexByCometBFTAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorIndexByCometBFTAddress'
type BeaconState_ValidatorIndexByCometBFTAddress_Call struct {
	*mock.Call
}

// ValidatorIndexByCometBFTAddress is a helper method to define mock.On call
//   - cometBFTAddress []byte
func (_e *BeaconState_Expecter) ValidatorIndexByCometBFTAddress(cometBFTAddress interface{}) *BeaconState_ValidatorIndexByCometBFTAddress_Call {
	return &BeaconState_ValidatorIndexByCometBFTAddress_Call{Call: _e.mock.On("ValidatorIndexByCometBFTAddress", cometBFTAddress)}
}

func (_c *BeaconState_ValidatorIndexByCometBFTAddress_Call) Run(run func(cometBFTAddress []byte)) *BeaconState_ValidatorIndexByCometBFTAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BeaconState_ValidatorIndexByCometBFTAddress_Call) Return(_a0 math.U64, _a1 error) *BeaconState_ValidatorIndexByCometBFTAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_ValidatorIndexByCometBFTAddress_Call) RunAndReturn(run func([]byte) (math.U64, error)) *BeaconState_ValidatorIndexByCometBFTAddress_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorIndexByPubkey provides a mock function with given fields: _a0
func (_m *BeaconState) ValidatorIndexByPubkey(_a0 bytes.B48) (math.U64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorIndexByPubkey")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(bytes.B48) (math.U64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(bytes.B48) math.U64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(bytes.B48) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_ValidatorIndexByPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorIndexByPubkey'
type BeaconState_ValidatorIndexByPubkey_Call struct {
	*mock.Call
}

// ValidatorIndexByPubkey is a helper method to define mock.On call
//   - _a0 bytes.B48
func (_e *BeaconState_Expecter) ValidatorIndexByPubkey(_a0 interface{}) *BeaconState_ValidatorIndexByPubkey_Call {
	return &BeaconState_ValidatorIndexByPubkey_Call{Call: _e.mock.On("ValidatorIndexByPubkey", _a0)}
}

func (_c *BeaconState_ValidatorIndexByPubkey_Call) Run(run func(_a0 bytes.B48)) *BeaconState_ValidatorIndexByPubkey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B48))
	})
	return _c
}

func (_c *BeaconState_ValidatorIndexByPubkey_Call) Return(_a0 math.U64, _a1 error) *BeaconState_ValidatorIndexByPubkey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_ValidatorIndexByPubkey_Call) RunAndReturn(run func(bytes.B48) (math.U64, error)) *BeaconState_ValidatorIndexByPubkey_Call {
	_c.Call.Return(run)
	return _c
}

// NewBeaconState creates a new instance of BeaconState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconState(t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconState {
	mock := &BeaconState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
