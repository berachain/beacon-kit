// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ConsensusService is an autogenerated mock type for the ConsensusService type
type ConsensusService struct {
	mock.Mock
}

type ConsensusService_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsensusService) EXPECT() *ConsensusService_Expecter {
	return &ConsensusService_Expecter{mock: &_m.Mock}
}

// CreateQueryContext provides a mock function with given fields: height, prove
func (_m *ConsensusService) CreateQueryContext(height int64, prove bool) (types.Context, error) {
	ret := _m.Called(height, prove)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueryContext")
	}

	var r0 types.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, bool) (types.Context, error)); ok {
		return rf(height, prove)
	}
	if rf, ok := ret.Get(0).(func(int64, bool) types.Context); ok {
		r0 = rf(height, prove)
	} else {
		r0 = ret.Get(0).(types.Context)
	}

	if rf, ok := ret.Get(1).(func(int64, bool) error); ok {
		r1 = rf(height, prove)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsensusService_CreateQueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQueryContext'
type ConsensusService_CreateQueryContext_Call struct {
	*mock.Call
}

// CreateQueryContext is a helper method to define mock.On call
//   - height int64
//   - prove bool
func (_e *ConsensusService_Expecter) CreateQueryContext(height interface{}, prove interface{}) *ConsensusService_CreateQueryContext_Call {
	return &ConsensusService_CreateQueryContext_Call{Call: _e.mock.On("CreateQueryContext", height, prove)}
}

func (_c *ConsensusService_CreateQueryContext_Call) Run(run func(height int64, prove bool)) *ConsensusService_CreateQueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(bool))
	})
	return _c
}

func (_c *ConsensusService_CreateQueryContext_Call) Return(_a0 types.Context, _a1 error) *ConsensusService_CreateQueryContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsensusService_CreateQueryContext_Call) RunAndReturn(run func(int64, bool) (types.Context, error)) *ConsensusService_CreateQueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// LastBlockHeight provides a mock function with given fields:
func (_m *ConsensusService) LastBlockHeight() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastBlockHeight")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ConsensusService_LastBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastBlockHeight'
type ConsensusService_LastBlockHeight_Call struct {
	*mock.Call
}

// LastBlockHeight is a helper method to define mock.On call
func (_e *ConsensusService_Expecter) LastBlockHeight() *ConsensusService_LastBlockHeight_Call {
	return &ConsensusService_LastBlockHeight_Call{Call: _e.mock.On("LastBlockHeight")}
}

func (_c *ConsensusService_LastBlockHeight_Call) Run(run func()) *ConsensusService_LastBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsensusService_LastBlockHeight_Call) Return(_a0 int64) *ConsensusService_LastBlockHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsensusService_LastBlockHeight_Call) RunAndReturn(run func() int64) *ConsensusService_LastBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *ConsensusService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConsensusService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type ConsensusService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *ConsensusService_Expecter) Name() *ConsensusService_Name_Call {
	return &ConsensusService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *ConsensusService_Name_Call) Run(run func()) *ConsensusService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsensusService_Name_Call) Return(_a0 string) *ConsensusService_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsensusService_Name_Call) RunAndReturn(run func() string) *ConsensusService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *ConsensusService) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsensusService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ConsensusService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ConsensusService_Expecter) Start(ctx interface{}) *ConsensusService_Start_Call {
	return &ConsensusService_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *ConsensusService_Start_Call) Run(run func(ctx context.Context)) *ConsensusService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ConsensusService_Start_Call) Return(_a0 error) *ConsensusService_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsensusService_Start_Call) RunAndReturn(run func(context.Context) error) *ConsensusService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *ConsensusService) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsensusService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type ConsensusService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *ConsensusService_Expecter) Stop() *ConsensusService_Stop_Call {
	return &ConsensusService_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *ConsensusService_Stop_Call) Run(run func()) *ConsensusService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsensusService_Stop_Call) Return(_a0 error) *ConsensusService_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsensusService_Stop_Call) RunAndReturn(run func() error) *ConsensusService_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewConsensusService creates a new instance of ConsensusService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsensusService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsensusService {
	mock := &ConsensusService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
