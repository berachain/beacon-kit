// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	math "github.com/berachain/beacon-kit/primitives/math"
	mock "github.com/stretchr/testify/mock"

	state "github.com/berachain/beacon-kit/state-transition/core/state"
)

// StateFetcher is an autogenerated mock type for the StateFetcher type
type StateFetcher struct {
	mock.Mock
}

type StateFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *StateFetcher) EXPECT() *StateFetcher_Expecter {
	return &StateFetcher_Expecter{mock: &_m.Mock}
}

// GetGenesisState provides a mock function with given fields:
func (_m *StateFetcher) GetGenesisState() *state.StateDB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGenesisState")
	}

	var r0 *state.StateDB
	if rf, ok := ret.Get(0).(func() *state.StateDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.StateDB)
		}
	}

	return r0
}

// StateFetcher_GetGenesisState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGenesisState'
type StateFetcher_GetGenesisState_Call struct {
	*mock.Call
}

// GetGenesisState is a helper method to define mock.On call
func (_e *StateFetcher_Expecter) GetGenesisState() *StateFetcher_GetGenesisState_Call {
	return &StateFetcher_GetGenesisState_Call{Call: _e.mock.On("GetGenesisState")}
}

func (_c *StateFetcher_GetGenesisState_Call) Run(run func()) *StateFetcher_GetGenesisState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateFetcher_GetGenesisState_Call) Return(_a0 *state.StateDB) *StateFetcher_GetGenesisState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateFetcher_GetGenesisState_Call) RunAndReturn(run func() *state.StateDB) *StateFetcher_GetGenesisState_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateAtSlot provides a mock function with given fields: slot
func (_m *StateFetcher) GetStateAtSlot(slot math.U64) (*state.StateDB, math.U64, error) {
	ret := _m.Called(slot)

	if len(ret) == 0 {
		panic("no return value specified for GetStateAtSlot")
	}

	var r0 *state.StateDB
	var r1 math.U64
	var r2 error
	if rf, ok := ret.Get(0).(func(math.U64) (*state.StateDB, math.U64, error)); ok {
		return rf(slot)
	}
	if rf, ok := ret.Get(0).(func(math.U64) *state.StateDB); ok {
		r0 = rf(slot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.StateDB)
		}
	}

	if rf, ok := ret.Get(1).(func(math.U64) math.U64); ok {
		r1 = rf(slot)
	} else {
		r1 = ret.Get(1).(math.U64)
	}

	if rf, ok := ret.Get(2).(func(math.U64) error); ok {
		r2 = rf(slot)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StateFetcher_GetStateAtSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateAtSlot'
type StateFetcher_GetStateAtSlot_Call struct {
	*mock.Call
}

// GetStateAtSlot is a helper method to define mock.On call
//   - slot math.U64
func (_e *StateFetcher_Expecter) GetStateAtSlot(slot interface{}) *StateFetcher_GetStateAtSlot_Call {
	return &StateFetcher_GetStateAtSlot_Call{Call: _e.mock.On("GetStateAtSlot", slot)}
}

func (_c *StateFetcher_GetStateAtSlot_Call) Run(run func(slot math.U64)) *StateFetcher_GetStateAtSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *StateFetcher_GetStateAtSlot_Call) Return(_a0 *state.StateDB, _a1 math.U64, _a2 error) *StateFetcher_GetStateAtSlot_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StateFetcher_GetStateAtSlot_Call) RunAndReturn(run func(math.U64) (*state.StateDB, math.U64, error)) *StateFetcher_GetStateAtSlot_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateFetcher creates a new instance of StateFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateFetcher {
	mock := &StateFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
