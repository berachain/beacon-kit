// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	math "github.com/berachain/beacon-kit/primitives/math"
	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/consensus-types/types"
)

// Validator is an autogenerated mock type for the Validator type
type Validator struct {
	mock.Mock
}

type Validator_Expecter struct {
	mock *mock.Mock
}

func (_m *Validator) EXPECT() *Validator_Expecter {
	return &Validator_Expecter{mock: &_m.Mock}
}

// GetWithdrawalCredentials provides a mock function with given fields:
func (_m *Validator) GetWithdrawalCredentials() types.WithdrawalCredentials {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawalCredentials")
	}

	var r0 types.WithdrawalCredentials
	if rf, ok := ret.Get(0).(func() types.WithdrawalCredentials); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.WithdrawalCredentials)
		}
	}

	return r0
}

// Validator_GetWithdrawalCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawalCredentials'
type Validator_GetWithdrawalCredentials_Call struct {
	*mock.Call
}

// GetWithdrawalCredentials is a helper method to define mock.On call
func (_e *Validator_Expecter) GetWithdrawalCredentials() *Validator_GetWithdrawalCredentials_Call {
	return &Validator_GetWithdrawalCredentials_Call{Call: _e.mock.On("GetWithdrawalCredentials")}
}

func (_c *Validator_GetWithdrawalCredentials_Call) Run(run func()) *Validator_GetWithdrawalCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetWithdrawalCredentials_Call) Return(_a0 types.WithdrawalCredentials) *Validator_GetWithdrawalCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetWithdrawalCredentials_Call) RunAndReturn(run func() types.WithdrawalCredentials) *Validator_GetWithdrawalCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// IsFullyWithdrawable provides a mock function with given fields: amount, epoch
func (_m *Validator) IsFullyWithdrawable(amount math.U64, epoch math.U64) bool {
	ret := _m.Called(amount, epoch)

	if len(ret) == 0 {
		panic("no return value specified for IsFullyWithdrawable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(math.U64, math.U64) bool); ok {
		r0 = rf(amount, epoch)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Validator_IsFullyWithdrawable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFullyWithdrawable'
type Validator_IsFullyWithdrawable_Call struct {
	*mock.Call
}

// IsFullyWithdrawable is a helper method to define mock.On call
//   - amount math.U64
//   - epoch math.U64
func (_e *Validator_Expecter) IsFullyWithdrawable(amount interface{}, epoch interface{}) *Validator_IsFullyWithdrawable_Call {
	return &Validator_IsFullyWithdrawable_Call{Call: _e.mock.On("IsFullyWithdrawable", amount, epoch)}
}

func (_c *Validator_IsFullyWithdrawable_Call) Run(run func(amount math.U64, epoch math.U64)) *Validator_IsFullyWithdrawable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(math.U64))
	})
	return _c
}

func (_c *Validator_IsFullyWithdrawable_Call) Return(_a0 bool) *Validator_IsFullyWithdrawable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_IsFullyWithdrawable_Call) RunAndReturn(run func(math.U64, math.U64) bool) *Validator_IsFullyWithdrawable_Call {
	_c.Call.Return(run)
	return _c
}

// IsPartiallyWithdrawable provides a mock function with given fields: amount1, amount2
func (_m *Validator) IsPartiallyWithdrawable(amount1 math.U64, amount2 math.U64) bool {
	ret := _m.Called(amount1, amount2)

	if len(ret) == 0 {
		panic("no return value specified for IsPartiallyWithdrawable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(math.U64, math.U64) bool); ok {
		r0 = rf(amount1, amount2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Validator_IsPartiallyWithdrawable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPartiallyWithdrawable'
type Validator_IsPartiallyWithdrawable_Call struct {
	*mock.Call
}

// IsPartiallyWithdrawable is a helper method to define mock.On call
//   - amount1 math.U64
//   - amount2 math.U64
func (_e *Validator_Expecter) IsPartiallyWithdrawable(amount1 interface{}, amount2 interface{}) *Validator_IsPartiallyWithdrawable_Call {
	return &Validator_IsPartiallyWithdrawable_Call{Call: _e.mock.On("IsPartiallyWithdrawable", amount1, amount2)}
}

func (_c *Validator_IsPartiallyWithdrawable_Call) Run(run func(amount1 math.U64, amount2 math.U64)) *Validator_IsPartiallyWithdrawable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(math.U64))
	})
	return _c
}

func (_c *Validator_IsPartiallyWithdrawable_Call) Return(_a0 bool) *Validator_IsPartiallyWithdrawable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_IsPartiallyWithdrawable_Call) RunAndReturn(run func(math.U64, math.U64) bool) *Validator_IsPartiallyWithdrawable_Call {
	_c.Call.Return(run)
	return _c
}

// NewValidator creates a new instance of Validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Validator {
	mock := &Validator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
