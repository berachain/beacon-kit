// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

type Backend_Expecter struct {
	mock *mock.Mock
}

func (_m *Backend) EXPECT() *Backend_Expecter {
	return &Backend_Expecter{mock: &_m.Mock}
}

// GetVersionData provides a mock function with given fields:
func (_m *Backend) GetVersionData() (string, string, string, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersionData")
	}

	var r0 string
	var r1 string
	var r2 string
	var r3 string
	if rf, ok := ret.Get(0).(func() (string, string, string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() string); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func() string); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(string)
	}

	return r0, r1, r2, r3
}

// Backend_GetVersionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionData'
type Backend_GetVersionData_Call struct {
	*mock.Call
}

// GetVersionData is a helper method to define mock.On call
func (_e *Backend_Expecter) GetVersionData() *Backend_GetVersionData_Call {
	return &Backend_GetVersionData_Call{Call: _e.mock.On("GetVersionData")}
}

func (_c *Backend_GetVersionData_Call) Run(run func()) *Backend_GetVersionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Backend_GetVersionData_Call) Return(appName string, version string, os string, arch string) *Backend_GetVersionData_Call {
	_c.Call.Return(appName, version, os, arch)
	return _c
}

func (_c *Backend_GetVersionData_Call) RunAndReturn(run func() (string, string, string, string)) *Backend_GetVersionData_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
