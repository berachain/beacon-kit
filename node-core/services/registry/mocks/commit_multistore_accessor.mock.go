// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "cosmossdk.io/store/types"
)

// CommitMultistoreAccessor is an autogenerated mock type for the CommitMultistoreAccessor type
type CommitMultistoreAccessor struct {
	mock.Mock
}

type CommitMultistoreAccessor_Expecter struct {
	mock *mock.Mock
}

func (_m *CommitMultistoreAccessor) EXPECT() *CommitMultistoreAccessor_Expecter {
	return &CommitMultistoreAccessor_Expecter{mock: &_m.Mock}
}

// CommitMultiStore provides a mock function with given fields:
func (_m *CommitMultistoreAccessor) CommitMultiStore() types.CommitMultiStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CommitMultiStore")
	}

	var r0 types.CommitMultiStore
	if rf, ok := ret.Get(0).(func() types.CommitMultiStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CommitMultiStore)
		}
	}

	return r0
}

// CommitMultistoreAccessor_CommitMultiStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitMultiStore'
type CommitMultistoreAccessor_CommitMultiStore_Call struct {
	*mock.Call
}

// CommitMultiStore is a helper method to define mock.On call
func (_e *CommitMultistoreAccessor_Expecter) CommitMultiStore() *CommitMultistoreAccessor_CommitMultiStore_Call {
	return &CommitMultistoreAccessor_CommitMultiStore_Call{Call: _e.mock.On("CommitMultiStore")}
}

func (_c *CommitMultistoreAccessor_CommitMultiStore_Call) Run(run func()) *CommitMultistoreAccessor_CommitMultiStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CommitMultistoreAccessor_CommitMultiStore_Call) Return(_a0 types.CommitMultiStore) *CommitMultistoreAccessor_CommitMultiStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommitMultistoreAccessor_CommitMultiStore_Call) RunAndReturn(run func() types.CommitMultiStore) *CommitMultistoreAccessor_CommitMultiStore_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommitMultistoreAccessor creates a new instance of CommitMultistoreAccessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommitMultistoreAccessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommitMultistoreAccessor {
	mock := &CommitMultistoreAccessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
