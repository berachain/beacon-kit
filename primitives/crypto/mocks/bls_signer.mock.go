// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	crypto "github.com/berachain/beacon-kit/primitives/crypto"
	mock "github.com/stretchr/testify/mock"
)

// Blssigner is an autogenerated mock type for the BLSSigner type
type Blssigner struct {
	mock.Mock
}

type Blssigner_Expecter struct {
	mock *mock.Mock
}

func (_m *Blssigner) EXPECT() *Blssigner_Expecter {
	return &Blssigner_Expecter{mock: &_m.Mock}
}

// PublicKey provides a mock function with no fields
func (_m *Blssigner) PublicKey() crypto.BLSPubkey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicKey")
	}

	var r0 crypto.BLSPubkey
	if rf, ok := ret.Get(0).(func() crypto.BLSPubkey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.BLSPubkey)
		}
	}

	return r0
}

// Blssigner_PublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicKey'
type Blssigner_PublicKey_Call struct {
	*mock.Call
}

// PublicKey is a helper method to define mock.On call
func (_e *Blssigner_Expecter) PublicKey() *Blssigner_PublicKey_Call {
	return &Blssigner_PublicKey_Call{Call: _e.mock.On("PublicKey")}
}

func (_c *Blssigner_PublicKey_Call) Run(run func()) *Blssigner_PublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Blssigner_PublicKey_Call) Return(_a0 crypto.BLSPubkey) *Blssigner_PublicKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Blssigner_PublicKey_Call) RunAndReturn(run func() crypto.BLSPubkey) *Blssigner_PublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: _a0
func (_m *Blssigner) Sign(_a0 []byte) (crypto.BLSSignature, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 crypto.BLSSignature
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (crypto.BLSSignature, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) crypto.BLSSignature); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.BLSSignature)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Blssigner_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type Blssigner_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - _a0 []byte
func (_e *Blssigner_Expecter) Sign(_a0 interface{}) *Blssigner_Sign_Call {
	return &Blssigner_Sign_Call{Call: _e.mock.On("Sign", _a0)}
}

func (_c *Blssigner_Sign_Call) Run(run func(_a0 []byte)) *Blssigner_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Blssigner_Sign_Call) Return(_a0 crypto.BLSSignature, _a1 error) *Blssigner_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Blssigner_Sign_Call) RunAndReturn(run func([]byte) (crypto.BLSSignature, error)) *Blssigner_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// VerifySignature provides a mock function with given fields: pubKey, msg, signature
func (_m *Blssigner) VerifySignature(pubKey crypto.BLSPubkey, msg []byte, signature crypto.BLSSignature) error {
	ret := _m.Called(pubKey, msg, signature)

	if len(ret) == 0 {
		panic("no return value specified for VerifySignature")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(crypto.BLSPubkey, []byte, crypto.BLSSignature) error); ok {
		r0 = rf(pubKey, msg, signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Blssigner_VerifySignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySignature'
type Blssigner_VerifySignature_Call struct {
	*mock.Call
}

// VerifySignature is a helper method to define mock.On call
//   - pubKey crypto.BLSPubkey
//   - msg []byte
//   - signature crypto.BLSSignature
func (_e *Blssigner_Expecter) VerifySignature(pubKey interface{}, msg interface{}, signature interface{}) *Blssigner_VerifySignature_Call {
	return &Blssigner_VerifySignature_Call{Call: _e.mock.On("VerifySignature", pubKey, msg, signature)}
}

func (_c *Blssigner_VerifySignature_Call) Run(run func(pubKey crypto.BLSPubkey, msg []byte, signature crypto.BLSSignature)) *Blssigner_VerifySignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(crypto.BLSPubkey), args[1].([]byte), args[2].(crypto.BLSSignature))
	})
	return _c
}

func (_c *Blssigner_VerifySignature_Call) Return(_a0 error) *Blssigner_VerifySignature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Blssigner_VerifySignature_Call) RunAndReturn(run func(crypto.BLSPubkey, []byte, crypto.BLSSignature) error) *Blssigner_VerifySignature_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlssigner creates a new instance of Blssigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlssigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Blssigner {
	mock := &Blssigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
