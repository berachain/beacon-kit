// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	engineprimitives "github.com/berachain/beacon-kit/engine-primitives/engine-primitives"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/consensus-types/types"
)

// ExecutionEngine is an autogenerated mock type for the ExecutionEngine type
type ExecutionEngine struct {
	mock.Mock
}

type ExecutionEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionEngine) EXPECT() *ExecutionEngine_Expecter {
	return &ExecutionEngine_Expecter{mock: &_m.Mock}
}

// NotifyForkchoiceUpdate provides a mock function with given fields: ctx, req
func (_m *ExecutionEngine) NotifyForkchoiceUpdate(ctx context.Context, req *types.ForkchoiceUpdateRequest) (*engineprimitives.PayloadID, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NotifyForkchoiceUpdate")
	}

	var r0 *engineprimitives.PayloadID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ForkchoiceUpdateRequest) (*engineprimitives.PayloadID, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.ForkchoiceUpdateRequest) *engineprimitives.PayloadID); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*engineprimitives.PayloadID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.ForkchoiceUpdateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionEngine_NotifyForkchoiceUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyForkchoiceUpdate'
type ExecutionEngine_NotifyForkchoiceUpdate_Call struct {
	*mock.Call
}

// NotifyForkchoiceUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.ForkchoiceUpdateRequest
func (_e *ExecutionEngine_Expecter) NotifyForkchoiceUpdate(ctx interface{}, req interface{}) *ExecutionEngine_NotifyForkchoiceUpdate_Call {
	return &ExecutionEngine_NotifyForkchoiceUpdate_Call{Call: _e.mock.On("NotifyForkchoiceUpdate", ctx, req)}
}

func (_c *ExecutionEngine_NotifyForkchoiceUpdate_Call) Run(run func(ctx context.Context, req *types.ForkchoiceUpdateRequest)) *ExecutionEngine_NotifyForkchoiceUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.ForkchoiceUpdateRequest))
	})
	return _c
}

func (_c *ExecutionEngine_NotifyForkchoiceUpdate_Call) Return(_a0 *engineprimitives.PayloadID, _a1 error) *ExecutionEngine_NotifyForkchoiceUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionEngine_NotifyForkchoiceUpdate_Call) RunAndReturn(run func(context.Context, *types.ForkchoiceUpdateRequest) (*engineprimitives.PayloadID, error)) *ExecutionEngine_NotifyForkchoiceUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyNewPayload provides a mock function with given fields: ctx, req, retryOnSyncingStatus
func (_m *ExecutionEngine) NotifyNewPayload(ctx context.Context, req types.NewPayloadRequest, retryOnSyncingStatus bool) error {
	ret := _m.Called(ctx, req, retryOnSyncingStatus)

	if len(ret) == 0 {
		panic("no return value specified for NotifyNewPayload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NewPayloadRequest, bool) error); ok {
		r0 = rf(ctx, req, retryOnSyncingStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutionEngine_NotifyNewPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyNewPayload'
type ExecutionEngine_NotifyNewPayload_Call struct {
	*mock.Call
}

// NotifyNewPayload is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.NewPayloadRequest
//   - retryOnSyncingStatus bool
func (_e *ExecutionEngine_Expecter) NotifyNewPayload(ctx interface{}, req interface{}, retryOnSyncingStatus interface{}) *ExecutionEngine_NotifyNewPayload_Call {
	return &ExecutionEngine_NotifyNewPayload_Call{Call: _e.mock.On("NotifyNewPayload", ctx, req, retryOnSyncingStatus)}
}

func (_c *ExecutionEngine_NotifyNewPayload_Call) Run(run func(ctx context.Context, req types.NewPayloadRequest, retryOnSyncingStatus bool)) *ExecutionEngine_NotifyNewPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NewPayloadRequest), args[2].(bool))
	})
	return _c
}

func (_c *ExecutionEngine_NotifyNewPayload_Call) Return(_a0 error) *ExecutionEngine_NotifyNewPayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionEngine_NotifyNewPayload_Call) RunAndReturn(run func(context.Context, types.NewPayloadRequest, bool) error) *ExecutionEngine_NotifyNewPayload_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutionEngine creates a new instance of ExecutionEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionEngine {
	mock := &ExecutionEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
